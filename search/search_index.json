{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"about/","title":"Nubilus movit","text":""},{"location":"about/#resupinus-pisenore-dumque-aethera-nectare","title":"Resupinus Pisenore dumque aethera nectare","text":"<p>Lorem markdownum tenaci Lucifero herba: circumdata, mihi deus vigilans tamen fuit magnosque triumpha? Habuit circumdat ut ille, temperat, Pallas dis feruntur: natura: longius, ministrarum nihil. Quodque in manus, et veniam vincemur contigit posuit fuerant repetita animum hunc simul debuit. Et aethere latissima contemnere mixta et confudit fratri manus, intrarant puppibus quod reddit se quoque. Membra ille eris corpore!</p>"},{"location":"about/#dummodo-falsae-bracchiaque-rerum","title":"Dummodo falsae bracchiaque rerum","text":"<p>Caputque tu brevi munus per. Potest cera, ore tuis Tritonia propinquos oppida rexque sperat, cum secutum suis. Felix rebus celeremque ad esset et felle nocendi. Formosus bonis pererratis sterilique taceam captum, pennis per tremit currus divellite querellas?</p> <ol> <li>Mihi pleno quodque parabant es erat principio</li> <li>Contigit in vultus in censuque videndi velut</li> <li>Achaia insano nosti cacumina</li> <li>Cantu qui</li> <li>In vale paries tamen ubi nescio natus</li> </ol>"},{"location":"about/#lotos-quid-pietas","title":"Lotos quid pietas","text":"<p>Venit genas posset parvis, et cultro in carminibus patentis pondere, cui non inminet angues terraeque! Simplicitas refer aeger.</p> <pre><code>if (scrollControl &gt; data.maximize_bcc_resolution(gnuAffiliateWindows, gpu,\n        dvd_cloud)) {\n    ribbonWaveformAd.checksumSnapshot(pitchRdfSolid, -1);\n} else {\n    serverAdapter(file + bash, -3);\n    domainDvd /= 5;\n}\nif (tiff) {\n    macroCamera(podcastSkuMotherboard + lossyPasswordTweet, storageSdkHeap,\n            reader_t_drive(serverKindleDvd));\n    flash_click_ata(cyberspace(internal_lock_blog));\n    footerAddressMatrix += -5;\n}\nvar bar = 4;\n</code></pre>"},{"location":"about/#patris-utinam-ossibus","title":"Patris utinam ossibus","text":"<p>Thalamique vellera Peleus ab vivo crudeles bracchia, animum qui, quodvis ego, quae arma. Hominum orbem: rapidi iacent miserata iram vada optat finita dant suadent privignae medio sustinuit et summa moenia. Equis corpore mare illic Nilum, data delapsam tempora qua instruxere, alto nam usum. Contraque illuc dum gregibus Minos, turbatusque huic alios caelo membra quin bello, latratibus per esse, alta!</p> <p>Iustis Nereus figere? Somno aera praevitiat disce, inpono. Et vertice fruatur! Excedere caecos occurrensque arva trepidumque avia innumeras.</p> <p>Arma tabellis in, lacrimas si tempore sonos videtur altique cum: iuveni. Mansit dimittere in riguerunt muros, sed forma suis iniquus. Profanam profusis moderatior de utque, geminae mare corpusque Tartara ad siderea de terras tellurem. Senecta spatium, qui Pelops gaudet. Agmine lucos inpar deus cum terraeque aversos?</p>"},{"location":"cat/","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"cat/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"cat/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"license/","title":"Main here things","text":"<p>This is a test</p>"},{"location":"license/#section-one","title":"Section One","text":"<p>jdkfjdkfjdk</p>"},{"location":"license/#section-two","title":"Section Two","text":"<p>fdjkfdkfdj</p>"},{"location":"license/#section-three","title":"Section Three","text":"<p>dfd</p>"},{"location":"java/getting_started/","title":"Getting Started","text":"<p>To add the Java sdk to your project, if you are using maven, add the following dependency to your <code>POM</code> file.</p> <pre><code>... \n    &lt;dependency&gt;\n        // placeholder\n    &lt;/dependency&gt;\n...\n</code></pre>"},{"location":"java/getting_started/#overview","title":"Overview","text":"<p>The SDK is responsible for setting any prerequisite keys that are needed, this includes your JellyFaas api key, and any other public API key's. All functions available at JellyFaas follow the same process to call them: - Create a configuration object and setting any keys. - Instantiate a JellyFaas Client and parse the config object in. - Looking up a function with the functions short name. - Setting the request body - this includes any query parameters and input data/ - Setting the response object - Finally, invoking the call!</p>"},{"location":"java/getting_started/#calling-your-first-function-for-noobs","title":"Calling your first function (for noobs!)","text":"<p>Now that you've added your <code>POM</code> dependency, you are ready to make your first call!  Here's a step-by-step guide of how to do so. If you are new to the platform, or have limited coding experience, this walk-through is for you! </p>"},{"location":"java/getting_started/#1-creating-a-config-object","title":"1. Creating a Config Object","text":"<p>The first step is to create your config object and parse your JellyFaas api key into it:</p> <pre><code>// creating a config object\nConfig config = new Config();\nconfig.setApiKey(\"API-KEY\");\n</code></pre>"},{"location":"java/getting_started/#2-creating-the-client","title":"2. Creating the client","text":"<p>Once you've created your config object, you can create a client and parse this object in on instantiation: <pre><code>// setting the client\nClient client = new Client(config);\n</code></pre></p>"},{"location":"java/getting_started/#3-looking-up-a-function","title":"3. Looking up a function","text":"<p>To look up a function, you must use the functions short name to find it. This is done with the following, provided all the previous steps are complete</p> <pre><code>// ...\n// using the client created above\n\nclient.lookUp(\"shortname\")\n</code></pre> <p>Looking up a function will influence the following steps as this sets the function to be called</p>"},{"location":"java/getting_started/#4-setting-the-request","title":"4. Setting the request","text":"<p>Once you've called <code>lookup</code> on your client object, you can now set your request. If a function takes no query parameters and/or no input body, the <code>setRequest</code> parameters can be <code>null</code> respectively. This is done with the following:</p> <pre><code>client.lookUp(\"shortname\").setRequest(params, body)\n</code></pre> <p>NOTE: <code>params</code> and <code>body</code> are placeholders for the following steps:</p>"},{"location":"java/getting_started/#41-adding-query-parameters","title":"4.1 Adding Query Parameters","text":"<p>Creating query parameters is done by creating a <code>Map&lt;String, String&gt;</code> - where the key value pairs are the query parameter name and its value respectively.</p> <pre><code>Map&lt;String, String&gt; params = new HashMap&lt;&gt;();\nparams.put(\"queryParam\", \"foobar\");\n</code></pre>"},{"location":"java/getting_started/#42-adding-a-request-body","title":"4.2 Adding a request body","text":"<p>If the request body is a JSON object, our website provides the auto generated code for the input and output classes for these json objects. You must copy and paste these classes and add them to your project as these are used to handle the input and output json responses for a given function.</p>"},{"location":"java/getting_started/#421-using-the-functions-autogenerated-input-class","title":"4.2.1 Using the functions autogenerated input class","text":"<pre><code>// creating an input object\nSomeInputClass someInput = new SomeInputClass();\nsomeInput.setSomeAttribute(\"foobar\");\n</code></pre>"},{"location":"java/getting_started/#422-or-using-a-byte-array","title":"4.2.2 Or, using a byte array","text":"<p>If the function you are invoking does not have an auto generated class for the input body, then a <code>byte[]</code> must be used as the input body.</p> <pre><code>byte[] someInput = \"Hello, world!\".getBytes();\n</code></pre>"},{"location":"java/getting_started/#5-setting-the-response","title":"5. Setting the response","text":"<p>There are three main ways to configure the output of a function invoke: Using an instance of the auto generated output class, using the <code>class</code> of the auto generated class, or using a <code>byte[]</code> to capture the output.</p>"},{"location":"java/getting_started/#51-using-an-instance","title":"5.1 Using an instance","text":"<p>As mentioned previously, our website contains the auto generated Input/Output classes. Again, you must copy and paste these classes and add them to your project as these are used to handle the input and output json responses for a given function.</p> <pre><code>// creating an output object\nSomeOutputClass someOutput = new SomeOutputClass();\n</code></pre> <p>Using this instance, setting the response is done with the following - provided all the above steps are completed:  <pre><code>client.lookUp(\"shortname\").setRequest(params, someInput).setResponse(someOutput);\n</code></pre> This will use the instance and populate it once the function is invoked.</p>"},{"location":"java/getting_started/#52-using-a-class","title":"5.2 Using a <code>.class</code>","text":"<p>This approach can be used if you don't have an instance of the output object. Don't worry, when you invoke the function, a new object will be created using this type. <pre><code>client.lookUp(\"shortname\").setRequest(params, someInput).setResponse(someOutput.class);\n</code></pre></p>"},{"location":"java/getting_started/#53-using-a-byte","title":"5.3 Using a <code>byte[]</code>","text":"<p>If a function doesn't return a <code>json</code> response, then a <code>byte[].class</code> must be used like in step 5.2: <pre><code>client.lookUp(\"shortname\").setRequest(params, someInput).setResponse(byte[].class);\n</code></pre></p>"},{"location":"java/getting_started/#6-calling-the-function","title":"6. Calling the function \ud83d\ude80","text":"<p>Now that you have done all the previous steps, you are ready to call your function.  This is super easy! Just call <code>.invoke()</code> on your client and your function will be called with your request and response data!</p>"},{"location":"java/getting_started/#61-invoking-with-an-output-instance","title":"6.1 Invoking with an output instance","text":"<p>If you followed step 5.1, then your <code>invoke</code> call will look something like this: <pre><code>client.lookUp(\"shortname\").setRequest(params, someInput).setResponse(someOutput).invoke();\n</code></pre></p>"},{"location":"java/getting_started/#62-invoking-with-a-class","title":"6.2 Invoking with a <code>.class</code>","text":"<p>If you followed step 5.2, then your <code>invoke</code> call will look something like this: <pre><code>OutputClass myOutput = (OutputClass) client.lookUp(\"shortname\").setRequest(params, body).setResponse(someOutput.class).invoke();\n</code></pre></p>"},{"location":"java/getting_started/#63-invoking-with-a-byte","title":"6.3 Invoking with a <code>byte[]</code>","text":"<p>If you followed step 5.3, then your <code>invoke</code> call will look something like this: <pre><code>byte[] response = (byte[]) client.lookUp(\"shortname\").setRequest(params, body).setResponse(byte[].class).invoke();\n</code></pre></p> <p>\ud83d\ude80 Ta-da ! You've called your first JellyFaasFunction \ud83d\ude80</p>"},{"location":"java/getting_started/#complete-example","title":"Complete Example:","text":"<pre><code>// creating a config object\nConfig config = new Config();\nconfig.setApiKey(\"API-KEY\");\n\n// setting the client\nClient client = new Client(config);\n\n// setting the query parameters\nMap&lt;String, String&gt; params = new HashMap&lt;&gt;();\nparams.put(\"queryParam\", \"foobar\");\n\n// setting an input object\nSomeInputClass someInput = new SomeInputClass();\nsomeInput.setSomeAttribute(\"foobar\");\n\n// setting an output object\nSomeOutputClass someOutput = new SomeOutputClass();\n\n// a. invoking with an output instance\nclient.lookUp(\"shortname\").setRequest(params, someInput).setResponse(someOutput).invoke();\n\n// b. invoking with an output class\nSomeOutputClass myOutput = (SomeOutputClass) client.lookUp(\"shortname\").setRequest(params, someInput).setResponse(SomeOutputClass.class).invoke();\n\n// c. invoking with a byte[]\nbyte[] response = (byte[]) client.lookUp(\"shortname\").setRequest(params, body).setResponse(byte[].class).invoke();\n</code></pre>"},{"location":"python/getting_started/","title":"JellyFAAS Introduction","text":"<p>What is JellyFAAS?</p>"},{"location":"python/getting_started/#cloud-functions","title":"Cloud Functions","text":""},{"location":"python/getting_started/#ai-integration","title":"AI Integration","text":""},{"location":"python/getting_started/#sdks","title":"SDKs","text":"<p>Links to... - Node - Python - Golang - C# - Java</p> <p>To get up and running as soon as possible, check the Quick Start Guide.</p> <p>For a more comprehensive overview, see the full Getting Started Guide.</p> <p>For creating your own JellyFAAS functions, see the JellyFAAS Function Creation docs.</p>"},{"location":"python/getting_started/#quick-start-guide","title":"Quick Start Guide","text":""},{"location":"python/getting_started/#installation","title":"Installation","text":"<p>The JellyFAAS SDK Python package is available on PyPI. Source code can viewed on GitHub.</p> WindowsUnix/MacOS <pre><code>py -m pip install jellyfaas\n</code></pre> <pre><code>python3 -m pip install jellyfaas\n</code></pre>"},{"location":"python/getting_started/#overview","title":"Overview","text":"<p>The JellyFAAS SDK simplifies working with the JellyFAAS API. It provides a <code>Client</code> class which handles authentication and functions to simplify creating HTTP requests to the API.</p> <p>You will need a JellyFAAS API key to follow the example. See Getting an API Key.</p> <p>API Credits</p> <p>The cloud functions used in the examples on this page will not use your credits.</p>"},{"location":"python/getting_started/#code-example","title":"Code Example","text":"<p>This example covers the SDK's most commonly used functionality.</p> <pre><code>import jellyfaas\n\n# It is recomended to set up your API key as an environment variable.\nimport os\napi_key = os.getenv(\"JELLYFAAS_API_KEY\")\n\n# Initialize the client config\nconfig = jellyfaas.ClientConfig(api_key=api_key, debug=True)\n\n# Initialize the client\nclient = jellyfaas.Client(config)\n\n# Lookup a function\nclient.lookup_function(\"helloworld\")\n\n# Set the request query params and JSON body (via a python dictionary)\nclient.set_request(\n    {\"name\": \"tim\"},                # Set query parameters\n    {\"order\": [\"ham\", \"jam\", \"spam\"]}) # Set request body\n\n# Finally, call the cloud function\n_, response = client.invoke()\n\nprint(response)\n# Output: \"Hello, Tim. You ordered 'ham', 'jam', and 'spam'.\"\n</code></pre>"},{"location":"python/getting_started/#function-chaining","title":"Function Chaining","text":"<p>All of the <code>Client</code> class's functions return the <code>Client</code> instance, enabling function chaining. The only exception to this is <code>Client.invoke()</code>, which returns a tuple of the <code>client</code> instance, and a response object. Using this functionality, the above example could be rewritten as: <pre><code>import jellyfaas\nimport os\napi_key = os.getenv(\"JELLYFAAS_API_KEY\")\n\n# Create client config instance\nconfig = jellyfaas.ClientConfig(api_key)\n\n# Create Client instance, lookup cloud function, set the request params/body, and invoke.\nclient, response = jellyfaas.Client(config).lookup_function(\"helloworld\").set_request({\"name\": \"arthur\"}, {\"order\": [\"ham\", \"jam\", \"spam\"]}).invoke()\n\nprint(response)\n</code></pre></p>"},{"location":"python/getting_started/#getting-started","title":"Getting Started","text":""},{"location":"python/getting_started/#installation_1","title":"Installation","text":"<p>The JellyFAAS SDK Python package is available on PyPI. Source code can viewed on GitHub.</p> WindowsUnix/MacOS <pre><code>py -m pip install jellyfaas\n</code></pre> <pre><code>python3 -m pip install jellyfaas\n</code></pre>"},{"location":"python/getting_started/#overview_1","title":"Overview","text":"<p>The JellyFAAS SDK simplifies working with the JellyFAAS API. It provides a <code>Client</code> class which handles authentication and functions to simplify creating HTTP requests to the API. It also provides additional validation and checks of your requests, to prevent making invalid function calls, which would otherwise consume API credits.</p> <p></p> <p>You will need a JellyFAAS API key to follow the example. See Getting an API Key.</p> <p>API Credits</p> <p>The cloud functions used in the examples on this page will not use your credits.</p>"},{"location":"python/getting_started/#environment-setup","title":"Environment Setup","text":"<p>It is recommended to set your API key as an environment variable.</p>"},{"location":"python/getting_started/#clientconfig-class","title":"<code>ClientConfig</code> Class","text":""},{"location":"python/getting_started/#initialization","title":"Initialization","text":"<p>Create an instance of the <code>ClientConfig</code> class with your API key:</p> <ul> <li>Parameters:<ul> <li><code>api_key (str)</code>: Your JellyFAAS API key.</li> <li><code>debug (bool)</code>: Optional. Enables debug logging if set to <code>True</code>.</li> </ul> </li> <li>Returns:<ul> <li>The <code>ClientConfig</code> instance.</li> </ul> </li> </ul> <pre><code>config = ClientConfig(api_key=\"your_api_key\", debug=True)\n</code></pre> <p>The <code>ClientConfig</code> class handles the authentication with the JellyFAAS API and manages the API key and authentication token.</p>"},{"location":"python/getting_started/#client-class","title":"<code>Client</code> Class","text":""},{"location":"python/getting_started/#initialization_1","title":"Initialization","text":"<p>Create an instance of the <code>Client</code> class using the <code>ClientConfig</code> object:</p> <ul> <li>Parameters:<ul> <li><code>config (ClientConfig)</code>: The <code>ClientConfig</code> instance.</li> </ul> </li> <li>Returns:<ul> <li>The <code>Client</code> instance.</li> </ul> </li> </ul> <pre><code>client = Client(config=config)\n</code></pre>"},{"location":"python/getting_started/#methods","title":"Methods","text":""},{"location":"python/getting_started/#lookup_functionfunction_id","title":"<code>lookup_function(function_id)</code>","text":"<p>Look up a function by its ID (shortname).</p> <ul> <li>Parameters:<ul> <li><code>function_id (str)</code>: The ID (shortname) of the function to look up.</li> </ul> </li> <li>Returns:<ul> <li>The <code>Client</code> instance.</li> </ul> </li> </ul> <p>Example:</p> <pre><code>client.lookup_function(\"FUNCTION_ID\")\n</code></pre>"},{"location":"python/getting_started/#set_requestquery_params-request_body_instancenone","title":"<code>set_request(query_params={}, request_body_instance=None)</code>","text":"<p>Set the request parameters and body.</p> <ul> <li>Parameters:<ul> <li><code>query_params (dict)</code>: Query parameters for the request.</li> <li><code>request_body_instance (dict or object)</code>: JSON body for the request. Can be a dictionary or an instance of a class with attributes.</li> </ul> </li> <li>Returns:<ul> <li>The <code>Client</code> instance.</li> </ul> </li> </ul> <p>Example:</p> <pre><code>client.set_request(query_params={\"param1\": \"value1\"}, request_body_instance={\"key\": \"value\"})\n</code></pre>"},{"location":"python/getting_started/#invoke","title":"<code>invoke()</code>","text":"<p>Invoke the function with the set parameters and body.</p> <ul> <li>Returns: <ul> <li>A tuple of the <code>Client</code> instance and the response JSON if successful, otherwise raises an exception.</li> </ul> </li> </ul> <p>Example:</p> <pre><code>client, result = client.invoke()\n</code></pre>"},{"location":"python/getting_started/#set_responsetype","title":"<code>set_response(type)</code>","text":"<p>Set the response type for automatic transformation of the response JSON into an instance of a specified class.</p> <ul> <li>Parameters:<ul> <li><code>type (class)</code>: The class type to transform the response JSON into.</li> </ul> </li> <li>Returns:<ul> <li>The <code>Client</code> instance.</li> </ul> </li> </ul> <p>Example:</p> <pre><code>client.set_response(MyResponseClass)\n</code></pre>"},{"location":"python/getting_started/#debugging","title":"Debugging","text":"<p>Both <code>ClientConfig</code> and <code>Client</code> classes use Python's built-in logging module to provide debug and error logs. Ensure you configure the logging level appropriately in your application.</p>"},{"location":"python/getting_started/#complete-example-usage","title":"Complete Example Usage:","text":"<pre><code>import os\nimport jellyfaas\n\n# Retrieve the API key from environment variable\napi_key = os.getenv(\"JELLYFAAS_API_KEY\")\n\nif api_key is None:\n    raise ValueError(\"API key is not set in environment variables\")\n\n# Define a response class (optional)\nclass MyResponse:\n    def __init__(self):\n        self.key = None\n        self.value = None\n\n# Create a JellyFAAS config and client, then invoke a function\nconfig = jellyfaas.ClientConfig(api_key=api_key, debug=True)\nclient, result = (\n    jellyfaas.Client(config)\n    .lookup_function(\"joesjokes\")\n    .set_request(query_params={\"param1\": \"value1\"}, request_body_instance={\"key\": \"value\"})\n    .set_response(MyResponse)\n    .invoke()\n)\n\nprint(result)\n</code></pre>"},{"location":"python/getting_started/#handling-exceptions","title":"Handling Exceptions","text":"<p>The SDK raises custom exceptions for various error conditions:</p> <ul> <li><code>AuthenticationFailedException</code>: Raised when authentication fails.</li> <li><code>FunctionLookupException</code>: Raised when function lookup fails.</li> <li><code>SetRequestException</code>: Raised when setting the request parameters or body fails.</li> <li><code>InvocationException</code>: Raised when invocation of the function fails.</li> </ul> <p>These all inherit from a base <code>JellyFaasException</code> type, which you can optionally use to catch all exceptions from the SDK.</p> <p>Example:</p> <pre><code>import jellyfaas\nimport os\n\napi_key = os.getenv(\"JELLYFAAS_API_KEY\")\n\ntry:\n    config = jellyfaas.ClientConfig(api_key=api_key)\n    client, result = (\n        jellyfaas.Client(config)\n        .lookup_function(\"joesjokes\")\n        .set_request(query_params={\"param1\": \"value1\"}, request_body_instance={\"key\": \"value\"})\n        .invoke()\n    )\n    print(result)\nexcept jellyfaas.AuthenticationFailedException as e:\n    print(f\"Authentication failed: {e}\")\nexcept jellyfaas.FunctionLookupException as e:\n    print(f\"Function lookup failed: {e}\")\nexcept jellyfaas.SetRequestException as e:\n    print(f\"Setting request failed: {e}\")\nexcept jellyfaas.InvocationException as e:\n    print(f\"Function invocation failed: {e}\")\n</code></pre>"},{"location":"python/getting_started/#additional-information","title":"Additional Information","text":"<p>The client supports validation of request bodies against input schemas if provided in the function requirements. It also includes debug logging to help trace the internal state and steps of computation, aiding in debugging and development.</p> <p>Ensure you have configured logging in your application to capture debug logs:</p> <pre><code>import logging\n\nlogging.basicConfig(level=logging.DEBUG)\n</code></pre>"}]}