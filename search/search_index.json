{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"about/","title":"Nubilus movit","text":""},{"location":"about/#resupinus-pisenore-dumque-aethera-nectare","title":"Resupinus Pisenore dumque aethera nectare","text":"<p>Lorem markdownum tenaci Lucifero herba: circumdata, mihi deus vigilans tamen fuit magnosque triumpha? Habuit circumdat ut ille, temperat, Pallas dis feruntur: natura: longius, ministrarum nihil. Quodque in manus, et veniam vincemur contigit posuit fuerant repetita animum hunc simul debuit. Et aethere latissima contemnere mixta et confudit fratri manus, intrarant puppibus quod reddit se quoque. Membra ille eris corpore!</p>"},{"location":"about/#dummodo-falsae-bracchiaque-rerum","title":"Dummodo falsae bracchiaque rerum","text":"<p>Caputque tu brevi munus per. Potest cera, ore tuis Tritonia propinquos oppida rexque sperat, cum secutum suis. Felix rebus celeremque ad esset et felle nocendi. Formosus bonis pererratis sterilique taceam captum, pennis per tremit currus divellite querellas?</p> <ol> <li>Mihi pleno quodque parabant es erat principio</li> <li>Contigit in vultus in censuque videndi velut</li> <li>Achaia insano nosti cacumina</li> <li>Cantu qui</li> <li>In vale paries tamen ubi nescio natus</li> </ol>"},{"location":"about/#lotos-quid-pietas","title":"Lotos quid pietas","text":"<p>Venit genas posset parvis, et cultro in carminibus patentis pondere, cui non inminet angues terraeque! Simplicitas refer aeger.</p> <pre><code>if (scrollControl &gt; data.maximize_bcc_resolution(gnuAffiliateWindows, gpu,\n        dvd_cloud)) {\n    ribbonWaveformAd.checksumSnapshot(pitchRdfSolid, -1);\n} else {\n    serverAdapter(file + bash, -3);\n    domainDvd /= 5;\n}\nif (tiff) {\n    macroCamera(podcastSkuMotherboard + lossyPasswordTweet, storageSdkHeap,\n            reader_t_drive(serverKindleDvd));\n    flash_click_ata(cyberspace(internal_lock_blog));\n    footerAddressMatrix += -5;\n}\nvar bar = 4;\n</code></pre>"},{"location":"about/#patris-utinam-ossibus","title":"Patris utinam ossibus","text":"<p>Thalamique vellera Peleus ab vivo crudeles bracchia, animum qui, quodvis ego, quae arma. Hominum orbem: rapidi iacent miserata iram vada optat finita dant suadent privignae medio sustinuit et summa moenia. Equis corpore mare illic Nilum, data delapsam tempora qua instruxere, alto nam usum. Contraque illuc dum gregibus Minos, turbatusque huic alios caelo membra quin bello, latratibus per esse, alta!</p> <p>Iustis Nereus figere? Somno aera praevitiat disce, inpono. Et vertice fruatur! Excedere caecos occurrensque arva trepidumque avia innumeras.</p> <p>Arma tabellis in, lacrimas si tempore sonos videtur altique cum: iuveni. Mansit dimittere in riguerunt muros, sed forma suis iniquus. Profanam profusis moderatior de utque, geminae mare corpusque Tartara ad siderea de terras tellurem. Senecta spatium, qui Pelops gaudet. Agmine lucos inpar deus cum terraeque aversos?</p>"},{"location":"getting_started/","title":"Getting Started Guide","text":"<p>We've stream lined everything, so you don't have too.</p>"},{"location":"getting_started/#installation","title":"Installation","text":"<p>We support a wide range of languages - find your language to get started with our SDK.</p> PythonJavaGoC#Typescript/Javascript <p>The JellyFAAS SDK Python package is available on PyPI.</p> WindowsUnix/MacOS <pre><code>py -m pip install jellyfaas\n</code></pre> <pre><code>python3 -m pip install jellyfaas\n</code></pre> <p>Source code can be viewed on GitHub.</p> <p>Add this dependency to your <code>POM.xml</code> file if you are using maven. <pre><code>&lt;dependency&gt;\n    // placeholder\n&lt;/dependency&gt;\n</code></pre></p> <p>Source code can be viewed on GitHub.</p> <p>Install the SDK via <pre><code>go get github.com/Platform48/go_sdk\n</code></pre> Then add it to your projects <code>go.mod</code> file with <pre><code>go mod tidy\n</code></pre></p> <p>Source code can be viewed on GitHub.</p> <pre><code>\n</code></pre> <p>Source code can be viewed on GitHub.</p> <pre><code>\n</code></pre>"},{"location":"getting_started/#quick-start","title":"Quick Start","text":"<p>The JellyFAAS SDK simplifies working with the JellyFAAS API. It provides a <code>Client</code> class which handles authentication and functions to simplify creating HTTP requests to the API.</p> <p>You will need a JellyFAAS API key to follow the example. See Getting an API Key.</p> <p>API Credits</p> <p>The cloud functions used in the examples on this page will not use your credits.</p> PythonJavaGoC#Typescript/Javascript <p>Example</p> <pre><code>import jellyfaas\n\n# It is recomended to set up your API key as an environment variable.\nimport os\napi_key = os.getenv(\"JELLYFAAS_API_KEY\")\n\n# Initialize the client config\nconfig = jellyfaas.ClientConfig(api_key=api_key, debug=True)\n\n# Initialize the client\nclient = jellyfaas.Client(config)\n\n# Lookup a function\nclient.lookup_function(\"helloworld\")\n\n# Set the request query params and JSON body (via a python dictionary)\nclient.set_request(\n    {\"name\": \"tim\"},                # Set query parameters\n    {\"order\": [\"ham\", \"jam\", \"spam\"]}) # Set request body\n\n# Finally, call the cloud function\n_, response = client.invoke()\n\nprint(response)\n# Output: \"Hello, Tim. You ordered 'ham', 'jam', and 'spam'.\"\n</code></pre> <p>Here's a java example on how to call a live function with in JellyFaas.</p> <p>Warning</p> <p>You must add the respective input and output classes provided on the website, if there are any, in order to process JSON requests and responses. These are listed below in the example.</p> CodeInput ClassOutput Class <p>Example</p> <pre><code>package main;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport testSchemas.IbanOutputTest;\nimport testSchemas.IbanTest;\nimport v1.jellyfaas.exceptions.JellyFaasException;\nimport v1.jellyfaas.exceptions.JellyFaasFormatException;\nimport v1.jellyfaas.exceptions.JellyFaasHttpException;\n\npublic class Main {\n    public static void main(String[] args) throws JellyFaasException, JellyFaasHttpException, IllegalAccessException, JsonProcessingException, JellyFaasFormatException {\n        // setting the config object\n        String apiKey = System.getenv(\"API_KEY\");\n        Config config = new Config();\n        config.setApiKey(apiKey);\n\n        //creating the client object\n        Client client = new Client(config);\n        IbanTest ibanTest = new IbanTest();\n        ibanTest.addIban(\"FR1420041010050500013M02606\");\n\n        // invoking the object and putting the output into a new object\n        IbanOutputTest output = (IbanOutputTest) client.lookUp(\"ibanvalidation\").setRequest(null, ibanTest).setResponse(IbanOutputTest.class).invoke();\n    }\n}\n</code></pre> <p>Info</p> <pre><code>package main;\n\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport v1.jellyfaas.JellyFaasFunctionSchema;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class IbanTest extends JellyFaasFunctionSchema {\n    private List&lt;String&gt; ibans;\n\n    public IbanTest(){\n        this.ibans = new ArrayList&lt;&gt;();\n    }\n\n    public List&lt;String&gt; getIbans() {\n        return this.ibans;\n    }\n\n    public void setIbans(List&lt;String&gt; ibans) {\n        this.ibans = ibans;\n    }\n\n    public void addIban(String iban){\n        this.ibans.add(iban);\n    }\n}\n</code></pre> <p>Info</p> <pre><code>package main;\nimport v1.jellyfaas.JellyFaasFunctionSchema;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class IbanOutputTest extends JellyFaasFunctionSchema {\n    private String spanId;\n    private Data data;\n\n    // Getter and Setter for spanId\n    public String getSpanId() {\n        return spanId;\n    }\n\n    public void setSpanId(String spanId) {\n        this.spanId = spanId;\n    }\n\n    // Getter and Setter for Data\n    public Data getData() {\n        return data;\n    }\n\n    public void setData(Data data) {\n        this.data = data;\n    }\n\n    // Inner class Data\n    public static class Data {\n        private List&lt;String&gt; valid = new ArrayList&lt;&gt;();\n        private List&lt;String&gt; invalid = new ArrayList&lt;&gt;();\n        private int validCount = 0;\n        private int invalidCount = 0;\n        private int total = 0;\n\n        // Getters and Setters for valid\n        public List&lt;String&gt; getValid() {\n            return valid;\n        }\n\n        public void setValid(List&lt;String&gt; valid) {\n            this.valid = valid;\n        }\n\n        // Getters and Setters for invalid\n        public List&lt;String&gt; getInvalid() {\n            return invalid;\n        }\n\n        public void setInvalid(List&lt;String&gt; invalid) {\n            this.invalid = invalid;\n        }\n\n        // Getters and Setters for validCount\n        public int getValidCount() {\n            return validCount;\n        }\n\n        public void setValidCount(int validCount) {\n            this.validCount = validCount;\n        }\n\n        // Getters and Setters for invalidCount\n        public int getInvalidCount() {\n            return invalidCount;\n        }\n\n        public void setInvalidCount(int invalidCount) {\n            this.invalidCount = invalidCount;\n        }\n\n        // Getters and Setters for total\n        public int getTotal() {\n            return total;\n        }\n\n        public void setTotal(int total) {\n            this.total = total;\n        }\n    }\n}\n</code></pre> <p>Example</p> <p>Example</p> <p>Example</p> <p>Next Steps</p> <ul> <li>Get started with the SDKS</li> <li>Create your first function</li> <li>Get started with our cli tool</li> <li>Get your API key</li> </ul>"},{"location":"license/","title":"Main here things","text":"<p>This is a test</p>"},{"location":"license/#section-one","title":"Section One","text":"<p>jdkfjdkfjdk</p>"},{"location":"license/#section-two","title":"Section Two","text":"<p>fdjkfdkfdj</p>"},{"location":"license/#section-three","title":"Section Three","text":"<p>dfd</p>"},{"location":"sdks/java_getting_started/","title":"Calling your first function (for noobs!)","text":"<p>Now that you've added your <code>POM</code> dependency, you are ready to make your first call!  Here's a step-by-step guide of how to do so. If you are new to the platform, or have limited coding experience, this walk-through is for you! </p>"},{"location":"sdks/java_getting_started/#1-creating-a-config-object","title":"1. Creating a Config Object","text":"<p>The first step is to create your config object and parse your JellyFaas api key into it:</p> <pre><code>// creating a config object\nConfig config = new Config();\nconfig.setApiKey(\"API-KEY\");\n</code></pre>"},{"location":"sdks/java_getting_started/#2-creating-the-client","title":"2. Creating the client","text":"<p>Once you've created your config object, you can create a client and parse this object in on instantiation: <pre><code>// setting the client\nClient client = new Client(config);\n</code></pre></p>"},{"location":"sdks/java_getting_started/#3-looking-up-a-function","title":"3. Looking up a function","text":"<p>To look up a function, you must use the functions short name to find it. This is done with the following, provided all the previous steps are complete</p> <pre><code>// ...\n// using the client created above\n\nclient.lookUp(\"shortname\")\n</code></pre> <p>Looking up a function will influence the following steps as this sets the function to be called</p>"},{"location":"sdks/java_getting_started/#4-setting-the-request","title":"4. Setting the request","text":"<p>Once you've called <code>lookup</code> on your client object, you can now set your request. If a function takes no query parameters and/or no input body, the <code>setRequest</code> parameters can be <code>null</code> respectively. This is done with the following:</p> <pre><code>client.lookUp(\"shortname\").setRequest(params, inputBody)\n</code></pre> <p>Note</p> <p><code>params</code> and <code>inputBody</code> are placeholders for the following steps</p>"},{"location":"sdks/java_getting_started/#41-adding-query-parameters","title":"4.1 Adding Query Parameters","text":"<p>Creating query parameters is done by creating a <code>Map&lt;String, String&gt;</code> - where the key value pairs are the query parameter name and its value respectively.</p> <pre><code>Map&lt;String, String&gt; params = new HashMap&lt;&gt;();\nparams.put(\"queryParam\", \"foobar\");\n</code></pre>"},{"location":"sdks/java_getting_started/#42-adding-a-request-body","title":"4.2 Adding a request body","text":"<p>If the request body is a JSON object, our website provides the auto generated code for the input and output classes for these json objects. You must copy and paste these classes and add them to your project as these are used to handle the input and output json responses for a given function.</p> Using an ObjectUsing a <code>byte[]</code> <p>Using the function's autogenerated input class from the website <pre><code>// creating an input object\nSomeInputClass inputBody = new SomeInputClass();\nsomeInput.setSomeAttribute(\"foobar\");\n</code></pre></p> <p>If the function you are invoking does not have an auto generated class for the input body, then a <code>byte[]</code> must be used as the input body.</p> <pre><code>byte[] inputBody = \"Hello, world!\".getBytes();\n</code></pre>"},{"location":"sdks/java_getting_started/#5-setting-the-response","title":"5. Setting the response","text":"<p>There are three main ways to configure the output of a function invoke: Using an instance of the auto generated output class, using the <code>class</code> of the auto generated class, or using a <code>byte[]</code> to capture the output.</p> 5.1 Using an instance5.2 Using a <code>.class</code>5.3 Using a <code>byte[]</code> <p>As mentioned previously, our website contains the auto generated Input/Output classes. Again, you must copy and paste these classes and add them to your project as these are used to handle the input and output json responses for a given function.</p> <pre><code>// creating an output object\nSomeOutputClass someOutput = new SomeOutputClass();\n</code></pre> <p>Using this instance, setting the response is done with the following - provided all the above steps are completed:  <pre><code>client.lookUp(\"shortname\").setRequest(params, inputBody).setResponse(someOutput);\n</code></pre> This will use the instance and populate it once the function is invoked.</p> <p>This approach can be used if you don't have an instance of the output object. Don't worry, when you invoke the function, a new object will be created using this type. <pre><code>client.lookUp(\"shortname\").setRequest(params, inputBody).setResponse(someOutput.class);\n</code></pre></p> <p>If a function doesn't return a <code>json</code> response, then a <code>byte[].class</code> must be used like in step 5.2: <pre><code>client.lookUp(\"shortname\").setRequest(params, inputBody).setResponse(byte[].class);\n</code></pre></p>"},{"location":"sdks/java_getting_started/#6-calling-the-function","title":"6. Calling the function \ud83d\ude80","text":"<p>Now that you have done all the previous steps, you are ready to call your function.  This is super easy! Just call <code>.invoke()</code> on your client and your function will be called with your request and response data!</p> 6.1 Invoking with an output instance6.2 Invoking with a <code>.class</code>6.3 Invoking with a <code>byte[]</code> <p>If you followed step 5.1, then your <code>invoke</code> call will look something like this: <pre><code>client.lookUp(\"shortname\").setRequest(params, inputBody).setResponse(someOutput).invoke();\n</code></pre></p> <p>If you followed step 5.2, then your <code>invoke</code> call will look something like this: <pre><code>OutputClass myOutput = (OutputClass) client.lookUp(\"shortname\").setRequest(params, body).setResponse(someOutput.class).invoke();\n</code></pre></p> <p>If you followed step 5.3, then your <code>invoke</code> call will look something like this: <pre><code>byte[] response = (byte[]) client.lookUp(\"shortname\").setRequest(params, body).setResponse(byte[].class).invoke();\n</code></pre></p> <p>\ud83d\ude80 Ta-da ! You've called your first JellyFaasFunction \ud83d\ude80</p>"},{"location":"sdks/java_getting_started/#complete-code","title":"Complete Code","text":"<p>Example</p> <pre><code>// creating a config object\nConfig config = new Config();\nconfig.setApiKey(\"API-KEY\");\n\n// setting the client\nClient client = new Client(config);\n\n// setting the query parameters\nMap&lt;String, String&gt; params = new HashMap&lt;&gt;();\nparams.put(\"queryParam\", \"foobar\");\n\n// setting an input object\nSomeInputClass inputBody = new SomeInputClass();\nsomeInput.setSomeAttribute(\"foobar\");\n\n// setting an output object\nSomeOutputClass someOutput = new SomeOutputClass();\n\n// a. invoking with an output instance\nclient.lookUp(\"shortname\").setRequest(params, inputBody).setResponse(someOutput).invoke();\n\n// b. invoking with an output class\nSomeOutputClass myOutput = (SomeOutputClass) client.lookUp(\"shortname\").setRequest(params, someInput).setResponse(SomeOutputClass.class).invoke();\n\n// c. invoking with a byte[]\nbyte[] response = (byte[]) client.lookUp(\"shortname\").setRequest(params, body).setResponse(byte[].class).invoke();\n</code></pre>"},{"location":"sdks/python_getting_started/","title":"Python","text":""},{"location":"sdks/python_getting_started/#installation","title":"Installation","text":"<p>The JellyFAAS SDK Python package is available on PyPI. Source code can viewed on GitHub.</p> WindowsUnix/MacOS <pre><code>py -m pip install jellyfaas\n</code></pre> <pre><code>python3 -m pip install jellyfaas\n</code></pre>"},{"location":"sdks/python_getting_started/#overview","title":"Overview","text":"<p>The JellyFAAS SDK simplifies working with the JellyFAAS API. It provides a <code>Client</code> class which handles authentication and functions to simplify creating HTTP requests to the API. It also provides additional validation and checks of your requests, to prevent making invalid function calls, which would otherwise consume API credits.</p> <p></p> <p>You will need a JellyFAAS API key to follow the example. See Getting an API Key.</p> <p>API Credits</p> <p>The cloud functions used in the examples on this page will not use your credits.</p>"},{"location":"sdks/python_getting_started/#environment-setup","title":"Environment Setup","text":"<p>It is recommended to set your API key as an environment variable.</p>"},{"location":"sdks/python_getting_started/#clientconfig-class","title":"<code>ClientConfig</code> Class","text":""},{"location":"sdks/python_getting_started/#initialization","title":"Initialization","text":"<p>Create an instance of the <code>ClientConfig</code> class with your API key:</p> <ul> <li>Parameters:</li> <li><code>api_key (str)</code>: Your JellyFAAS API key.</li> <li><code>debug (bool)</code>: Optional. Enables debug logging if set to <code>True</code>.</li> <li>Returns:</li> <li>The <code>ClientConfig</code> instance.</li> </ul> <pre><code>config = ClientConfig(api_key=\"your_api_key\", debug=True)\n</code></pre> <p>The <code>ClientConfig</code> class handles the authentication with the JellyFAAS API and manages the API key and authentication token.</p>"},{"location":"sdks/python_getting_started/#client-class","title":"<code>Client</code> Class","text":""},{"location":"sdks/python_getting_started/#initialization_1","title":"Initialization","text":"<p>Create an instance of the <code>Client</code> class using the <code>ClientConfig</code> object:</p> <ul> <li>Parameters:</li> <li><code>config (ClientConfig)</code>: The <code>ClientConfig</code> instance.</li> <li>Returns:</li> <li>The <code>Client</code> instance.</li> </ul> <pre><code>client = Client(config=config)\n</code></pre>"},{"location":"sdks/python_getting_started/#methods","title":"Methods","text":""},{"location":"sdks/python_getting_started/#lookup_functionfunction_id","title":"<code>lookup_function(function_id)</code>","text":"<p>Look up a function by its ID (shortname).</p> <ul> <li>Parameters:</li> <li><code>function_id (str)</code>: The ID (shortname) of the function to look up.</li> <li>Returns:</li> <li>The <code>Client</code> instance.</li> </ul> <p>Example:</p> <pre><code>client.lookup_function(\"FUNCTION_ID\")\n</code></pre>"},{"location":"sdks/python_getting_started/#set_requestquery_params-request_body_instancenone","title":"<code>set_request(query_params={}, request_body_instance=None)</code>","text":"<p>Set the request parameters and body.</p> <ul> <li>Parameters:</li> <li><code>query_params (dict)</code>: Query parameters for the request.</li> <li><code>request_body_instance (dict or object)</code>: JSON body for the request. Can be a dictionary or an instance of a class with attributes.</li> <li>Returns:</li> <li>The <code>Client</code> instance.</li> </ul> <p>Example:</p> <pre><code>client.set_request(query_params={\"param1\": \"value1\"}, request_body_instance={\"key\": \"value\"})\n</code></pre>"},{"location":"sdks/python_getting_started/#invoke","title":"<code>invoke()</code>","text":"<p>Invoke the function with the set parameters and body.</p> <ul> <li>Returns:</li> <li>A tuple of the <code>Client</code> instance and the response JSON if successful, otherwise raises an exception.</li> </ul> <p>Example:</p> <pre><code>client, result = client.invoke()\n</code></pre>"},{"location":"sdks/python_getting_started/#set_responsetype","title":"<code>set_response(type)</code>","text":"<p>Set the response type for automatic transformation of the response JSON into an instance of a specified class.</p> <ul> <li>Parameters:</li> <li><code>type (class)</code>: The class type to transform the response JSON into.</li> <li>Returns:</li> <li>The <code>Client</code> instance.</li> </ul> <p>Example:</p> <pre><code>client.set_response(MyResponseClass)\n</code></pre>"},{"location":"sdks/python_getting_started/#debugging","title":"Debugging","text":"<p>Both <code>ClientConfig</code> and <code>Client</code> classes use Python's built-in logging module to provide debug and error logs. Ensure you configure the logging level appropriately in your application.</p>"},{"location":"sdks/python_getting_started/#complete-example-usage","title":"Complete Example Usage:","text":"<pre><code>import os\nimport jellyfaas\n\n# Retrieve the API key from environment variable\napi_key = os.getenv(\"JELLYFAAS_API_KEY\")\n\nif api_key is None:\n    raise ValueError(\"API key is not set in environment variables\")\n\n# Define a response class (optional)\nclass MyResponse:\n    def __init__(self):\n        self.key = None\n        self.value = None\n\n# Create a JellyFAAS config and client, then invoke a function\nconfig = jellyfaas.ClientConfig(api_key=api_key, debug=True)\nclient, result = (\n    jellyfaas.Client(config)\n    .lookup_function(\"joesjokes\")\n    .set_request(query_params={\"param1\": \"value1\"}, request_body_instance={\"key\": \"value\"})\n    .set_response(MyResponse)\n    .invoke()\n)\n\nprint(result)\n</code></pre>"},{"location":"sdks/python_getting_started/#handling-exceptions","title":"Handling Exceptions","text":"<p>The SDK raises custom exceptions for various error conditions:</p> <ul> <li><code>AuthenticationFailedException</code>: Raised when authentication fails.</li> <li><code>FunctionLookupException</code>: Raised when function lookup fails.</li> <li><code>SetRequestException</code>: Raised when setting the request parameters or body fails.</li> <li><code>InvocationException</code>: Raised when invocation of the function fails.</li> </ul> <p>These all inherit from a base <code>JellyFaasException</code> type, which you can optionally use to catch all exceptions from the SDK.</p> <p>Example:</p> <pre><code>import jellyfaas\nimport os\n\napi_key = os.getenv(\"JELLYFAAS_API_KEY\")\n\ntry:\n    config = jellyfaas.ClientConfig(api_key=api_key)\n    client, result = (\n        jellyfaas.Client(config)\n        .lookup_function(\"joesjokes\")\n        .set_request(query_params={\"param1\": \"value1\"}, request_body_instance={\"key\": \"value\"})\n        .invoke()\n    )\n    print(result)\nexcept jellyfaas.AuthenticationFailedException as e:\n    print(f\"Authentication failed: {e}\")\nexcept jellyfaas.FunctionLookupException as e:\n    print(f\"Function lookup failed: {e}\")\nexcept jellyfaas.SetRequestException as e:\n    print(f\"Setting request failed: {e}\")\nexcept jellyfaas.InvocationException as e:\n    print(f\"Function invocation failed: {e}\")\n</code></pre>"},{"location":"sdks/python_getting_started/#additional-information","title":"Additional Information","text":"<p>The client supports validation of request bodies against input schemas if provided in the function requirements. It also includes debug logging to help trace the internal state and steps of computation, aiding in debugging and development.</p> <p>Ensure you have configured logging in your application to capture debug logs:</p> <pre><code>import logging\n\nlogging.basicConfig(level=logging.DEBUG)\n</code></pre>"},{"location":"sdks/sdk_introduction/","title":"Introduction","text":""},{"location":"sdks/sdk_introduction/#in-depth-start-guides","title":"In-depth start guides","text":"<p>If you are new to JellyFaas or new to coding in general, we have some good start guides to get you going!</p> <ul> <li>Java</li> <li>Python</li> <li>Golang</li> <li>C#</li> <li>Node</li> </ul>"},{"location":"sdks/sdk_introduction/#behind-the-scenes","title":"Behind the scenes","text":"<p>Your function calls do a lot behind the scenes that you don't see!</p> <pre><code>sequenceDiagram\nClient-&gt;&gt;+JellyFaas Api: Authourise Api key\nJellyFaas Api-&gt;&gt;-Client: JWT\n\nClient-&gt;&gt;+JellyFaas Api: Lookup function\nJellyFaas Api-&gt;&gt;+JellyFaas Functions Library: Lookup function \nJellyFaas Functions Library-&gt;&gt;-JellyFaas Api: Function requirments and dns \nJellyFaas Api-&gt;&gt;-Client: Function requirments and dns \n\nClient-&gt;&gt;+JellyFaas Api: Invoke\nJellyFaas Api-&gt;&gt;+JellyFaas Cloud Instance: Invoke\n    critical Connect to function instance\n        JellyFaas Cloud Instance--&gt;JellyFaas Api: connect\n    end\nJellyFaas Cloud Instance-&gt;&gt;-JellyFaas Api: Function response\n    critical Kill connection\n        JellyFaas Cloud Instance--&gt;JellyFaas Api: kill \n    end\nJellyFaas Api-&gt;&gt;-Client: Function response</code></pre>"}]}