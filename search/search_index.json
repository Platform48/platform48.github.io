{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the JellyFAAS docs","text":"<p>Integrate seamlessly into your work flow.</p>"},{"location":"#behind-the-scenes","title":"Behind the scenes","text":"<p>Your function calls do a lot behind the scenes that you don't see!</p> <pre><code>sequenceDiagram\nClient-&gt;&gt;+JellyFaas Api: Authourise Api key\nJellyFaas Api-&gt;&gt;-Client: JWT\n\nClient-&gt;&gt;+JellyFaas Api: Lookup function\nJellyFaas Api-&gt;&gt;+JellyFaas Functions Library: Lookup function \nJellyFaas Functions Library-&gt;&gt;-JellyFaas Api: Function requirments and dns \nJellyFaas Api-&gt;&gt;-Client: Function requirments and dns \n\nClient-&gt;&gt;+JellyFaas Api: Invoke\nJellyFaas Api-&gt;&gt;+JellyFaas Cloud Instance: Invoke\n    critical Connect to function instance\n        JellyFaas Cloud Instance--&gt;Google Cloud Function: connect\n        JellyFaas Cloud Instance--&gt;Google Cloud Function: run\n        JellyFaas Cloud Instance--&gt;Google Cloud Function: process response \n    end\nJellyFaas Cloud Instance-&gt;&gt;-JellyFaas Api: Function response\nJellyFaas Api-&gt;&gt;-Client: Function response</code></pre>"},{"location":"about/","title":"Nubilus movit","text":""},{"location":"about/#resupinus-pisenore-dumque-aethera-nectare","title":"Resupinus Pisenore dumque aethera nectare","text":"<p>Lorem markdownum tenaci Lucifero herba: circumdata, mihi deus vigilans tamen fuit magnosque triumpha? Habuit circumdat ut ille, temperat, Pallas dis feruntur: natura: longius, ministrarum nihil. Quodque in manus, et veniam vincemur contigit posuit fuerant repetita animum hunc simul debuit. Et aethere latissima contemnere mixta et confudit fratri manus, intrarant puppibus quod reddit se quoque. Membra ille eris corpore!</p>"},{"location":"about/#dummodo-falsae-bracchiaque-rerum","title":"Dummodo falsae bracchiaque rerum","text":"<p>Caputque tu brevi munus per. Potest cera, ore tuis Tritonia propinquos oppida rexque sperat, cum secutum suis. Felix rebus celeremque ad esset et felle nocendi. Formosus bonis pererratis sterilique taceam captum, pennis per tremit currus divellite querellas?</p> <ol> <li>Mihi pleno quodque parabant es erat principio</li> <li>Contigit in vultus in censuque videndi velut</li> <li>Achaia insano nosti cacumina</li> <li>Cantu qui</li> <li>In vale paries tamen ubi nescio natus</li> </ol>"},{"location":"about/#lotos-quid-pietas","title":"Lotos quid pietas","text":"<p>Venit genas posset parvis, et cultro in carminibus patentis pondere, cui non inminet angues terraeque! Simplicitas refer aeger.</p> <pre><code>if (scrollControl &gt; data.maximize_bcc_resolution(gnuAffiliateWindows, gpu,\n        dvd_cloud)) {\n    ribbonWaveformAd.checksumSnapshot(pitchRdfSolid, -1);\n} else {\n    serverAdapter(file + bash, -3);\n    domainDvd /= 5;\n}\nif (tiff) {\n    macroCamera(podcastSkuMotherboard + lossyPasswordTweet, storageSdkHeap,\n            reader_t_drive(serverKindleDvd));\n    flash_click_ata(cyberspace(internal_lock_blog));\n    footerAddressMatrix += -5;\n}\nvar bar = 4;\n</code></pre>"},{"location":"about/#patris-utinam-ossibus","title":"Patris utinam ossibus","text":"<p>Thalamique vellera Peleus ab vivo crudeles bracchia, animum qui, quodvis ego, quae arma. Hominum orbem: rapidi iacent miserata iram vada optat finita dant suadent privignae medio sustinuit et summa moenia. Equis corpore mare illic Nilum, data delapsam tempora qua instruxere, alto nam usum. Contraque illuc dum gregibus Minos, turbatusque huic alios caelo membra quin bello, latratibus per esse, alta!</p> <p>Iustis Nereus figere? Somno aera praevitiat disce, inpono. Et vertice fruatur! Excedere caecos occurrensque arva trepidumque avia innumeras.</p> <p>Arma tabellis in, lacrimas si tempore sonos videtur altique cum: iuveni. Mansit dimittere in riguerunt muros, sed forma suis iniquus. Profanam profusis moderatior de utque, geminae mare corpusque Tartara ad siderea de terras tellurem. Senecta spatium, qui Pelops gaudet. Agmine lucos inpar deus cum terraeque aversos?</p>"},{"location":"examples/","title":"Examples","text":"<p>The SDKs are a very powerful tool. As seen in the quick start guide, you can call functions that require file/json inputs and outputs.</p> <p>Info</p> <p>Naturally, you are able to combine these and use a JSON input and a FILE output if the function permits that behaviour.</p>"},{"location":"examples/#handling-files","title":"Handling Files","text":"PythonJavaGoC#Node <p>File input and output example.</p> File InputFile Output <p>Example</p> <p>Example</p> <p>File input and output example.</p> File InputFile Output <p>Example</p> <pre><code>File file = new File(\"path/to/file\");\nclient.lookUp(\"example\").setRequest(parameters, file).setResponse(null).invoke();\n</code></pre> <p>Create a file object and parse that file into <code>setRequest()</code> </p> <p>Example</p> <pre><code>ByteArrayOutputStream stream = (ByteArrayOutputStream) client.lookUp(\"example\").setRequest(params, null).setResponse(ByteArrayOutputStream.class).invoke();\n\ntry (OutputStream outputStream = new FileOutputStream(\"output\")) {\n    // Write the byte array to the file\n    outputStream.write(stream.toByteArray());\n\n    System.out.println(\"File written successfully.\");\n} catch (IOException e) {\n    e.printStackTrace();\n}\n</code></pre> <p>Set <code>setResponse()</code> to be a <code>byte[].class</code>, you can then use this to populate a file.</p> <p>File input and output example.</p> File InputFile Output <p>Example</p> <pre><code>\n</code></pre> <p>Example</p> <pre><code>\n</code></pre> <p>File input and output example.    </p> File InputFile Output <p>Example</p> <pre><code>\n</code></pre> <p>Example</p> <pre><code>\n</code></pre> <p>File input and output example.</p> File InputFile Output <p>Example</p> <pre><code>\n</code></pre> <p>Example</p> <pre><code>\n</code></pre>"},{"location":"examples/#handling-json","title":"Handling JSON","text":"PythonJavaGoC#Node <p>JSON input and output example.    </p> JSON InputJSON Output <p>Example</p> <p>Example</p> <p>JSON input and output example.</p> JSON InputJSON Output <p>Example</p> <pre><code>SomeInputClass requestBody = new SomeInputClass();\nrequestBody.setSomeAttribute(\"foobar\");\n\nclient.lookUp(\"example\").setRequest(parameters, requestBody).setResponse(null).invoke();\n</code></pre> <p>Example</p> <pre><code>SomeOutputClass myOutput = (SomeOutputClass) client.lookUp(\"example\").setRequest(parameters, null).setResponse(SomeOutputClass.class).invoke();\n</code></pre> <p>JSON input and output example.</p> JSON InputJSON Output <p>Example</p> <pre><code>\n</code></pre> <p>Example</p> <pre><code>\n</code></pre> <p>JSON input and output example.</p> JSON InputJSON Output <p>Example</p> <pre><code>\n</code></pre> <p>Example</p> <pre><code>\n</code></pre> <p>JSON input and output example.</p> JSON InputJSON Output <p>Example</p> <pre><code>\n</code></pre> <p>Example</p> <pre><code>\n</code></pre>"},{"location":"examples/#live-functions","title":"Live Functions","text":"<p>Quote</p> <p>This is nice and all handling input and output data, but why's this useful and what can I call?</p> <p>Good question! Here's a hand-picked list of live functions you can call out to. This is where the true potential of JellyFaaS is unlocked as you now have access to functionality that isn't always supported in your language. If you are working on a project that doesn't support a particular library, or needs to be lightweight. You now have access to anything that's possible in a different language, alongside the benefit of it being hosted in the cloud - making your projects lightweight and effective.</p> <p>API Credits</p> <p>The cloud functions used in the examples below will use your credits. Click here to get an api key.</p>"},{"location":"examples/#1","title":"1.","text":"<p>Example</p> PythonJavaGoC#Node Input SchemaOutput Schema Input SchemaOutput Schema Input SchemaOutput Schema Input SchemaOutput Schema Input SchemaOutput Schema"},{"location":"examples/#2","title":"2.","text":"<p>Example</p> PythonJavaGoC#Node Input SchemaOutput Schema Input SchemaOutput Schema Input SchemaOutput Schema Input SchemaOutput Schema Input SchemaOutput Schema"},{"location":"examples/#3","title":"3.","text":"<p>Example</p> PythonJavaGoC#Node Input SchemaOutput Schema Input SchemaOutput Schema Input SchemaOutput Schema Input SchemaOutput Schema Input SchemaOutput Schema"},{"location":"getting_started/","title":"Getting Started Guide","text":"<p>We've stream lined everything, so you don't have too.</p>"},{"location":"getting_started/#installation","title":"Installation","text":"<p>We support a wide range of languages - find your language to get started with our SDK.</p> PythonNode <p>The JellyFaaS SDK Python package is available on PyPI: <pre><code>pip install jellyfaas\n</code></pre></p> <p>The JellyFaaS SDK Node package is available on NPM: <pre><code>npm install jellyfaas\n</code></pre></p>"},{"location":"getting_started/#quick-start","title":"Quick Start","text":"<p>The JellyFaaS SDK simplifies working with the JellyFaaS API. It primarily provides a <code>Client</code> class which handles authentication and functions to simplify creating HTTP requests to the API.</p> <p>API Credits</p> <p>The cloud functions used in the examples below will not use your credits. Click here to get an api key.</p> <p>TODO: Make this TODO: API key link</p> <p>Below are some plug-and-play examples.</p> PythonNode <p>Get started with this easy <code>python</code> file.</p> <p>main.py</p> <pre><code>from jellyfaas import Client, ClientConfig\n\n# Initialize the client config\nconfig = ClientConfig(\"&lt;JELLYFAAS_API_KEY&gt;\")\n\n# 1. Create Client, 2. lookup JellyFaaS function, 3. pass in query params and body, 4. invoke!\nclient, response = Client(config).lookup_function(\"helloworld\")\n                                 .set_request({\"name\": \"tim\"}, {\"order\": [\"ham\", \"jam\", \"spam\"]})\n                                 .invoke()\n\nprint(response)\n# Output: \"Hello, Tim. You ordered 'ham', 'jam', and 'spam'.\"\n</code></pre> More Info - Verbose Example <p>The above code example demonstrates how the entire JellyFaaS function calling workflow can be condensed down into a succinct one-liner. Of course, you may prefer a more a clear and verbose approach. The following code example demonstrates how you can improve code-clarity by expanding out this process. <pre><code>import os\nimport logging\nimport jellyfaas\n\nlogging.basicConfig(level=logging.DEBUG) # When enabled, JellyFaaS logs at the DEBUG level\n\n# It is usually recommended to set up your API key as an environment variable.\napi_key = os.getenv(\"JELLYFAAS_API_KEY\")\n\n# Initialize the client config with debug logs enabled\nconfig = jellyfaas.ClientConfig(api_key=api_key, debug=True)\n\n# Initialize the client. \n# Once you have an authenticated Client, you can reuse it for multiple lookups/invocations.\nclient = jellyfaas.Client(config)\n\n# Lookup a function\nclient.lookup_function(\"helloworld\")\n\n# Set the request query params and JSON body (via a python dictionary)\n# Once you've done this once, you can call `invoke()` on the client as many times as you want.\nclient.set_request(\n    {\"name\": \"tim\"},                # Set query parameters\n    {\"order\": [\"ham\", \"jam\", \"spam\"]}) # Set request body\n\n# Finally, call the cloud function\n_, response = client.invoke()\n\nprint(response)\n# Output: \"Hello, Tim. You ordered 'ham', 'jam', and 'spam'.\"\n</code></pre></p> <p>main.js</p> <p>Next Steps</p> <ul> <li>Get started with the SDKs</li> <li>Create your first function</li> <li>Get started with our cli tool</li> <li>Get your API key</li> </ul>"},{"location":"license/","title":"Main here things","text":"<p>This is a test</p>"},{"location":"license/#section-one","title":"Section One","text":"<p>jdkfjdkfjdk</p>"},{"location":"license/#section-two","title":"Section Two","text":"<p>fdjkfdkfdj</p>"},{"location":"license/#section-three","title":"Section Three","text":"<p>dfd</p>"},{"location":"guides/cli/","title":"JellyFaaS CLI Tool","text":""},{"location":"guides/creating_a_function/","title":"Deploying to JellyFaaS","text":"<p>To do this, you will need to install the <code>JellyCLI</code>, you can follow the steps here to do so.</p>"},{"location":"guides/creating_a_function/#project-set-up","title":"Project set up","text":"<p>Firstly, you need to decided what language you want to develop your project in. At the moment, we support the following languages:</p> <ul> <li>Java</li> <li>Python</li> <li>Node</li> <li>C#</li> <li>GoLang</li> </ul> <p>Once you have decided, <code>cd</code> into the directory you wish to generate a template and run the following.</p> PythonJavaGoC#Node <pre><code>jellyfaas create -d . -l python -n PROJECT_NAME\n</code></pre> <pre><code>jellyfaas create -d . -l java -n PROJECT_NAME\n</code></pre> <pre><code>jellyfaas create -d . -l go -n PROJECT_NAME\n</code></pre> <pre><code>jellyfaas create -d . -l dotnet -n PROJECT_NAME\n</code></pre> Note <p><code>csharp</code>, <code>c#</code>, and <code>dn</code> are also valid</p> <pre><code>jellyfaas create -d . -l nodejs -n PROJECT_NAME\n</code></pre> Note <p><code>javascript</code>, <code>js</code>, <code>node.js</code> and <code>node</code> are also valid</p> <p>For reference, these are the required flags:</p> <ul> <li><code>-d, --destination</code></li> <li><code>-l, --language</code></li> <li><code>-n, --name</code></li> </ul> <p>Once it creates the project, open it in your favourite IDE of choice.  When you first open it, you may experience some dependency issues and there are a few default names, such as the package name, which may need to be changed. The default in most cases is <code>Example</code>. The <code>go.mod</code> file may have some missing dependencies (for <code>go</code> users). We recommend deleting this and re-running the <code>go mod init</code> and <code>go mod tidy</code> commands.</p>"},{"location":"guides/creating_a_function/#project-structure","title":"Project Structure","text":"<p>Most of the project templates follow the same structure. The file that will house your function code is the file highlighted with <code>**___**</code>. The <code>README.md</code> file also has info on how to run your function locally.</p> PythonJavaGoC#Node <pre><code>.\n\u251c\u2500\u2500 .jellyfaasignore\n\u251c\u2500\u2500 CHANGELOG.md\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 **main.py**\n\u251c\u2500\u2500 jellyspec.json\n\u2514\u2500\u2500 requirements.txt\n</code></pre> <pre><code>.\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 main/\n\u2502       \u2514\u2500\u2500 java/\n\u2502           \u2514\u2500\u2500 jfv1/\n\u2502               \u2514\u2500\u2500 **Example.java**\n\u251c\u2500\u2500 .jellyfaasignore\n\u251c\u2500\u2500 CHANGELOG.md\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 jellyspec.json\n\u2514\u2500\u2500 pom.xml\n</code></pre> <pre><code>.\n\u251c\u2500\u2500 cmd/\n\u2502   \u2514\u2500\u2500 main.go\n\u251c\u2500\u2500 .jellyfaasignore\n\u251c\u2500\u2500 CHANGELOG.md\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 **function.go**\n\u251c\u2500\u2500 go.mod\n\u251c\u2500\u2500 go.sum\n\u2514\u2500\u2500 jellyspec.json\n</code></pre> <pre><code>.\n\u251c\u2500\u2500 .jellyfaasignore\n\u251c\u2500\u2500 CHANGELOG.md\n\u251c\u2500\u2500 Example.csproj\n\u251c\u2500\u2500 **Function.cs**\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 jellyspec.json\n</code></pre> <pre><code>.\n\u251c\u2500\u2500 .jellyfaasignore\n\u251c\u2500\u2500 CHANGELOG.md\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 **index.js**\n\u251c\u2500\u2500 jellyspec.json\n\u251c\u2500\u2500 package-lock.json\n\u2514\u2500\u2500 package.json\n</code></pre>"},{"location":"guides/creating_a_function/#jellyfaasignore","title":"<code>.jellyfaasignore</code>","text":"<p>This file works the same as the .gitignore file. It allows you to stop files from being deployed to the cloud function.  This comes in handy if you have any extra large files, test files, etc...  Per project, there are some default files that are excluded.</p>"},{"location":"guides/creating_a_function/#jellyspecjson","title":"<code>jellyspec.json</code>","text":"<p>This file is used to package up your project and send it off to be hosted.  It is key that the information in this file is correct as it can lead to many unexpected errors. It houses things like input/output schemas for files and json input/output data.  Additionally, it describes what query parameters the function takes. For more information please see the Configuration section.</p>"},{"location":"guides/creating_a_function/#writing-the-function","title":"Writing the Function","text":"PythonJavaGoC#Node <p><code>./main.py</code></p> <pre><code>import functions_framework\nfrom flask import jsonify\n\n@functions_framework.http\ndef Example(request):\n    \"\"\"HTTP Cloud Function that greets a given name.\n    Args:\n    request (flask.Request): The request object.\n    &lt;https://flask.palletsprojects.com/en/1.1.x/api/#incoming-request-data&gt;\n    Returns:\n    \"\"\"\n\n    # your function code goes here        \n\n    return None\n</code></pre> <p><code>./src/main/java/jfv1/Example.java</code></p> <pre><code>package jfv1;\n\nimport com.google.cloud.functions.HttpFunction;\nimport com.google.cloud.functions.HttpRequest;\nimport com.google.cloud.functions.HttpResponse;\nimport java.io.BufferedWriter;\nimport java.util.Optional;\n\npublic class Example implements HttpFunction {\n    @Override\n    public void service(final HttpRequest request, final HttpResponse response) throws Exception {\n        // your function code goes here\n    }\n}\n</code></pre> <p><code>./function.go</code></p> <pre><code>package example\n\nimport (\n    \"encoding/json\"\n    \"github.com/GoogleCloudPlatform/functions-framework-go/functions\"\n    \"net/http\"\n)\n\nfunc init() {\n    functions.HTTP(\"Example\", Example)\n}\n\nfunc Example(w http.ResponseWriter, r *http.Request) {\n    // your function code goes here\n}\n</code></pre> <p><code>./Function.cs</code></p> <pre><code>using Google.Cloud.Functions.Framework;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.Extensions.Logging;\nusing System;\nusing System.Text.Json;\nusing System.Threading.Tasks;\n\nnamespace ExampleProject\n{\npublic class Example : IHttpFunction\n{\nprivate readonly ILogger&lt;Example&gt; _logger;\n\n        public Example(ILogger&lt;Example&gt; logger)\n        {\n            _logger = logger;\n        }\n\n        public async Task HandleAsync(HttpContext context)\n        {\n            var request = context.Request;\n            var response = context.Response;\n\n            // your function code goes here\n\n        }\n    }\n}\n</code></pre> <p><code>./index.js</code></p> <pre><code>const functions = require('@google-cloud/functions-framework');\n\nfunctions.http('Example', (req, res) =&gt; {\n    // your function code goes here\n});\n</code></pre> <p>Info</p> <p>You can write what ever want with in each of the functions above (depending on the language you've chosen). This works exactly like a standard web server, expect you can only work with one endpoint. JellyFaaS functions (and cloud run functions in general) can only work with one end point. You can access what you'd expect when working with a web sever: you can get the request body, query parameters, headers etc... To find out more about Google's Functions Framework, click here.</p>"},{"location":"guides/creating_a_function/#configuration","title":"Configuration","text":"<p>Once you've written your function, and you are thinking you are ready to deploy it, you must first complete the <code>jellyspec.json</code> file.</p>"},{"location":"guides/creating_a_function/#jellyspecjson-file","title":"<code>jellyspec.json</code> file","text":"<p>Version: <code>v1.0.0</code></p> <p>Tip</p> <p>There are some default values that are populated when you create your project. These might need to be changed.</p> <ul> <li><code>runtime</code> is already filled out depending on the language you are using, you can change this to be a different run time environment.</li> <li><code>entrypoint</code> must be changed to match the name of the function you've written your code in the previous step.</li> <li><code>name</code> this isn't the identifier for your function, this is the user-friendly name for your function.</li> <li><code>shortname</code> this must be unique identifier for your function.</li> <li><code>inputJsonSchema</code> this follows the standard conversions for json schema. If you aren't sure what the conventions are, visit this official link.</li> <li><code>outputJsonSchema</code> this follows the standard conversions for json schema. If you aren't sure what the conventions are, visit this official link.</li> </ul> <p>You can omit object fields in the <code>jellyspec.json</code> file. For example, if your function doesn't require any query parameters, you can remove this field. However, you must include exactly ZERO or ONE of <code>inputJsonSchema</code> or <code>inputFile</code> and you must include exactly ZERO or ONE of <code>outputJsonSchema</code> or <code>outputFile</code>. Likewise, if your function doesn't require any explicit input or output, you can remove the field.</p> <pre><code>{\n  \"version\": \"1.0.0\",\n  \"name\": \"My Function Name\",\n  \"shortname\": \"my_unique_func\",\n  \"runtime\": \"python312\",\n  \"entrypoint\": \"MyEntrypoint\",\n  \"description\": \"A useful description of my function.\",\n  \"requirements\": {\n    \"requestType\": \"POST\",\n    \"queryParams\": [\n      {\n        \"name\": \"myKey\",\n        \"required\": true,                             // Optional (Defaults to false)\n        \"description\": \"A description of this param\", // Optional\n        \"exampleData\": \"myKey=42\"                     // Optional\n      },\n      {\n        \"name\": \"myKey2\",\n        \"required\": false,                            // Optional (Defaults to false)\n        \"description\": \"A description of this param\", // Optional\n        \"exampleData\": \"myKey2=some+value\"            // Optional\n      }\n    ],\n    // Must inlcude exactly ZERO or ONE of `inputJsonSchema` or `inputFile`\n    \"inputJsonSchema\": {\n      \"$Schema\": \"https://json-schema.org/draft/2020-12/schema\"\n      \"description\": \"A description of the input section\"\n    },\n    \"inputFile\": {\n      \"extensions\": [\"png\", \"jpg\", \"jpeg\"],           // Optional\n      \"required\": true                                // Optional\n      \"description\": \"A description of the input section\"\n    },\n    // Must inlcude exactly ZERO or ONE of `outputJsonSchema` or `outputFile`\n    \"outputJsonSchema\": {\n      \"$Schema\": \"https://json-schema.org/draft/2020-12/schema\"\n      \"description\": \"A description of the input section\"\n    },\n    \"outputFile\": {\n      \"extensions\": [\"png\", \"jpg\", \"jpeg\"]            // Optional\n      \"description\": \"A description of the input section\"\n    }\n  },\n  \"tags\": [                                           // Optional\n    \"weather\",\n    \"social\"\n  ]\n}\n</code></pre>"},{"location":"guides/creating_a_function/#deploying","title":"Deploying","text":"<p>Once you have ensured your function is ready to deploy. Deploying is made easy with the CLI, all it takes is one command:</p> <pre><code>jellyfaas zip -d true -o true -s /path/to/your/project\n</code></pre> <p>Tip</p> <p>Its best to <code>cd</code> out of your project's directory, so that the zip file doesn't get added to it.</p> <p>This will generate a <code>zip</code> file of your project and deploy it!</p>"},{"location":"guides/creating_a_function/#trouble-shooting","title":"Trouble Shooting","text":""},{"location":"guides/godot_guide/","title":"Godot Guide","text":"<p>The JellyFaas SDK is capable of working in every environment which has support for .Net Standard 2.0. This means that the Godot game engine and projects developed with it can also take advantage of the features provided by the JellyFaas SDK.</p> <p>Supported versions</p> <p>Only the versions of Godot with C# support are capable of making use of the SDK. This means that the 1.x and 2.x versions of Godot and versions with .Net/Mono support disable are not supported, and cannot make use of the JellyFaas SDK.</p> <p>Here is a walkthrough on using the <code>joesjokes</code> function in Godot 4.2.2:</p>"},{"location":"guides/godot_guide/#1-create-a-new-project-or-open-an-existing-project","title":"1. Create a new project or open an existing project","text":"<p>First we have to create or open up the project we want to add the SDK to with a C# enabled version of Godot.</p> <p>Known problem with C# support in Godot 3.x</p> <p>The C# support in the 3.x versions of the Godot engine suffer from a known issue which prevents some of the .Net packages from functioning properly. This problem has a known workaround, which is to change the C# target from .Net Standard to .Net Framework. This problem has been fixed in Godot 4.0 and later versions, however if you are using the 3.x versions of Godot it is recommended that you change this setting.</p> <p>If you open up a project which was created with a version of Godot which has C# support disabled, the Godot engine should automatically generate all the necessary files, however if it doesn't, you may have to create them manually by selecting the <code>Project &gt; Tools &gt; C# &gt; Create C# Solution</code> option. If your project has been created with a version of the engine which does have support for C# the needed files should be generated automatically.</p> <p>Let us start with the following ui elements:</p> <p></p> <p>First we have to create a C# script. Right-click on the button node, and press attach script.</p> <p></p> <p>Then we create a new C# script. Make sure the language dropdown menu has C# selected.</p> <p>Unfortunately you cannot access the SDK through GDScript, however you may be able to make a wrapper node around the SDK functions you need in C#, and call the functions defined on that node in GDScript.</p> <p></p> <p>Now lets open up this script in our C# IDE. It is possible to edit C# files in the Godot script editor, however I would recommend using an external IDE for this, as Godot doesn't have a graphical user interface for the NuGet package manager. You can change which editor Godot will use for C# files by going to <code>Editor &gt; Editor Settings</code>, then changing the <code>Dotnet &gt; External Editor</code> option.</p> <p>To open the file simply double click on the file in Godot's file explorer.</p>"},{"location":"guides/godot_guide/#2-add-the-jellyfaas-sdk-to-the-project","title":"2. Add the JellyFaas SDK to the project","text":"<p>Once the .Net solution has been added you have to add in the <code>JellyfaasSdk</code> NuGet package. Most popular C# IDEs provide you with a graphical user interface to do this, however if you decide to use the built-in Godot script editor, or you use an IDE which doesn't have a package manager, you may have to install the SDK manually through your system's command prompt/terminal.</p> <p>The following are short guides on how to install the SDK in some popular IDEs.</p> Visual StudioVisual Studio CodeJetBrains RiderCommand Prompt/Terminal <p>Installing the JellyFaas SDK is easy with Visual Studio, as it comes with its own built-in NuGet package manager.</p> <p>To open up the NuGet package manager in Visual Studio select the <code>Project &gt; Manage Nuget Packages</code> option in the toolbar. In the following window switch to the <code>Browse</code> tab. In the following window you should be able to search for and install the latest version of the JellyFaas SDK.</p> <p></p> <p></p> <p>Installing the JellyFaas SDK through Visual Studio Code IDE is easy with the C# Dev Kit extension, which is  popular extension for adding C# support to Visual Studio Code.</p> <p>In Visual Studio Code open up the Command Palette (by default the <code>Ctrl</code> + <code>Shift</code> + <code>P</code> will open it). In the following search box type in <code>NuGet</code> and select the <code>NuGet: Add NuGet Package</code> option. The following search box search for and install the JellyFaas SDK package.</p> <p></p> <p></p> <p>Installing the JellyFaas SDK in Rider is easy, as Rider comes with its own built-in NuGet package manager.</p> <p>In the JetBrains Rider IDE you can find the NuGet package manager by going to <code>Tools &gt; NuGet &gt; Manage NuGet Packages</code>.</p> <p></p> <p></p> <p>If your IDE does not have a package manager, or the other options provided on this site do not work, you can always fall back to using your command prompt/terminal to install the package. This can be achieved with the dotnet CLI tool which comes bundled in with the .Net SDK.</p> <ol> <li>Open a console window in the directory your project file (*.csproj) is in.</li> <li>Use the <code>dotnet add package JellyfaasSdk</code> command in the console window.</li> </ol> <p>These above steps should automatically install the latest version of the JellyFaas SDK in your Godot project. If you experience any problems make sure you have the dotnet CLI tool installed. You may also want to check out the following links:</p> <ul> <li>Install the .Net SDK</li> <li>Installing packages with the dotnet CLI tool</li> </ul>"},{"location":"guides/godot_guide/#3-using-the-sdk-in-your-godot-project","title":"3. Using the SDK in your Godot project","text":"<p>After you have successfully installed the JellyFaas SDK in your project you should be able to access the functions and classes provided by the SDK through the <code>Jellyfaas</code> namespace in your C# files. This means that now we can start using it.</p> <p>First we should import the SDK into this file. We can do this by adding the following line at the top of our script:</p> <pre><code>using Jellyfaas;\n</code></pre> <p>Now inside the class responsible for our node we should define some variables. First lets define the variable responsible for storing our JellyClient object which will access our JellyFaas functions.</p> <pre><code>private JellyClient client;\n</code></pre> <p>Lets also define a property which will store a reference to our label node we want to put the joke in.</p> <p><pre><code>[Export]\npublic Label TargetLabel { get; set; }\n</code></pre> The above code exports a property of type Label to the Godot editor. This c# code is similar to the following GDScript code: <pre><code>export var target_l_abel:Label\n</code></pre></p> <p>Now we should initialize our JellyFaas client in our <code>_Ready</code> function. If you used Godot's templates when creating the script this function should have been provided for you. We can do this with the following line of code:</p> <p><pre><code>client = new JellyClient(new JellyConfig(\"Insert your Api Key here\"));\n</code></pre> The above line initializes our <code>JellyClient</code> with a <code>JellyConfig</code> object. This <code>JellyConfig</code> object will store our JellyFaas Api key which we have to provide when constructing it. We may also provide additional flags to our client through this object.</p> <p>In this guide we will be using the <code>joesjokes</code> function. You can learn more about it Here. This page will also generate you the class which will match the output of the <code>joesjokes</code> function. This is important, as it allows us to simply copy and paste the code from the website into our script instead of writing the class ourselves. We should copy and paste the C# code from the website to somewhere in our script. The code will look something like this:</p> <pre><code>public class JoesJoke\n{\n    public string joke { get; set; }\n\n    public string punchline { get; set; }\n}\n</code></pre> <p>Finally we can call our JellyFaas function. We can easily do this by overriding the <code>_Pressed()</code> function which is defined in every button node: <pre><code>public override void _Pressed()\n{\n    // Your code goes here\n}\n</code></pre> Inside this function we should first look up the <code>joesjokes</code> function with our <code>JellyClient</code>, and then call it. We should then store the resulting joke in a variable like the following code does: <pre><code>    client.Lookup(\"joesjokes\");\n\n    var joke = client.Invoke&lt;JoesJoke&gt;();\n</code></pre></p> <p>We can also rewrite this code to fit inside a single line like this:</p> <pre><code>    var joke_response = client.Lookup(\"joesjokes\").Invoke&lt;JoesJoke&gt;();\n</code></pre> <p>The invoke call in above takes in a type as a generic argument. In C# generic arguments have to be put inside angle brackets. The invoke function will create a new object of this type, and put the response from the JellyFaas function inside it. Any fields and properties which do not match the values needed by the function will be discarded, which is why we should use the class we generated earlier here.</p> <p>The last part of code we need to write inside the <code>_Pressed()</code> function will display the joke inside our label. The <code>joesjokes</code> function returns the joke and the punchline separately, meaning that we will have to combine them for the joke to make sense. This can be done with the following code:</p> <pre><code>TargetLabel.Text = joke_response.joke + \"\\n\\n\" + joke_info.Punchline;\n</code></pre> <p>This code will put the punchline of the joke two lines below the joke, making it easy to read.</p> <p>The last step we have to do before running our program is assigning a reference to our text label inside our button node. In our Godot editor click on the button node, and press the assign button next to the Target Label property. If this property doesn't show up for you, you may have to build the project through the build button which is located next to the run button in Godot.</p> <p></p> <p>Finally we should select our Label node in the window which shows up, and press the Ok.</p> <p></p> <p>Now we can run the project! Press the run button in the editor to run and see the results of our work.</p> <p></p> <p>After pressing the button we can see that the function has been called, and has provided us with a randomly generated joke. Pressing the button multiple times should give us a new joke after every press.</p> <p></p>"},{"location":"guides/godot_guide/#related-links","title":"Related Links","text":"<ul> <li>Install the .Net SDK</li> <li>Installing packages with the dotnet CLI tool</li> <li>Github repository with the example project from this guide</li> <li> <p>C# JellyFaas SDK Reference</p> </li> <li> <p>Godot C# documentation</p> </li> </ul>"},{"location":"guides/godot_guide/#the-code-we-wrote","title":"The code we wrote","text":"<pre><code>using TMPro;\nusing UnityEngine;\n\nusing Jellyfaas;\nusing System.Text.Json.Serialization;\n\npublic class JokeButton : MonoBehaviour\n{\n    //  Export this property so we can set the text label we want to put the joke in from the editor\n    public TMP_Text OutputLabel;\n\n    //  Store the JellyFaas client so we don't have to remake it every time we call a function\n    private JellyClient client;\n\n    // Start is called before the first frame update\n    void Start()\n    {\n        client = new JellyClient(new JellyConfig(\"Insert your Api Key here\"));  //  &lt; -- Insert your API key here\n    }\n\n    public void OnClick() {\n        var joke_info = client.Lookup(\"joesjokes\").Invoke&lt;JoesJoke&gt;();  //  The joesjokes function does not take any parameters, and returns information on a randomly generated joke\n\n        OutputLabel.text = joke_info.joke + \"\\n\\n\" + joke_info.Punchline;\n    }\n\n\n    //  The class which matches the definition of the Json object returned by the joesjokes function\n    //  The joesjokes function returns a json object with two strings called \"joke\" and \"punchline\".\n    public class JoesJoke\n    {\n        //  As long as the property name matches the Json property the SDK will read the data into the matching properties\n        public string joke { get; set; }\n\n        //  Json property names are case sensitive, meaning that this property does not match\n        //  Fortunately, the JellyFaas SDK uses the System.Text.Json library when deserializing Json objects, meaning that you can use any attributes provided by it\n        //  The following attribute tells the SDK to assume this property is called \"punchline\" when translating to and from Json.\n        [JsonPropertyName(\"punchline\")]\n        public string Punchline { get; set; }\n    }\n}\n</code></pre>"},{"location":"guides/sdk_guide/","title":"SDK Guide","text":"<p>The JellyFaaS SDK simplifies working with the JellyFaaS API. It provides a <code>Client</code> class which handles authentication and functions to simplify creating HTTP requests to the API. It also provides additional validation and checks of your requests, to prevent making invalid function calls, which would otherwise consume API credits.</p> <p>API Credits</p> <p>The cloud functions used in the examples below will not use your credits. Click here to get an api key.</p> <p>Here is a walk through using the <code>Hello World</code> function.</p>"},{"location":"guides/sdk_guide/#1-creating-a-config-object","title":"1. Creating a Config object","text":"<p>The first step is to create your config object and parse your JellyFaaS api key into it. The config handles keys and authorization.</p> PythonJavaGoC#Node <pre><code>import os\nfrom jellyfaas import ClientConfig\n\napi_key = os.getenv(\"JELLYFAAS_API_KEY\")\n\nif api_key is None:\nraise ValueError(\"API key is not set in environment variables\")\n\nconfig = ClientConfig(api_key=api_key, debug=True)\n</code></pre> <pre><code>Config config = new Config();\nconfig.setApiKey(\"JELLYFAAS_API_KEY\");\n</code></pre> <pre><code>config := JellyConfig{ApiKey: \"JELLYFAAS_API_KEY\"}\n</code></pre> <pre><code>JellyConfig config = new JellyConfig(\"JELLYFAAS_API_KEY\");\n</code></pre> <pre><code>\n</code></pre>"},{"location":"guides/sdk_guide/#2-creating-the-client","title":"2. Creating the Client","text":"<p>After that, you can create the client, and parse the newly created 'config' object into it:</p> PythonJavaGoC#Node <pre><code>from jellyfaas import Client\n\n# initialize config object here \n\nclient = Client(config)\n</code></pre> <pre><code>Client client = new Client(config);\n</code></pre> <pre><code>client := NewClient(config)    \n</code></pre> <pre><code>JellyClient client = new JellyClient(config);\n</code></pre> <pre><code>\n</code></pre>"},{"location":"guides/sdk_guide/#3-looking-up-a-function","title":"3. Looking up a function","text":"<p>To look up a function, you must use the function's short name to find it.  Provided all the previous steps are complete, add the following:</p> PythonJavaGoC#Node <pre><code>client.lookup_function(\"helloworld\")\n</code></pre> <pre><code>client.lookUp(\"helloworld\");\n</code></pre> <pre><code>client.LookupFunction(\"helloworld\")\n</code></pre> <pre><code>client.Lookup(\"helloworld\");\n</code></pre> <pre><code>\n</code></pre>"},{"location":"guides/sdk_guide/#4-setting-the-request","title":"4. Setting the request","text":"<p>Once you've called 'lookup' on your client object, you can now set your request. If a function takes no query parameters and/or no input body, the setRequest parameters can be 'nil' respectively. This dependent on the function, so check the functions requirements if you aren't sure.</p> PythonJavaGoC#Node <pre><code>client.set_request(queryParams, requestBody)\n</code></pre> <pre><code>client.setRequest(queryParams, requestBody);\n</code></pre> <pre><code>client.SetRequest(params, requestBody, &amp;responseOutput, fileInput, &amp;fileOutput)\n</code></pre> <pre><code>client.SetRequest(queryParams, requestBody)\n</code></pre> <pre><code>\n</code></pre> <p>Note</p> <p><code>queryParams</code>, <code>requestBody</code>, <code>responseOutput</code>, <code>fileInput</code>, and <code>fileOutput</code> are placeholders for the following steps below</p>"},{"location":"guides/sdk_guide/#41-setting-query-parameters","title":"4.1 Setting query parameters","text":"<p>The <code>helloworld</code> function requires two query parameters: <code>firstname</code> and <code>lastname</code>. You can set them as follows:</p> PythonJavaGoC#Node <pre><code>query_params={\n    \"firstname\": \"foo\",\n    \"lastname\": \"bar\"\n}\n</code></pre> <pre><code>Map&lt;String, String&gt; queryParams = new HashMap&lt;&gt;();\nqueryParams.put(\"firstname\", \"foo\");\nqueryParams.put(\"lastname\", \"bar\");\n</code></pre> <pre><code>params := map[string]string{\n    \"firstname\": \"foo\",\n    \"lastname\":\"bar\",\n}\n</code></pre> <pre><code>var parameters = new Dictionary&lt;string, string&gt;() {\n    {\"firstname\", \"foo\"},\n    {\"lastname\", \"bar\"}\n};\n</code></pre> <pre><code>\n</code></pre>"},{"location":"guides/sdk_guide/#42-setting-the-body","title":"4.2 Setting the body","text":"<p>The website page for a function will contain an autogenerated input object (depending on the language this could be a class, a struct, dict, etc) for you to copy/paste into your project. For this example, we are using the <code>HellWorld</code> input and output objects. Populate this struct and parse it in with the following under the Json tab:</p> <p>Some functions may take json data, or file data. Here's how you can implement both of them. If you are following the guide for the <code>HelloWorld</code> function, look under the json heading:</p> Warning <p>For <code>C</code> based languages - particularly <code>Java</code>, the package might be incorrect for the auto-generated classes. The default package for all generated classes is <code>main</code> but you may need to change this.</p> PythonJavaGoC#Node <p>a. Sending JSON data</p> DictionaryClass Instance <pre><code>request_body = {\n    \"message\": \"JellyFaaS is cool\",\n    \"rating\": 5.0\n}\n</code></pre> <pre><code>class Review:\n    def __init__(message, rating):\n        self.message = message\n        self.rating = rating\n\nrequest_body = Review(\"JellyFaaS is cool\", 5.0)\n</code></pre> <p>b. Sending file data</p> <p>how to foobar</p> <p>a. Sending JSON data</p> <pre><code>SomeInputClass requestBody = new SomeInputClass();\nrequestBody.setSomeAttribute(\"foobar\");\n</code></pre> <p>b. Sending file data</p> <p>how to foobar</p> <p>a. Sending JSON data</p> <pre><code>input := RequestStruct{Foo: \"foobar\", Bar: 1234}\n</code></pre> <p>b. Sending file data</p> <pre><code>fileInput, err := os.Open(\"/path/to/file\")\nif err != nil {\n    log.Fatal(err)\n}\n</code></pre> <p>a. Sending JSON data</p> <pre><code>SomeInputClass requestBody = new SomeInputClass();\nrequestBody.SetSomeAttribute(\"foobar\");\n</code></pre> <p>b. Sending file data</p> <p>a. Sending JSON data <pre><code>\n</code></pre></p> <p>b. Sending file data</p>"},{"location":"guides/sdk_guide/#5-setting-the-response","title":"5. Setting the response","text":"<p>The SDK allows you to automatically map the response JSON to a specified class.  This is useful for managing complex responses. The website will contain an autogenerated output <code>object</code> that you can copy/paste into your project. Again this is language dependent so these objects will be different.</p> <p>Some functions may return json data, or file data. Here's how you can implement both of them. If you are following the guide for the <code>HelloWorld</code> function, look under the json heading:</p> PythonJavaGoC#Node <p>a. JSON response</p> <pre><code>class MyResponse:\n    def __init__(self):\n        self.message = None\n        self.status = None\n\nclient.set_response(MyResponse)\n</code></pre> <p>b. File response how to foobar</p> <p>a. JSON response</p> <pre><code>client.setResponse(someOutput.class);\n</code></pre> <p>b. File response</p> <p>how to foobar</p> <p>Warning</p> <p><code>setResponse()</code> is not defined in <code>go</code> SDK. Instead, <code>SetRequest()</code> uses a reference to an output struct or output file to be populated. See section 6. Invoke for an example</p> <p>Warning</p> <p><code>setResponse()</code> is not defined in <code>C#</code> SDK.  Instead, <code>Invoke()</code> takes a generic type for the auto-generated class. See section 6. Invoke for an example</p> <p>a. JSON response</p> <p><pre><code>\n</code></pre> b. File response</p> <p>how to foobar</p>"},{"location":"guides/sdk_guide/#6-invoking-the-function","title":"6. Invoking the function","text":"<p>You are ready to call your function! Simply call <code>invoke()</code> and your function will be called.</p> PythonJavaGoC#Node <pre><code>client, result = (\n    jellyfaas.Client(config)\n        .lookup_function(\"helloworld\")\n        .set_request(query_params=query_params, request_body_instance=request_body)\n        .invoke()\n)\n</code></pre> <p>Info</p> <p>Python's <code>invoke</code> will either return a new dictionary if <code>set_response</code> was not called, or if <code>set_response</code> was called, invoke will return an object of the class give in <code>set_response</code>.</p> <pre><code>OutputClass myOutput = (OutputClass) client.lookUp(\"helloworld\").setRequest(params, body).setResponse(someOutput.class).invoke();\n</code></pre> <pre><code>_, err := NewClient(JellyConfig{ApiKey: \"JELLYFAAS_API_KEY\"})\n            .LookupFunction(\"helloworld\")\n            .SetRequest(params, input, &amp;output, nil, nil)\n            .Invoke()\n\nif err != nil {\n    log.Fatal(err)\n}\n</code></pre> Note <p><code>SetRequest()</code> takes a reference <code>&amp;output</code>, which is a struct that gets populated once invoke is called.  Alternatively, if you are using a file as the output, &amp;output should be set to nil, and then a reference to the output file should be parsed.</p> <pre><code>_, err := NewClient(JellyConfig{ApiKey: \"JELLYFAAS_API_KEY\"})\n            .LookupFunction(\"helloworld\")\n            .SetRequest(params, input, nil, nil, &amp;fileOutput)\n            .Invoke()\n\nif err != nil {\n    log.Fatal(err)\n}\n</code></pre> <pre><code>SomeOutput output = client.Lookup(\"helloworld\").SetRequest(params, body).Invoke&lt;SomeOutput&gt;();\n</code></pre> Note <p><code>Invoke</code> takes a <code>&lt;generic&gt;</code> type, therefore, it's return type is inferred from this. This is why the <code>C#</code> SDK doesn't have the <code>setResponse()</code> method.</p> <pre><code>\n</code></pre>"},{"location":"guides/sdk_guide/#error-handling","title":"Error Handling","text":"<p>The JellyFaaS SDK provides custom exceptions for different error scenarios. Below is a description of each error type and where to expect it to be thrown for each SDK:</p> PythonJavaGoC#Node <ol> <li> <p><code>jellyfaas.AuthenticationFailedException</code></p> <p>Thrown when your credentials cannot be verified during config object creation.</p> </li> <li> <p><code>jellyfaas.FunctionLookupException</code> </p> <p>Occurs during the function look up stage.  This could be due to the function not existing.</p> </li> <li> <p><code>jellyfaas.SetRequestException</code></p> <p>This can be down to the query parameters being incorrect and therefore not lining up with the function's query parameter schema. Or, this can be due to the input body not matching the functions input schema.</p> </li> <li> <p><code>jellyfaas.InvocationException</code></p> </li> </ol> <ol> <li> <p><code>v1.jellyfaas.exceptions.JellyFaasException</code></p> <p>This is a general error that can be thrown during the process of calling out to a function.</p> </li> <li> <p><code>v1.jellyfaas.exceptions.JellyFaasFormatException</code> </p> <p>This error is thrown when there are issues with your request body and request parameters. This is usually due to errors with the schema not matching these inputs. </p> </li> <li> <p><code>v1.jellyfaas.exceptions.JellyFaasHttpException</code></p> <p>Occurs during any failures with calling out to the function or setting your authorization JWT.</p> </li> </ol> <p>The Go SDK doesn't use custom error types.</p> <ol> <li> <p><code>Jellyfaas.UnauthorizedException</code></p> <p>This error is thrown when a user attempts to perform an action without the necessary permissions.</p> </li> <li> <p><code>Jellyfaas.FunctionNotFoundException</code></p> <p>This error occurs when the specified function does not exist or cannot be found. It may also include a custom message indicating the function name.</p> </li> <li> <p><code>Jellyfaas.FunctionNotSelectedException</code></p> <p>This error is raised when no function has been selected for the SDK to use. The SDK requires a function to be specified in order to proceed.</p> </li> <li> <p><code>Jellyfaas.EmptyBodyException</code></p> <p>This error is triggered when a function requires a non-empty body, but an empty or missing body is provided in the request.</p> </li> <li> <p><code>Jellyfaas.NonSchemaCompliantException</code></p> <p>This error is thrown when an object does not match the required schema, indicating that the input does not conform to the expected format or structure.</p> </li> <li> <p><code>Jellyfaas.InvalidSchemaException</code></p> <p>This error occurs when the schema associated with a function is invalid or not correctly defined, preventing the function from executing as expected.</p> </li> </ol>"},{"location":"guides/sdk_guide/#debug-mode","title":"Debug mode","text":"<p>If you want a more verbose output from the SDK, you set the SDK to be in debug mode with the following:</p> PythonJavaGoC#Node <p>Both <code>ClientConfig</code> and <code>Client</code> classes utilize Python's built-in logging module. Ensure that your application is configured to capture these logs:</p> <pre><code>import logging\n\nlogging.basicConfig(level=logging.DEBUG)\n</code></pre> <p>This is toggled by calling <code>debug</code> on the client and setting a boolean:</p> <pre><code>// debugging enabled\nclient.debug(true);\n\n// debugging disabled\nclient.debug(false);\n</code></pre> <pre><code>client.SetDebug(true);\n</code></pre> <p>Note</p> <p>Alternatively, debug mode can be set through the config object via: <pre><code>config := JellyConfig{ApiKey: \"JELLYFAAS_API_KEY\", Debug:true}\n</code></pre></p> <pre><code>var loggerFactory = LoggerFactory.Create((builder) =&gt; builder.AddConsole());\nvar logger = loggerFactory.CreateLogger(\"Jellyfaas\");\n\nJellyClient client = new JellyClient(new JellyConfig(\"JELLYFAAS_API_KEY\", logger, true));\n</code></pre> <p>Note</p> <p>Other logging libraries can be used and parsed into the config object.</p> <pre><code>\n</code></pre>"},{"location":"guides/sdk_guide/#complete-code","title":"Complete Code","text":"PythonJavaGoC#Node <p>Example</p> <pre><code>import os\nimport logging\nimport jellyfaas\n\nlogging.basicConfig(level=logging.DEBUG) # When enabled, JellyFaaS logs at the DEBUG level\n\napi_key = os.getenv(\"JELLYFAAS_API_KEY\")\n\nquery_params = {\n\"firstname\": \"John\",\n\"lastname\": \"Doe\"\n}\n\nrequest_body = {\n\"message\": \"JellyFaaS is cool\",\n\"rating\": 5.0\n}\n\ntry:\nconfig = jellyfaas.ClientConfig(api_key=api_key, debug=True)\nclient, result = (\njellyfaas.Client(config)\n.lookup_function(\"helloworld\")\n.set_request(query_params, request_body)\n.invoke()\n)\nprint(result)\n\nexcept jellyfaas.AuthenticationFailedException as e:\nprint(f\"Authentication failed: {e}\")\nexcept jellyfaas.FunctionLookupException as e:\nprint(f\"Function lookup failed: {e}\")\nexcept jellyfaas.SetRequestException as e:\nprint(f\"Setting request failed: {e}\")\nexcept jellyfaas.InvocationException as e:\nprint(f\"Function invocation failed: {e}\")\n</code></pre> <p>Example</p> <pre><code>// creating a config object\nConfig config = new Config();\nconfig.setApiKey(\"JELLYFAAS_API_KEY\");\n\n// setting the client\nClient client = new Client(config);\n\n// setting the query parameters\nMap&lt;String, String&gt; parameters = new HashMap&lt;&gt;();\nqueryParams.put(\"queryParam\", \"foobar\");\n\n// setting an input object\nSomeInputClass requestBody = new SomeInputClass();\nrequestBody.setSomeAttribute(\"foobar\");\n\n// invoking\nSomeOutputClass myOutput = (SomeOutputClass) client.lookUp(\"helloworld\").setRequest(parameters, requestBody).setResponse(SomeOutputClass.class).invoke();\n</code></pre> <p>Example</p> <pre><code>_, err := NewClient(JellyConfig{ApiKey: \"JELLYFAAS_API_KEY\"})\n            .LookupFunction(\"helloworld\")\n            .SetRequest(params, input, &amp;output, nil, nil)\n            .Invoke()\n\nif err != nil {\n    log.Fatal(err)\n}\n</code></pre> <p>Example</p> <pre><code>// Creating a config object\nJellyConfig config = new JellyConfig(\"JELLYFAAS_API_KEY\")\n\n//  Creating a client\nJellyClient client = new JellyClient(config);\n\n// setting an input object\nSomeInputClass requestBody = new SomeInputClass();\nrequestBody.setSomeAttribute(\"foobar\");\n\nvar parameters = new Dictionary&lt;string, string&gt;() { { \"foo\", \"bar\" } };  //  Dictionary of query parameters\n\n// Invoking the function and getting the response\nSomeOutputClass output = client.Lookup(\"joesjokes\").SetRequest(parameters, requestBody).Invoke&lt;SomeOutputClass&gt;();\n</code></pre> <p>Example</p> <pre><code>\n</code></pre> <p>Next Steps</p> <ul> <li>Create your first function</li> <li>Get started with our cli tool</li> <li>Get your API key</li> </ul>"},{"location":"guides/unity_guide/","title":"Unity Guide","text":"<p>The JellyFaas SDK is capable of working in every environment which has support for .Net Standard 2.0. This means that the Unity game engine and projects developed with it can also take advantage of the features provided by the JellyFaas SDK.</p> <p>Supported versions</p> <p>Only the versions of Unity which have support for .Net Standard 2.0 are capable of making use of the SDK. This means that versions of Unity prior to Unity 2018.1 cannot be used with the SDK.</p> <p>Here is a walkthrough using the <code>joesjokes</code> function and Unity 2021.3.38f1:</p>"},{"location":"guides/unity_guide/#1-create-a-new-project-or-open-an-existing-project","title":"1. Create a new project or open an existing project","text":"<p>First we have to create or open up the project we want to add the SDK to with a modern version of Unity.</p> <p>.Net compilation targets</p> <p>The Unity game engine can compile C# code with several versions of .Net, and can also pre-compile your C# code into C++ code. All of these targets have been confirmed to work, and the JellyFaas SDK does work with pre-compiled projects.</p> <p>In this guide we will use a simple Unity project with only a button and a text label which looks like this:</p> <p></p>"},{"location":"guides/unity_guide/#2-add-the-jellyfaas-sdk-to-the-project","title":"2. Add the JellyFaas SDK to the project","text":"<p>Now that you have created your project we should add the JellyFaas SDK to it. As Unity does not have support for the NuGet package manager we will have to manually download and install the SDK as a managed plugin.</p> <p>Go to This Link and download the zip file with the SDK. Once you have the zip file with the plugin you should create a new folder called <code>Plugins</code> in your project's main folder if it doesn't exist already.</p> <p></p> <p>The zip file with the plugin should contain a single folder with multiple .dll files. Extract this folder into the <code>Plugins</code> folder we just created in your Unity project. Now when you go back to Unity it should detect that a new plugin has been added, and it should begin to re-build your project.</p> <p></p>"},{"location":"guides/unity_guide/#3-using-the-jellyfaas-sdk","title":"3. Using the JellyFaas SDK","text":"<p>After you have successfully installed the JellyFaas SDK in your project you should be able to access the functions and classes provided by the SDK through the <code>Jellyfaas</code> namespace in your C# files. This means that now we can start using it.</p> <p>First we should create a new script, and attach it to the button. You should then open the file in the C# IDE of your choice.</p> <p></p> <p>Now that we have our script file we should import the SDK into it. We can do this by adding the following line at the top of our script:</p> <pre><code>using Jellyfaas;\n</code></pre> <p>Now inside the class responsible for our button we should define some variables. First lets define the variable responsible for storing our JellyClient object which will access our JellyFaas functions.</p> <pre><code>private JellyClient client;\n</code></pre> <p>Lets also define a property which will store a reference to our label node we want to put the joke in.</p> <pre><code>public TMP_Text OutputLabel;\n</code></pre> <p>Now we should initialize our JellyFaas client in our <code>Start</code> function. If you used Unity's templates when creating the script this function should have been provided for you. We can do this with the following line of code:</p> <pre><code>client = new JellyClient(new JellyConfig(\"Insert your Api Key here\"));\n</code></pre> <p>The above line initializes our <code>JellyClient</code> with a <code>JellyConfig</code> object. This <code>JellyConfig</code> object will store our JellyFaas Api key which we have to provide when constructing it. We may also provide additional flags to our client through this object.</p> <p>In this guide we will be using the <code>joesjokes</code> function. You can learn more about it Here. This page will also generate you the class which will match the output of the <code>joesjokes</code> function. This is important, as it allows us to simply copy and paste the code from the website into our script instead of writing the class ourselves. We should copy and paste the C# code from the website to somewhere in our script. The code will look something like this:</p> <pre><code>public class JoesJoke\n{\n    public string joke { get; set; }\n\n    public string punchline { get; set; }\n}\n</code></pre> <p>Finally we can call our JellyFaas function. We can easily do this by creating a new function which we can later attach to our button:</p> <pre><code>public  void OnClick()\n{\n    // Your code goes here\n}\n</code></pre> <p>Inside this function we should first look up the <code>joesjokes</code> function with our <code>JellyClient</code>, and then call it. We should then store the resulting joke in a variable like the following code does: <pre><code>client.Lookup(\"joesjokes\");\n\nvar joke = client.Invoke&lt;JoesJoke&gt;();\n</code></pre></p> <p>We can also rewrite this code to fit inside a single line like this:</p> <pre><code>var joke_response = client.Lookup(\"joesjokes\").Invoke&lt;JoesJoke&gt;();\n</code></pre> <p>The invoke call in above takes in a type as a generic argument. In C# generic arguments have to be put inside angle brackets. The invoke function will create a new object of this type, and put the response from the JellyFaas function inside it. Any fields and properties which do not match the values needed by the function will be discarded, which is why we should use the class we generated earlier here.</p> <p>The last part of code we need to write inside the <code>OnClick</code> function will display the joke inside our label. The <code>joesjokes</code> function returns the joke and the punchline separately, meaning that we will have to combine them for the joke to make sense. This can be done with the following code:</p> <pre><code>OutputLabel.text = joke_info.joke + \"\\n\\n\" + joke_info.Punchline;\n</code></pre> <p>This code will put the punchline of the joke two lines below the joke, making it easy to read.</p>"},{"location":"guides/unity_guide/#4-final-steps","title":"4. Final steps","text":"<p>Now that we have our script, we can go back to the Unity Editor. In the editor we should go to our button's properties, and find the <code>On Click ()</code> section. In this section we should click on the <code>+</code> button at the bottom.</p> <p>Pressing this button should add a new event listener to the <code>On Click ()</code> section. In this event listener we should drag and drop our button into the object selection box, and in the dropdown menu next to it we should select our <code>OnClick</code> function we created earlier. This should make it so whenever we press the button the <code>OnClick</code> function will run.</p> <p></p> <p>Finally we should drag and drop the label we want to display our joke on into the <code>Output Label</code> property in our script component section in the button.</p> <p></p> <p>Now we can run the project! Press the run button in the editor to run and see the results of our work.</p> <p></p> <p>After pressing the button we can see that the function has been called, and has provided us with a randomly generated joke. Pressing the button multiple times should give us a new joke after every press.</p> <p></p>"},{"location":"guides/unity_guide/#related-links","title":"Related Links","text":"<ul> <li>JellyFaas SDK Unity plugin download link</li> <li>Github repository with the example project from this guide</li> <li>C# JellyFaas SDK Reference</li> </ul>"},{"location":"guides/unity_guide/#the-code-we-have-wrote","title":"The code we have wrote","text":"<pre><code>using System.Collections;\nusing System.Collections.Generic;\nusing TMPro;\nusing UnityEngine;\n\nusing Jellyfaas;\nusing System.Text.Json.Serialization;\n\npublic class JokeButton : MonoBehaviour\n{\n    //  Export this property so we can set the text label we want to put the joke in from the editor\n    public TMP_Text OutputLabel;\n\n    //  Store the JellyFaas client so we don't have to remake it every time we call a function\n    private JellyClient client;\n\n    // Start is called before the first frame update\n    void Start()\n    {\n        client = new JellyClient(new JellyConfig(\"Insert your Api Key here\"));  //  &lt; -- Insert your API key here\n    }\n\n    public void OnClick() {\n        var joke_info = client.Lookup(\"joesjokes\").Invoke&lt;JoesJoke&gt;();  //  The joesjokes function does not take any parameters, and returns information on a randomly generated joke\n\n        OutputLabel.text = joke_info.joke + \"\\n\\n\" + joke_info.Punchline;\n    }\n\n\n    //  The class which matches the definition of the Json object returned by the joesjokes function\n    //  The joesjokes function returns a json object with two strings called \"joke\" and \"punchline\".\n    public class JoesJoke\n    {\n        //  As long as the property name matches the Json property the SDK will read the data into the matching properties\n        public string joke { get; set; }\n\n        //  Json property names are case sensitive, meaning that this property does not match\n        //  Fortunately, the JellyFaas SDK uses the System.Text.Json library when deserializing Json objects, meaning that you can use any attributes provided by it\n        //  The following attribute tells the SDK to assume this property is called \"punchline\" when translating to and from Json.\n        [JsonPropertyName(\"punchline\")]\n        public string Punchline { get; set; }\n    }\n}\n</code></pre>"},{"location":"reference/python/","title":"Python SDK Class Reference","text":""},{"location":"reference/python/#contents","title":"Contents","text":"<p>Client Config</p>"},{"location":"reference/java/java_home/","title":"Java v1 reference","text":"<p>Last updated: Sep 06, 2024 at 16:28</p> <p>This is the Java v1 reference guide.  If you want more information about how to get started with SDKs, click here.</p> Warning <p>This project is under active development!</p> <p>Found a problem? Report it here.</p>"},{"location":"reference/java/java_home/#contents","title":"Contents","text":"<ul> <li> <p><code>public class Client</code></p> <p>Browse the constructor and methods for this class. This class has 12 methods.</p> <p> See Reference</p> </li> <li> <p><code>public class JellyFaasException extends Exception</code></p> <p>Browse the constructor and methods for this class. This class has 1 methods.</p> <p> See Reference</p> </li> <li> <p><code>public class JellyFaasFormatException extends Exception</code></p> <p>Browse the constructor and methods for this class. This class has 1 methods.</p> <p> See Reference</p> </li> <li> <p><code>public class JellyFaasHttpException extends Exception</code></p> <p>Browse the constructor and methods for this class. This class has 1 methods.</p> <p> See Reference</p> </li> <li> <p><code>public class JellyFormData</code></p> <p>Browse the constructor and methods for this class. This class has 6 methods.</p> <p> See Reference</p> </li> <li> <p><code>public class Config</code></p> <p>Browse the constructor and methods for this class. This class has 6 methods.</p> <p> See Reference</p> </li> <li> <p><code>public abstract class JellyFaasOutputBuilder</code></p> <p>Browse the constructor and methods for this class. This class has 2 methods.</p> <p> See Reference</p> </li> </ul>"},{"location":"reference/java/java_home/#jellyfaas-java-sdk","title":"JellyFaaS Java SDK","text":"<p>The JellyFaaS Java SDK. Here's a quick guide on how to get started with the SDK.</p>"},{"location":"reference/java/java_home/#setting-the-config-object","title":"Setting the config object","text":"<p>This object handles any keys and tokens that are required throughout the life cycle of the client. The config will generate any jwt tokens and authorisation required at run time. <pre><code>Config config = new Config();\nconfig.setApiKey(\"API-KEY\");\n...\n</code></pre></p>"},{"location":"reference/java/java_home/#creating-a-client","title":"Creating a client","text":"<p>Start by creating a <code>Client</code>, this takes a config object (created above).</p> <pre><code>Client client = new Client(config);\n</code></pre>"},{"location":"reference/java/java_home/#function-lookup","title":"Function Lookup","text":"<p>Each function has its own unique shortname - these are used to look up functions.  This is done by calling <code>.lookUp(\"shortname\")</code>. <pre><code>client.lookUp(\"shortname\");\n</code></pre></p>"},{"location":"reference/java/java_home/#setting-the-request-parameters","title":"Setting the request parameters","text":"<p>This is the most error-prone function as this validates an input body against the functions schema ,which is fetched when <code>.lookUp(\"shortname\")</code> is called.  To set the request, you must call <code>.setRequest(Map&lt;String, String&gt;, Object)</code>on the client object.</p>"},{"location":"reference/java/java_home/#query-parameters","title":"Query Parameters","text":"<p>These are set using a <code>Map&lt;String, String&gt;</code> for the key value pairs for the query params the function takes. These are validated before the call is made to the function.</p>"},{"location":"reference/java/java_home/#request-body","title":"Request Body","text":"<p>Each request and response class is unique to each function.  A populated request object must be parsed into this function.</p>"},{"location":"reference/java/java_home/#setting-the-response-body","title":"Setting the Response Body","text":"<p>This is done with <code>.setResponse(Class&lt;?&gt;)</code> A response object must be provided, which lets the response be accessible via a Java object.  The <code>Class&lt; ? &gt;</code> of the output class must be parsed which is provided on the functions' webpage. The <code>invoke()</code> function will return an instance of that class.</p>"},{"location":"reference/java/java_home/#invoking","title":"Invoking","text":"<p>This is the last method to make a request out to the function provided the previous methods have been called. The <code>invoke()</code> function will return a new instance of the <code>Class&lt; ? &gt;</code> provided in <code>.setResponse();</code>. If an instance is provided, the data will be marshalled into this instance provided the schema is correct.</p>"},{"location":"reference/java/java_home/#example","title":"Example","text":"<p>Example with parsing the <code>OutputClass</code> class. <pre><code>// creating a config object\nConfig config = new Config();\nconfig.setApiKey(\"API-KEY\");\n\n// setting the client\nClient client = new Client(config);\n\n// creating an input object\nInputClass input = new InputClass();\ninputClass.setSomeAttribute(\"foobar\");\n\n// invoking the function with the OutputClass.class as the response object\nOutputClass output = (OutputClass) client.lookUp(\"shortname\").setRequest(params, input).setResponse(OutputClass.class).invoke();\n</code></pre></p>"},{"location":"reference/java/Client/public_class_client/","title":"<code>public class Client</code>","text":"Warning <p>This project is under active development!</p> <p>Found a problem? Report it here.</p> <p>Client required to make calls out to JellyFaaS functions.  Supports method chaining for easy callouts.</p>"},{"location":"reference/java/Client/public_class_client/#browse-constructor-and-methods","title":"Browse constructor and methods","text":""},{"location":"reference/java/Client/public_class_client/#public-clientconfig-config-throws-jellyfaasexception","title":"public Client(Config config) throws JellyFaasException","text":"<p> <pre><code>public Client(Config config) throws JellyFaasException \n</code></pre> </p> <p>Client object is used to make calls to the functions hosted in JellyFaas.</p> <p>param</p> <ul> <li><code>config</code> JellyFaas Config object</li> </ul> <p>throws</p> <ul> <li><code>JellyFaasException</code> if the config object is null</li> </ul>"},{"location":"reference/java/Client/public_class_client/#public-client-setresponseclass-output-throws-jellyfaasexception","title":"public Client setResponse(Class&lt;?&gt; output) throws JellyFaasException","text":"<p> <pre><code>public Client setResponse(Class&lt;?&gt; output) throws JellyFaasException \n</code></pre> </p> <p>Sets the object the response will be marshalled into. This can be a <code>Class&lt;?&gt;</code> or an instance of an object</p> <p>param</p> <ul> <li><code>output</code> the class for the output object to be</li> </ul> <p>return</p> <ul> <li>Current Client</li> </ul> <p>throws</p> <ul> <li><code>JellyFaasException</code> if the function doesn't have an output schema. Please set this parameter to be null, or don't call this method when invoking</li> </ul>"},{"location":"reference/java/Client/public_class_client/#public-client-setrequestmap-queryparams-object-requestbody-throws-jellyfaasexception-ioexception-jellyfaasformatexception","title":"public Client setRequest(Map queryParams, Object requestBody) throws JellyFaasException, IOException, JellyFaasFormatException   <p> <pre><code>public Client setRequest(Map&lt;String, String&gt; queryParams, Object requestBody) throws JellyFaasException, IOException, JellyFaasFormatException \n</code></pre> </p> <p>Sets the body and query parameters for a request. This method will validate the body against the function's  schema.</p> <p>param</p> <ul> <li> <p><code>queryParams</code> a string to string mapping of the query parameters</p> </li> <li> <p><code>requestBody</code> an object for the input body</p> </li> </ul> <p>return</p> <ul> <li>Current Client</li> </ul> <p>throws</p> <ul> <li> <p><code>JellyFaasException</code> if the <code>queryParams</code> are invalid or the <code>requestBody</code> is invalid</p> </li> <li> <p><code>JsonProcessingException</code> when the input schema cannot be validated</p> </li> <li> <p><code>JellyFaasFormatException</code> when the provided input class has missing types or the incorrect types against the json schema</p> </li> </ul>","text":""},{"location":"reference/java/Client/public_class_client/#public-client-lookupstring-shortname-throws-jellyfaasexception-jellyfaashttpexception","title":"public Client lookUp(String shortName) throws JellyFaasException, JellyFaasHttpException   <p> <pre><code>public Client lookUp(String shortName) throws JellyFaasException, JellyFaasHttpException \n</code></pre> </p> <p>Determines which function to call to via the given short name.</p> <p>param</p> <ul> <li><code>shortName</code> the shortname assigned to a function. E.g., 'examplefunc'</li> </ul> <p>return</p> <ul> <li>Current Client</li> </ul> <p>throws</p> <ul> <li> <p><code>JellyFaasException</code> when there as issue sending the http request to the JellyFaas auth service</p> </li> <li> <p><code>JellyFaasHttpException</code> when the user supplies invalid credentials, or there is an issue with the auth service</p> </li> </ul>","text":""},{"location":"reference/java/Client/public_class_client/#public-object-invoke-throws-jellyfaashttpexception-jellyfaasexception-ioexception","title":"public Object invoke() throws JellyFaasHttpException, JellyFaasException, IOException   <p> <pre><code>public Object invoke() throws JellyFaasHttpException, JellyFaasException, IOException \n</code></pre> </p> <p>Method calls a JellyFaas function with the given parameters.</p> <p>return</p> <ul> <li>a new object that is the same type as the Class set in <code>setResponse();</code>.</li> </ul> <p>throws</p> <ul> <li> <p><code>JellyFaasHttpException</code> when a HTTP error occurs calling out to the service</p> </li> <li> <p><code>JellyFaasException</code> if the response object is null or if the config object is null</p> </li> </ul>","text":""},{"location":"reference/java/Client/public_class_client/#protected-byte-getresponse","title":"protected byte[] getResponse()   <p> <pre><code>protected byte[] getResponse() \n</code></pre> </p> <p>Returns the response from the called from #invoke().</p> <p>return</p> <ul> <li>HttpResponse object.","text":""},{"location":"reference/java/Client/public_class_client/#public-string-tostring-throws-nullpointerexception","title":"public String toString() throws NullPointerException  <p> <pre><code>public String toString() throws NullPointerException\n</code></pre> </p> <p>this is useful for parsing the response as JSON</p> <p>return</p> <ul> <li>the response body as a string</li> </ul>","text":""},{"location":"reference/java/Client/public_class_client/#public-client-debugboolean-flag","title":"public Client debug(boolean flag)  <p> <pre><code>public Client debug(boolean flag)\n</code></pre> </p> <p>Will print out debug lines if set to true.</p> <p>param</p> <ul> <li><code>flag</code> determines if debug mode will be used.</li> </ul> <p>return</p> <ul> <li>Current Client</li> </ul>","text":""},{"location":"reference/java/Client/public_class_client/#public-int-getstatuscode","title":"public int getStatusCode()  <p> <pre><code>public int getStatusCode()\n</code></pre> </p> <p>Returns the status code of the function call</p> <p>return</p> <ul> <li>the status code of response</li> </ul>","text":""},{"location":"reference/java/Client/public_class_client/#private-void-validatequeryparamsmap-params-throws-jellyfaasexception","title":"private void validateQueryParams(Map params) throws JellyFaasException   <p> <pre><code>private void validateQueryParams(Map&lt;String, String&gt; params) throws JellyFaasException \n</code></pre> </p> <p>Validates the query params against the functions' schema.</p> <p>param</p> <ul> <li><code>params</code> mapping of key value pairs for the query params</li> </ul> <p>throws</p> <ul> <li><code>JellyFaasException</code> when there's a required parameter</li> </ul>","text":""},{"location":"reference/java/Client/public_class_client/#private-void-validateschemabyte-body-jsonobject-schema-throws-jellyfaasformatexception-ioexception","title":"private void validateSchema(byte[] body, JSONObject schema) throws JellyFaasFormatException, IOException   <p> <pre><code>private void validateSchema(byte[] body, JSONObject schema) throws JellyFaasFormatException, IOException \n</code></pre> </p> <p>Validates the request body against the json schema.</p> <p>param</p> <ul> <li> <p><code>body</code> the input body as a byte array</p> </li> <li> <p><code>schema</code> the schema to validate against</p> </li> </ul> <p>throws</p> <ul> <li><code>JellyFaasFormatException</code> when the provided input class has missing types or the incorrect types against the json schema doesn't match the schema</li> </ul> <p>apiNote</p> <ul> <li>this only works for json body data.</li> </ul>","text":""},{"location":"reference/java/Client/public_class_client/#private-httpresponse-docallstring-url-string-method-map-headers-httprequestbodypublisher-requestbody-throws-jellyfaasexception-jellyfaashttpexception","title":"private HttpResponse doCall(String url, String method, Map headers, HttpRequest.BodyPublisher requestBody) throws JellyFaasException, JellyFaasHttpException   <p> <pre><code>private HttpResponse&lt;byte[]&gt; doCall(String url, String method, Map&lt;String, String&gt; headers, HttpRequest.BodyPublisher requestBody) throws JellyFaasException, JellyFaasHttpException \n</code></pre> </p> <p>Handles calling out to the auth service with a given url, using the api-key.</p> <p>param</p> <ul> <li><code>url</code> the url to call out to</li> </ul> <p>return</p> <ul> <li>a byte array of the response object</li> </ul> <p>throws</p> <ul> <li> <p><code>JellyFaasException</code> when there as issue sending the http request to the JellyFaas auth service</p> </li> <li> <p><code>JellyFaasHttpException</code> when the user supplies invalid credentials, or there is an issue with the auth service</p> </li> </ul>","text":""},{"location":"reference/java/Config/public_class_config/","title":"<code>public class Config</code>","text":"Warning <p>This project is under active development!</p> <p>Found a problem? Report it here.</p> <p>The config object handles the authentication for a user wanting to use JellyFaaS.  Config object uses a JellyFaaS api key to generate a valid JWT when making a call.</p>"},{"location":"reference/java/Config/public_class_config/#browse-constructor-and-methods","title":"Browse constructor and methods","text":""},{"location":"reference/java/Config/public_class_config/#public-config","title":"public Config()","text":"<p> <pre><code>public Config()\n</code></pre> </p> <p>Creates a config object that handles any tokens/jwts/authorization during the life cycle of the client</p>"},{"location":"reference/java/Config/public_class_config/#public-void-setapikeystring-apikey-throws-jellyfaashttpexception-jellyfaasexception","title":"public void setApiKey(String apiKey) throws JellyFaasHttpException, JellyFaasException","text":"<p> <pre><code>public void setApiKey(String apiKey) throws JellyFaasHttpException, JellyFaasException \n</code></pre> </p> <p>Sets the JellyFaaS api key and generates a jwt</p> <p>param</p> <ul> <li><code>apiKey</code> your API key</li> </ul> <p>throws</p> <ul> <li> <p><code>JellyFaasHttpException</code> when the request couldn't be sent to the JellyFaas servers to get the jwt</p> </li> <li> <p><code>JellyFaasException</code> when there's an issue with the api key</p> </li> </ul>"},{"location":"reference/java/Config/public_class_config/#public-string-getapikey","title":"public String getApiKey()","text":"<p> <pre><code>public String getApiKey()\n</code></pre> </p> <p>Gets the api key</p> <p>return</p> <ul> <li>api key</li> </ul>"},{"location":"reference/java/Config/public_class_config/#public-void-setjwt-throws-jellyfaasexception-jellyfaashttpexception","title":"public void setJwt() throws JellyFaasException, JellyFaasHttpException","text":"<p> <pre><code>public void setJwt() throws JellyFaasException, JellyFaasHttpException \n</code></pre> </p> <p>Makes a call to the JellyFaas servers and sets a jwt token</p> <p>throws</p> <ul> <li> <p><code>JellyFaasException</code> when an error occurs during the http request</p> </li> <li> <p><code>JellyFaasHttpException</code> when an issue occurs when retrieving the jwt token, this can include invalid credentials</p> </li> </ul>"},{"location":"reference/java/Config/public_class_config/#protected-string-getjwt","title":"protected String getJwt()","text":"<p> <pre><code>protected String getJwt()\n</code></pre> </p> <p>Gets the jwt set from #setApiKey(String)</p> <p>return</p> <ul> <li>jwt token</li> </ul>"},{"location":"reference/java/Config/public_class_config/#private-httpresponse-docallstring-url-string-method-map-headers-httprequestbodypublisher-requestbody-throws-jellyfaasexception-jellyfaashttpexception","title":"private HttpResponse doCall(String url, String method, Map headers, HttpRequest.BodyPublisher requestBody) throws JellyFaasException, JellyFaasHttpException   <p> <pre><code>private HttpResponse&lt;byte[]&gt; doCall(String url, String method, Map&lt;String, String&gt; headers, HttpRequest.BodyPublisher requestBody) throws JellyFaasException, JellyFaasHttpException \n</code></pre> </p> <p>Handles calling out to the auth service with a given url, using the api-key.</p> <p>param</p> <ul> <li><code>url</code> the url to call out to</li> </ul> <p>return</p> <ul> <li>a byte array of the response object</li> </ul> <p>throws</p> <ul> <li> <p><code>JellyFaasException</code> when there as issue sending the http request to the JellyFaas auth service</p> </li> <li> <p><code>JellyFaasHttpException</code> when the user supplies invalid credentials, or there is an issue with the auth service</p> </li> </ul>","text":""},{"location":"reference/java/JellyFaasException/public_class_jellyfaasexception_extends_exception/","title":"<code>public class JellyFaasException extends Exception</code>","text":"Warning <p>This project is under active development!</p> <p>Found a problem? Report it here.</p>"},{"location":"reference/java/JellyFaasException/public_class_jellyfaasexception_extends_exception/#browse-constructor-and-methods","title":"Browse constructor and methods","text":"<p>This Class has no viewable methods.</p>"},{"location":"reference/java/JellyFaasFormatException/public_class_jellyfaasformatexception_extends_exception/","title":"<code>public class JellyFaasFormatException extends Exception</code>","text":"Warning <p>This project is under active development!</p> <p>Found a problem? Report it here.</p>"},{"location":"reference/java/JellyFaasFormatException/public_class_jellyfaasformatexception_extends_exception/#browse-constructor-and-methods","title":"Browse constructor and methods","text":"<p>This Class has no viewable methods.</p>"},{"location":"reference/java/JellyFaasHttpException/public_class_jellyfaashttpexception_extends_exception/","title":"<code>public class JellyFaasHttpException extends Exception</code>","text":"Warning <p>This project is under active development!</p> <p>Found a problem? Report it here.</p>"},{"location":"reference/java/JellyFaasHttpException/public_class_jellyfaashttpexception_extends_exception/#browse-constructor-and-methods","title":"Browse constructor and methods","text":"<p>This Class has no viewable methods.</p>"},{"location":"reference/java/JellyFaasOutputBuilder/public_abstract_class_jellyfaasoutputbuilder/","title":"<code>public abstract class JellyFaasOutputBuilder</code>","text":"Warning <p>This project is under active development!</p> <p>Found a problem? Report it here.</p>"},{"location":"reference/java/JellyFaasOutputBuilder/public_abstract_class_jellyfaasoutputbuilder/#browse-constructor-and-methods","title":"Browse constructor and methods","text":""},{"location":"reference/java/JellyFaasOutputBuilder/public_abstract_class_jellyfaasoutputbuilder/#public-static-t-buildjsonclient-client-class-outputclass-throws-jellyfaasexception","title":"public static  T buildJSON(Client client, Class outputClass) throws JellyFaasException   <p> <pre><code>public static &lt;T&gt; T buildJSON(Client client, Class&lt;T&gt; outputClass) throws JellyFaasException \n</code></pre> </p> <p>This builds a response into an object</p> <p>param</p> <ul> <li> <p><code>client</code> contains the response after Client#invoke() has been called.</p> </li> <li> <p><code>outputClass</code> the output class type to be populated</p> </li> </ul>","text":""},{"location":"reference/java/JellyFaasOutputBuilder/public_abstract_class_jellyfaasoutputbuilder/#public-static-byte-buildrawclient-client","title":"public static byte[] buildRaw(Client client)   <p> <pre><code>public static byte[] buildRaw(Client client) \n</code></pre> </p> <p>This gets the raw response from the function.</p> <p>param</p> <ul> <li><code>client</code> contains the response after Client#invoke() has been called.</li> </ul> <p>return</p> <ul> <li>byte array of the response.</li> </ul>","text":""},{"location":"reference/java/JellyFormData/public_class_jellyformdata/","title":"<code>public class JellyFormData</code>","text":"Warning <p>This project is under active development!</p> <p>Found a problem? Report it here.</p>"},{"location":"reference/java/JellyFormData/public_class_jellyformdata/#browse-constructor-and-methods","title":"Browse constructor and methods","text":""},{"location":"reference/java/JellyFormData/public_class_jellyformdata/#public-jellyformdataclient-client","title":"public JellyFormData(Client client)","text":"<p> <pre><code>public JellyFormData(Client client)\n</code></pre> </p> <p>Form data handler</p>"},{"location":"reference/java/JellyFormData/public_class_jellyformdata/#public-void-addstring-key-string-value","title":"public void add(String key, String value)","text":"<p> <pre><code>public void add(String key, String value) \n</code></pre> </p> <p>Add a form data key-value pair (String-&gt;String)</p> <p>param</p> <ul> <li> <p><code>key</code> Identifier</p> </li> <li> <p><code>value</code> A string</p> </li> </ul>"},{"location":"reference/java/JellyFormData/public_class_jellyformdata/#public-void-addstring-key-file-value-throws-ioexception","title":"public void add(String key, File value) throws IOException","text":"<p> <pre><code>public void add(String key, File value) throws IOException \n</code></pre> </p> <p>Add a form data key-value pair (String-&gt;InputStream)</p> <p>param</p> <ul> <li> <p><code>key</code> Identifier</p> </li> <li> <p><code>value</code> An input stream value for file info</p> </li> </ul>"},{"location":"reference/java/JellyFormData/public_class_jellyformdata/#public-void-removestring-key","title":"public void remove(String key)","text":"<p> <pre><code>public void remove(String key) \n</code></pre> </p> <p>Removes a key value pair given the key</p> <p>param</p> <ul> <li><code>key</code> Identifier</li> </ul>"},{"location":"reference/java/JellyFormData/public_class_jellyformdata/#protected-string-buildformdata-throws-ioexception","title":"protected String buildFormData() throws IOException","text":"<p> <pre><code>protected String buildFormData() throws IOException \n</code></pre> </p> <p>Builds the form data into a formatted structure string</p> <p>return</p> <ul> <li>formatted form data structure</li> </ul>"},{"location":"reference/python/client/","title":"Client","text":""},{"location":"reference/python/client/#description","title":"Description","text":"<p>The <code>Client</code> enables usage of the JellyFaaS function library. </p> <p>Most methods are dependant on the <code>Client</code> instance's internal state and must only be called in increasing order of \"call sequence\" (see below). Additionally, some methods are marked as \"required\". These methods must be called to invoke a minimal JellyFaaS function.</p> <p>For example, neither <code>set_function_body()</code> nor <code>set_function_query_params()</code> may be called before:</p> <ol> <li><code>Client()</code></li> <li><code>set_version()</code> (optionally)</li> <li><code>lookup_function()</code></li> </ol>"},{"location":"reference/python/client/#methods","title":"Methods","text":"Return Method Call Sequence Client Client(config: Config) 1(Required) Client set_version(version: int) 2 Client lookup_function(function_id: str) 3(Required) Client set_function_body(query_params: Dict[str, str]) 4 Client set_function_query_params(query_params: dict) 4 Client invoke(query_params: dict) 5(Required) Client get_status_code(query_params: dict) 6"},{"location":"reference/python/client/#method-descriptions","title":"Method Descriptions","text":""},{"location":"reference/python/client/#client","title":"Client(config: Config) -&gt; Client","text":""},{"location":"reference/python/client/#raises-jellyfaasexception","title":"Raises <code>JellyFaasException</code>","text":"<p><code>Client</code> constructor. The client saves a reference to <code>config</code>, which contains your API key, handles authentication, and miscellaneous configuration. If <code>config</code> is invalid, raises <code>JellyFaasException</code></p>"},{"location":"reference/python/client/#set_version","title":"set_version(version: int) -&gt; Client","text":""},{"location":"reference/python/client/#raises-jellyfaasexception_1","title":"Raises <code>JellyFaasException</code>","text":"<p>Sets the version to be used by any following calls to <code>lookup_function()</code>. This state is cleared upon any call to <code>clear()</code>. <code>version</code> must be a positive (non-zero) integer. If <code>version</code> is invalid, raises <code>JellyFaasException</code>.</p> <p>Note</p> <p>If <code>set_version()</code> is not called, <code>lookup_function()</code> will default to the newest version. This means your code may break on future releases of any used functions. It is highly recommended to explicity <code>set_verion()</code> first, to avoid this.</p>"},{"location":"reference/python/client/#lookup_function","title":"lookup_function(function_id: str) -&gt; Client","text":""},{"location":"reference/python/client/#raises-jellyfaasexception_2","title":"Raises <code>JellyFaasException</code>","text":"<p>Requests the details of the JellyFaaS function with ID specified by <code>function_id</code> and optionally version specified by <code>set_version()</code>. If version is not specified, defaults to the newest version.</p> <p>If successful, sets the function as the <code>Client</code>'s active function. This will also clear any data set by <code>set_function_body()</code> or <code>set_function_query_params()</code>.</p> <p>If unsuccessful, raises <code>JellyFaasException</code>. This may be due to an invalid <code>function_id</code> or version.</p>"},{"location":"reference/python/client/#set_function_body","title":"set_function_body(body, do_validation: bool = True) -&gt; Client","text":""},{"location":"reference/python/client/#raises-jellyfaasexception_3","title":"Raises <code>JellyFaasException</code>","text":"<p>set_function_body is used to pass data to a JellyFaaS function. Specifically, it is used to set the invocation's underlying HTTP request body.</p> <p>Depending on the function's defined input, set_function_body will expect and validate against different types of data:</p> <p>a. JSON</p> <p>set_function_body expects <code>body</code> to be a dict or JSON-serialiazable class instance (extending from Pydantic BaseModel) </p> <p>b. FILE</p> <p>set_function_body expects <code>body</code> to be a <code>bytes</code> object. </p> <p>By default, set_function_body will validate your input matches the function schema, ensuring your request is expected to succeed before actually invoking the function. The behaviour can be disabled by setting <code>do_validation</code> = False</p>"},{"location":"reference/python/client/#set_function_query_params","title":"set_function_query_params(query_params: Dict[str, str], do_validation = True) -&gt; Client","text":""},{"location":"reference/python/client/#raises-jellyfaasexception_4","title":"Raises <code>JellyFaasException</code>","text":"<p>set_function_query_params is used to pass data to a JellyFaaS function. Specifically, it is used to set the invocation's underlying HTTP request query parameters. set_function_query_params expects <code>body</code> to be a flat dict of <code>str</code> keys and values.</p> <p>By default, set_function_query_params will validate your input matches the function schema, ensuring your request is expected to succeed before actually invoking the function. The behaviour can be disabled by setting <code>do_validation</code> = False</p>"},{"location":"reference/python/client/#invoke","title":"invoke(outputClass: Type = None) -&gt; (Client, response)","text":""},{"location":"reference/python/client/#raises-jellyfaasexception_5","title":"Raises <code>JellyFaasException</code>","text":"<p>Calls the JellyFaaS function, with any inputs set by set_function_body and set_function_query_params.  If an outputType is passed, <code>invoke</code> will attempt to cast the response to a new instance of the specified class.</p>"},{"location":"reference/python/client/#get_status_code","title":"get_status_code() -&gt; Client","text":""},{"location":"reference/python/client/#raises-jellyfaasexception_6","title":"Raises <code>JellyFaasException</code>","text":"<p>Returns the HTTP status code returned with the last call of <code>invoke()</code></p>"},{"location":"reference/python/config/","title":"Config","text":""},{"location":"reference/python/config/#description","title":"Description","text":"<p>The <code>Config</code> provides authentication and configuration settings for <code>Client</code> instances to use the JellyFaaS function library. </p>"},{"location":"reference/python/config/#methods","title":"Methods","text":"Return Method Config Config(api_key: str)"},{"location":"reference/python/config/#method-descriptions","title":"Method Descriptions","text":""},{"location":"reference/python/config/#client","title":"Client(config: Config) -&gt; Client","text":""},{"location":"reference/python/config/#raises-jellyfaasexception","title":"Raises <code>JellyFaasException</code>","text":"<p><code>Config</code> constructor. </p>"}]}