{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the JellyFAAS docs","text":"<p>Integrate seamlessly into your work flow.</p>"},{"location":"#behind-the-scenes","title":"Behind the scenes","text":"<p>Your function calls do a lot behind the scenes that you don't see!</p> <pre><code>sequenceDiagram\nClient-&gt;&gt;+JellyFaas Api: Authourise Api key\nJellyFaas Api-&gt;&gt;-Client: JWT\n\nClient-&gt;&gt;+JellyFaas Api: Lookup function\nJellyFaas Api-&gt;&gt;+JellyFaas Functions Library: Lookup function \nJellyFaas Functions Library-&gt;&gt;-JellyFaas Api: Function requirments and dns \nJellyFaas Api-&gt;&gt;-Client: Function requirments and dns \n\nClient-&gt;&gt;+JellyFaas Api: Invoke\nJellyFaas Api-&gt;&gt;+JellyFaas Cloud Instance: Invoke\n    critical Connect to function instance\n        JellyFaas Cloud Instance--&gt;Google Cloud Function: connect\n        JellyFaas Cloud Instance--&gt;Google Cloud Function: run\n        JellyFaas Cloud Instance--&gt;Google Cloud Function: process response \n    end\nJellyFaas Cloud Instance-&gt;&gt;-JellyFaas Api: Function response\nJellyFaas Api-&gt;&gt;-Client: Function response</code></pre>"},{"location":"about/","title":"Nubilus movit","text":""},{"location":"about/#resupinus-pisenore-dumque-aethera-nectare","title":"Resupinus Pisenore dumque aethera nectare","text":"<p>Lorem markdownum tenaci Lucifero herba: circumdata, mihi deus vigilans tamen fuit magnosque triumpha? Habuit circumdat ut ille, temperat, Pallas dis feruntur: natura: longius, ministrarum nihil. Quodque in manus, et veniam vincemur contigit posuit fuerant repetita animum hunc simul debuit. Et aethere latissima contemnere mixta et confudit fratri manus, intrarant puppibus quod reddit se quoque. Membra ille eris corpore!</p>"},{"location":"about/#dummodo-falsae-bracchiaque-rerum","title":"Dummodo falsae bracchiaque rerum","text":"<p>Caputque tu brevi munus per. Potest cera, ore tuis Tritonia propinquos oppida rexque sperat, cum secutum suis. Felix rebus celeremque ad esset et felle nocendi. Formosus bonis pererratis sterilique taceam captum, pennis per tremit currus divellite querellas?</p> <ol> <li>Mihi pleno quodque parabant es erat principio</li> <li>Contigit in vultus in censuque videndi velut</li> <li>Achaia insano nosti cacumina</li> <li>Cantu qui</li> <li>In vale paries tamen ubi nescio natus</li> </ol>"},{"location":"about/#lotos-quid-pietas","title":"Lotos quid pietas","text":"<p>Venit genas posset parvis, et cultro in carminibus patentis pondere, cui non inminet angues terraeque! Simplicitas refer aeger.</p> <pre><code>if (scrollControl &gt; data.maximize_bcc_resolution(gnuAffiliateWindows, gpu,\n        dvd_cloud)) {\n    ribbonWaveformAd.checksumSnapshot(pitchRdfSolid, -1);\n} else {\n    serverAdapter(file + bash, -3);\n    domainDvd /= 5;\n}\nif (tiff) {\n    macroCamera(podcastSkuMotherboard + lossyPasswordTweet, storageSdkHeap,\n            reader_t_drive(serverKindleDvd));\n    flash_click_ata(cyberspace(internal_lock_blog));\n    footerAddressMatrix += -5;\n}\nvar bar = 4;\n</code></pre>"},{"location":"about/#patris-utinam-ossibus","title":"Patris utinam ossibus","text":"<p>Thalamique vellera Peleus ab vivo crudeles bracchia, animum qui, quodvis ego, quae arma. Hominum orbem: rapidi iacent miserata iram vada optat finita dant suadent privignae medio sustinuit et summa moenia. Equis corpore mare illic Nilum, data delapsam tempora qua instruxere, alto nam usum. Contraque illuc dum gregibus Minos, turbatusque huic alios caelo membra quin bello, latratibus per esse, alta!</p> <p>Iustis Nereus figere? Somno aera praevitiat disce, inpono. Et vertice fruatur! Excedere caecos occurrensque arva trepidumque avia innumeras.</p> <p>Arma tabellis in, lacrimas si tempore sonos videtur altique cum: iuveni. Mansit dimittere in riguerunt muros, sed forma suis iniquus. Profanam profusis moderatior de utque, geminae mare corpusque Tartara ad siderea de terras tellurem. Senecta spatium, qui Pelops gaudet. Agmine lucos inpar deus cum terraeque aversos?</p>"},{"location":"cli/","title":"JellyFaaS CLI Tool","text":""},{"location":"getting_started/","title":"Getting Started Guide","text":"<p>We've stream lined everything, so you don't have too.</p>"},{"location":"getting_started/#installation","title":"Installation","text":"<p>We support a wide range of languages - find your language to get started with our SDK.</p> PythonJavaGoC#Node <p>The JellyFaaS SDK Python package is available on PyPI: <pre><code>pip install jellyfaas\n</code></pre></p> <p>Add this maven dependency to your <code>POM.xml</code> file: <pre><code>&lt;dependency&gt;\n    // placeholder\n&lt;/dependency&gt;\n</code></pre></p> <p>Use the <code>go get</code> command to install the package: <pre><code>go get github.com/Platform48/go_sdk\n</code></pre></p> <p>Using the <code>dotnet</code> cli to add it to your <code>.dotNet</code> project:</p> <pre><code>dotnet add package JellyfaasSdk\n</code></pre> <pre><code>\n</code></pre>"},{"location":"getting_started/#quick-start","title":"Quick Start","text":"<p>The JellyFaaS SDK simplifies working with the JellyFaaS API. It primarily provides a <code>Client</code> class which handles authentication and functions to simplify creating HTTP requests to the API.</p> <p>API Credits</p> <p>The cloud functions used in the examples below will not use your credits. Click here to get an api key.</p> <p>Below are some quick start examples you can plug and play into.</p> PythonJavaGoC#Node <p>Get started with this easy <code>python</code> file.</p> <p>main.py</p> <pre><code>from jellyfaas import Client, ClientConfig\n\n# Initialize the client config\nconfig = ClientConfig(\"&lt;JELLYFAAS_API_KEY&gt;\")\n\n# 1. Create Client, 2. lookup JellyFaaS function, 3. pass in query params and body, 4. invoke!\nclient, response = Client(config).lookup_function(\"helloworld\")\n                                 .set_request({\"name\": \"tim\"}, {\"order\": [\"ham\", \"jam\", \"spam\"]})\n                                 .invoke()\n\nprint(response)\n# Output: \"Hello, Tim. You ordered 'ham', 'jam', and 'spam'.\"\n</code></pre> <p> More Info - Verbose Example <p>The above code example demonstrates how the entire JellyFaaS function calling workflow can be condensed down into a succinct one-liner. Of course, you may prefer a more a clear and verbose approach. The following code example demonstrates how you can improve code-clarity by expanding out this process. <pre><code>import os\nimport logging\nimport jellyfaas\n\nlogging.basicConfig(level=logging.DEBUG) # When enabled, JellyFaaS logs at the DEBUG level\n\n# It is usually recommended to set up your API key as an environment variable.\napi_key = os.getenv(\"JELLYFAAS_API_KEY\")\n\n# Initialize the client config with debug logs enabled\nconfig = jellyfaas.ClientConfig(api_key=api_key, debug=True)\n\n# Initialize the client. \n# Once you have an authenticated Client, you can reuse it for multiple lookups/invocations.\nclient = jellyfaas.Client(config)\n\n# Lookup a function\nclient.lookup_function(\"helloworld\")\n\n# Set the request query params and JSON body (via a python dictionary)\n# Once you've done this once, you can call `invoke()` on the client as many times as you want.\nclient.set_request(\n    {\"name\": \"tim\"},                # Set query parameters\n    {\"order\": [\"ham\", \"jam\", \"spam\"]}) # Set request body\n\n# Finally, call the cloud function\n_, response = client.invoke()\n\nprint(response)\n# Output: \"Hello, Tim. You ordered 'ham', 'jam', and 'spam'.\"\n</code></pre> </p> <p>Try out this <code>java</code> example using the main, input, and output classes provided.</p> CodeInput ClassOutput Class <p>Main.java</p> <pre><code>package main;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport testSchemas.IbanOutputTest;\nimport testSchemas.IbanTest;\nimport v1.jellyfaas.exceptions.JellyFaasException;\nimport v1.jellyfaas.exceptions.JellyFaasFormatException;\nimport v1.jellyfaas.exceptions.JellyFaasHttpException;\n\npublic class Main {\n    public static void main(String[] args) throws JellyFaasException, JellyFaasHttpException, IllegalAccessException, JsonProcessingException, JellyFaasFormatException {\n        // setting the config object\n        String apiKey = System.getenv(\"API_KEY\");\n        Config config = new Config();\n        config.setApiKey(apiKey);\n\n        //creating the client object\n        Client client = new Client(config);\n        IbanTest ibanTest = new IbanTest();\n        ibanTest.addIban(\"FR1420041010050500013M02606\");\n\n        // invoking the object and putting the output into a new object\n        IbanOutputTest output = (IbanOutputTest) client.lookUp(\"ibanvalidation\").setRequest(null, ibanTest).setResponse(IbanOutputTest.class).invoke();\n    }\n}\n</code></pre> <p>Input.java</p> <pre><code>package main;\n\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport v1.jellyfaas.JellyFaasFunctionSchema;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class IbanTest extends JellyFaasFunctionSchema {\n    private List&lt;String&gt; ibans;\n\n    public IbanTest(){\n        this.ibans = new ArrayList&lt;&gt;();\n    }\n\n    public List&lt;String&gt; getIbans() {\n        return this.ibans;\n    }\n\n    public void setIbans(List&lt;String&gt; ibans) {\n        this.ibans = ibans;\n    }\n\n    public void addIban(String iban){\n        this.ibans.add(iban);\n    }\n}\n</code></pre> <p>Output.java</p> <pre><code>package main;\nimport v1.jellyfaas.JellyFaasFunctionSchema;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class IbanOutputTest extends JellyFaasFunctionSchema {\n    private String spanId;\n    private Data data;\n\n    // Getter and Setter for spanId\n    public String getSpanId() {\n        return spanId;\n    }\n\n    public void setSpanId(String spanId) {\n        this.spanId = spanId;\n    }\n\n    // Getter and Setter for Data\n    public Data getData() {\n        return data;\n    }\n\n    public void setData(Data data) {\n        this.data = data;\n    }\n\n    // Inner class Data\n    public static class Data {\n        private List&lt;String&gt; valid = new ArrayList&lt;&gt;();\n        private List&lt;String&gt; invalid = new ArrayList&lt;&gt;();\n        private int validCount = 0;\n        private int invalidCount = 0;\n        private int total = 0;\n\n        // Getters and Setters for valid\n        public List&lt;String&gt; getValid() {\n            return valid;\n        }\n\n        public void setValid(List&lt;String&gt; valid) {\n            this.valid = valid;\n        }\n\n        // Getters and Setters for invalid\n        public List&lt;String&gt; getInvalid() {\n            return invalid;\n        }\n\n        public void setInvalid(List&lt;String&gt; invalid) {\n            this.invalid = invalid;\n        }\n\n        // Getters and Setters for validCount\n        public int getValidCount() {\n            return validCount;\n        }\n\n        public void setValidCount(int validCount) {\n            this.validCount = validCount;\n        }\n\n        // Getters and Setters for invalidCount\n        public int getInvalidCount() {\n            return invalidCount;\n        }\n\n        public void setInvalidCount(int invalidCount) {\n            this.invalidCount = invalidCount;\n        }\n\n        // Getters and Setters for total\n        public int getTotal() {\n            return total;\n        }\n\n        public void setTotal(int total) {\n            this.total = total;\n        }\n    }\n}\n</code></pre> <p>Try out this <code>go</code> example using the main, input, and output files provided.</p> CodeInput StructOutput Struct <p>Main.go</p> <pre><code>\n</code></pre> <p>Input.go</p> <pre><code>\n</code></pre> <p>Output.go</p> <pre><code>\n</code></pre> <p>Try out this <code>C#</code> example using the main, input, and output classes provided.</p> CodeInput ClassOutput Class <p>Main.cs</p> <pre><code>\n</code></pre> <p>Input.cs</p> <pre><code>\n</code></pre> <p>Output.cs</p> <pre><code>\n</code></pre> <p>main.js</p> <p>Next Steps</p> <ul> <li>Get started with the SDKS</li> <li>Create your first function</li> <li>Get started with our cli tool</li> <li>Get your API key</li> </ul>"},{"location":"license/","title":"Main here things","text":"<p>This is a test</p>"},{"location":"license/#section-one","title":"Section One","text":"<p>jdkfjdkfjdk</p>"},{"location":"license/#section-two","title":"Section Two","text":"<p>fdjkfdkfdj</p>"},{"location":"license/#section-three","title":"Section Three","text":"<p>dfd</p>"},{"location":"sdks/sdk_guide/","title":"SDK Guide","text":"<p>The JellyFaaS SDK simplifies working with the JellyFaaS API. It provides a <code>Client</code> class which handles authentication and functions to simplify creating HTTP requests to the API. It also provides additional validation and checks of your requests, to prevent making invalid function calls, which would otherwise consume API credits.</p> <p>API Credits</p> <p>The cloud functions used in the examples below will not use your credits. Click here to get an api key.</p> <p>Here is a walk through using the <code>Hello World</code> function.</p>"},{"location":"sdks/sdk_guide/#1-creating-a-config-object","title":"1. Creating a Config object","text":"<p>The first step is to create your config object and parse your JellyFaaS api key into it. The config handles keys and authorisation.</p> PythonJavaGoC#Node <pre><code>import os\nfrom jellyfaas import ClientConfig\n\napi_key = os.getenv(\"JELLYFAAS_API_KEY\")\n\nif api_key is None:\nraise ValueError(\"API key is not set in environment variables\")\n\nconfig = ClientConfig(api_key=api_key, debug=True)\n</code></pre> <pre><code>Config config = new Config();\nconfig.setApiKey(\"JELLYFAAS_API_KEY\");\n</code></pre> <pre><code>config := JellyConfig{\n    ApiKey: \"JELLYFAAS_API_KEY\",\n}\n</code></pre> <pre><code>JellyConfig config = new JellyConfig(\"JELLYFAAS_API_KEY\");\n</code></pre> <pre><code>\n</code></pre>"},{"location":"sdks/sdk_guide/#2-creating-the-client","title":"2. Creating the Client","text":"<p>After that, you can create the client, and parse the newly created 'config' object into it:</p> PythonJavaGoC#Node <pre><code>from jellyfaas import Client\n\n# initilize config object here \n\nclient = Client(config)\n</code></pre> <pre><code>Client client = new Client(config);\n</code></pre> <pre><code>c := NewClient(config)\n</code></pre> <pre><code>JellyClient client = new JellyClient(config);\n</code></pre> <pre><code>\n</code></pre>"},{"location":"sdks/sdk_guide/#3-looking-up-a-function","title":"3. Looking up a function","text":"<p>To look up a function, you must use the function's short name to find it.  Provided all the previous steps are complete, add the following:</p> PythonJavaGoC#Node <pre><code>client.lookup_function(\"helloworld\")\n</code></pre> <pre><code>client.lookUp(\"helloworld\");\n</code></pre> <pre><code>\n</code></pre> <pre><code>client.Lookup(\"helloworld\");\n</code></pre> <pre><code>\n</code></pre>"},{"location":"sdks/sdk_guide/#4-setting-the-request","title":"4. Setting the request","text":"<p>Once you've called 'lookup' on your client object, you can now set your request. If a function takes no query parameters and/or no input body, the setRequest parameters can be 'nil' respectively. This dependent on the function, so check the functions requirements if you aren't sure.</p> PythonJavaGoC#Node <pre><code>client.set_request(queryParams, requestBody)\n</code></pre> <pre><code>client.setRequest(queryParams, requestBody);\n</code></pre> <pre><code>\n</code></pre> <pre><code>client.SetRequest(queryParams, requestBody)\n</code></pre> <pre><code>\n</code></pre> <p>Note</p> <p><code>queryParams</code> and <code>requestBody</code> are placeholders for the following steps below</p>"},{"location":"sdks/sdk_guide/#41-setting-query-parameters","title":"4.1 Setting query parameters","text":"<p>The <code>helloworld</code> function requires two query parameters: <code>firstname</code> and <code>lastname</code>. You can set them as follows:</p> PythonJavaGoC#Node <pre><code>query_params={\n    \"firstname\": \"foo\",\n    \"lastname\": \"bar\"\n}\n</code></pre> <p>Creating query parameters is done by creating a <code>Map&lt;String, String&gt;</code> - where the key value pairs are the query parameter name and its value respectively.</p> <pre><code>Map&lt;String, String&gt; queryParams = new HashMap&lt;&gt;();\nqueryParams.put(\"firstname\", \"foo\");\nqueryParams.put(\"lastname\", \"bar\");\n</code></pre> <pre><code>\n</code></pre> <pre><code>var parameters = new Dictionary&lt;string, string&gt;() {\n    {\"firstname\", \"foo\"},\n    {\"lastname\", \"bar\"}\n};\n</code></pre> <pre><code>\n</code></pre>"},{"location":"sdks/sdk_guide/#42-setting-the-body","title":"4.2 Setting the body","text":"<p>The website will contain an autogenerated input object (depending on the language this could be a class, a struct, dict, etc) for you to copy/paste into your project. For this example we are using the <code>HellWorld</code> input and output objects. Populate this struct and parse it in with the following:</p> PythonJavaGoC#Node <p>For python, the request body can either be set using a dictionary, </p> DictionaryClass Instance <pre><code>request_body = {\n\"message\": \"JellyFaaS is cool\",\n\"rating\": 5.0\n}\n</code></pre> <pre><code>class Review:\n    def __init__(message, rating):\n        self.message = message\n        self.rating = rating\n\nrequest_body = Review(\"JellyFaaS is cool\", 5.0)\n</code></pre> <p>Using the function's autogenerated input class from the website, you can add the following: <pre><code>SomeInputClass requestBody = new SomeInputClass();\nrequestBody.setSomeAttribute(\"foobar\");\n</code></pre></p> <p>Warning</p> <p>Sometimes the package might be incorrect on the auto-generated classes on the website.  The default package for all generated classes is <code>main</code> but you may need to change this.</p> <pre><code>\n</code></pre> <pre><code>SomeInputClass requestBody = new SomeInputClass();\nrequestBody.SetSomeAttribute(\"foobar\");\n</code></pre> <pre><code>\n</code></pre>"},{"location":"sdks/sdk_guide/#5-setting-the-response","title":"5. Setting the response","text":"<p>The SDK allows you to automatically map the response JSON to a specified class.  This is useful for managing complex responses. The website will contain an autogenerated output <code>object</code> that you can copy/paste into your project. Again this is language dependent so these objects will be different.</p> PythonJavaGoC#Node <pre><code>class MyResponse:\n    def __init__(self):\n        self.message = None\n        self.status = None\n\nclient.set_response(MyResponse)\n</code></pre> <pre><code>client.setResponse(someOutput.class);\n</code></pre> <p>Aforementioned, you must use the autogenerated output class and add this to your project. You don't need an instance of this as <code>invoke</code> will return the same type as the output class.</p> <pre><code>\n</code></pre> <p>Warning</p> <p><code>setRequest()</code> is not defined in <code>C#</code> SDK.  Instead, <code>Invoke()</code> takes a generic type for the auto-generated class. See section 6. Invoke for an example</p> <pre><code>\n</code></pre>"},{"location":"sdks/sdk_guide/#6-invoking-the-function","title":"6. Invoking the function","text":"<p>You are ready to call your function! Simply call <code>invoke()</code> and your function will be called.</p> PythonJavaGoC#Node <pre><code>client, result = (\n    jellyfaas.Client(config)\n        .lookup_function(\"helloworld\")\n        .set_request(query_params=query_params, request_body_instance=request_body)\n        .invoke()\n)\n</code></pre> <p>Info</p> <p>Python's <code>invoke</code> will either return a new dictionary if <code>set_response</code> was not called, or if <code>set_response</code> was called, invoke will return an object of the class give in <code>set_response</code>.</p> <pre><code>OutputClass myOutput = (OutputClass) client.lookUp(\"helloworld\").setRequest(params, body).setResponse(someOutput.class).invoke();\n</code></pre> <pre><code>\n</code></pre> <pre><code>SomeOutput output = client.Lookup(\"joesjokes\").SetRequest(params, body).Invoke&lt;SomeOutput&gt;();\n</code></pre> <p>Note</p> <p><code>Invoke</code> takes a <code>&lt;generic&gt;</code> type, therefore, it's return type is inferred from this. This is why the <code>C#</code> SDK doesn't have the <code>setResponse()</code> method.</p> <pre><code>\n</code></pre>"},{"location":"sdks/sdk_guide/#error-handling","title":"Error Handling","text":"<p>The JellyFaaS SDK provides custom exceptions for different error scenarios. Below is a description of each error type and where to expect it to be thrown for each SDK:</p> PythonJavaGoC#Node <ol> <li> <p><code>jellyfaas.AuthenticationFailedException</code></p> <p>Thrown when your credentials cannot be verfied during config object creation.</p> </li> <li> <p><code>jellyfaas.FunctionLookupException</code> </p> <p>Occurs during the function look up stage.  This could be due to the function not exisiting</p> </li> <li> <p><code>jellyfaas.SetRequestException</code></p> <p>This can be down to the query parameters being incorrect and therefore not lining up with the function's query parameter schema. Or, this can be due to the input body not matching the functions input schema.</p> </li> <li> <p><code>jellyfaas.InvocationException</code></p> </li> </ol> <ol> <li> <p><code>v1.jellyfaas.exceptions.JellyFaasException</code></p> <p>This is a general error that can be thrown during the process of calling out to a function</p> </li> <li> <p><code>v1.jellyfaas.exceptions.JellyFaasFormatException</code> </p> <p>This error is thrown when there are issues with your request body and request parameters. This is usually due to errors with the schema not matching these inputs </p> </li> <li> <p><code>v1.jellyfaas.exceptions.JellyFaasHttpException</code></p> <p>Occurs during any failures with calling out to the function or setting your authorsiation JWT.</p> </li> </ol>"},{"location":"sdks/sdk_guide/#debug-mode","title":"Debug mode","text":"<p>If you want a more verbose output from the SDK, you set the SDK to be in debug mode with the following:</p> PythonJavaGoC#Node <p>Both <code>ClientConfig</code> and <code>Client</code> classes utilize Python's built-in logging module. Ensure that your application is configured to capture these logs:</p> <pre><code>import logging\n\nlogging.basicConfig(level=logging.DEBUG)\n</code></pre> <p>This is toggled by calling <code>debug</code> on the client and setting a boolean:</p> <pre><code>// dubugging enabled\nclient.debug(true);\n\n// debugging disabled\nclient.debug(false);\n</code></pre> <pre><code>\n</code></pre> <pre><code>var loggerFactory = LoggerFactory.Create((builder) =&gt; builder.AddConsole());\nvar logger = loggerFactory.CreateLogger(\"Jellyfaas\");\n\nJellyClient client = new JellyClient(new JellyConfig(\"JELLYFAAS_API_KEY\", logger, true));\n</code></pre> <p>Note</p> <p>Other logging librarys can be used and parsed into the config object.</p> <pre><code>\n</code></pre>"},{"location":"sdks/sdk_guide/#complete-code","title":"Complete Code","text":"PythonJavaGoC#Node <p>Example</p> <pre><code>import os\nimport logging\nimport jellyfaas\n\nlogging.basicConfig(level=logging.DEBUG) # When enabled, JellyFaaS logs at the DEBUG level\n\napi_key = os.getenv(\"JELLYFAAS_API_KEY\")\n\nquery_params = {\n\"firstname\": \"John\",\n\"lastname\": \"Doe\"\n}\n\nrequest_body = {\n\"message\": \"JellyFaaS is cool\",\n\"rating\": 5.0\n}\n\ntry:\nconfig = jellyfaas.ClientConfig(api_key=api_key, debug=True)\nclient, result = (\njellyfaas.Client(config)\n.lookup_function(\"helloworld\")\n.set_request(query_params, request_body)\n.invoke()\n)\nprint(result)\n\nexcept jellyfaas.AuthenticationFailedException as e:\nprint(f\"Authentication failed: {e}\")\nexcept jellyfaas.FunctionLookupException as e:\nprint(f\"Function lookup failed: {e}\")\nexcept jellyfaas.SetRequestException as e:\nprint(f\"Setting request failed: {e}\")\nexcept jellyfaas.InvocationException as e:\nprint(f\"Function invocation failed: {e}\")\n</code></pre> <p>Example</p> <pre><code>// creating a config object\nConfig config = new Config();\nconfig.setApiKey(\"JELLYFAAS_API_KEY\");\n\n// setting the client\nClient client = new Client(config);\n\n// setting the query parameters\nMap&lt;String, String&gt; parameters = new HashMap&lt;&gt;();\nqueryParams.put(\"queryParam\", \"foobar\");\n\n// setting an input object\nSomeInputClass requestBody = new SomeInputClass();\nrequestBody.setSomeAttribute(\"foobar\");\n\n// invoking\nSomeOutputClass myOutput = (SomeOutputClass) client.lookUp(\"helloworld\").setRequest(parameters, requestBody).setResponse(SomeOutputClass.class).invoke();\n</code></pre> <p>Example</p> <pre><code>\n</code></pre> <p>Example</p> <pre><code>// Creating a config object\nJellyConfig config = new JellyConfig(\"JELLYFAAS_API_KEY\")\n\n//  Creating a client\nJellyClient client = new JellyClient(config);\n\n// setting an input object\nSomeInputClass requestBody = new SomeInputClass();\nrequestBody.setSomeAttribute(\"foobar\");\n\nvar parameters = new Dictionary&lt;string, string&gt;() { { \"foo\", \"bar\" } };  //  Dictionary of query parameters\n\n// Invoking the function and getting the response\nSomeOutputClass output = client.Lookup(\"joesjokes\").SetRequest(parameters, requestBody).Invoke&lt;SomeOutputClass&gt;();\n</code></pre> <p>Example</p> <pre><code>\n</code></pre> <p>Next Steps</p> <ul> <li>Create your first function</li> <li>Get started with our cli tool</li> <li>Get your API key</li> </ul>"},{"location":"v1_reference/python/python_home/","title":"Python v1 reference","text":"<p>This is the Python v1 reference guide.  Please see the table of contents below:</p>"},{"location":"v1_reference/python/python_home/#jellyfaas","title":"<code>./jellyfaas</code>","text":"<ul> <li> <p>class ClientConfig </p> </li> <li> <p>class Client </p> </li> <li> <p>class JellyFaasException(Exception) </p> </li> <li> <p>class AuthenticationFailedException(JellyFaasException) </p> </li> <li> <p>class FunctionLookupException(JellyFaasException) </p> </li> <li> <p>class SetRequestException(JellyFaasException) </p> </li> </ul>"},{"location":"v1_reference/python/jellyfaas/class_authenticationfailedexception_jellyfaasexception/","title":"<code>class AuthenticationFailedException(JellyFaasException)</code>","text":"<p>Warning</p> <p>This project is under active development</p> <p>Found a problem? Report it here.</p> <p>This is the documentation page for <code>class AuthenticationFailedException(JellyFaasException)</code>.</p> <pre><code>Raised when authentication fails.\n</code></pre>"},{"location":"v1_reference/python/jellyfaas/class_authenticationfailedexception_jellyfaasexception/#methods","title":"Methods","text":"<p>This Class has no methods.</p>"},{"location":"v1_reference/python/jellyfaas/class_client/","title":"<code>class Client</code>","text":"<p>Warning</p> <p>This project is under active development</p> <p>Found a problem? Report it here.</p> <p>This is the documentation page for <code>class Client</code>.</p> <p>A client for interacting with the JellyFAAS API. It is not recommended to access attributes of this class directly; instead, use \"public\" class functions as per the documentation.</p> <p>Attributes:</p> <p><code>_api_key (str)</code>: The API key used for authentication.</p> <p><code>_token (str)</code>: The authentication token.</p> <p><code>_token_expiry (str)</code>: The expiration time for the token.</p> <p><code>_version (str)</code>: The version of the function to lookup.</p> <p><code>_size (str)</code>: The size of the function to lookup.</p> <p><code>_response (Any)</code>: The response from the invoked function.</p> <p><code>_response_type (Any)</code>: The type of the response for transformation.</p>"},{"location":"v1_reference/python/jellyfaas/class_client/#methods","title":"Methods","text":"<p><code>__init__</code></p> <p><code>lookup_function</code></p> <p><code>invoke</code></p> <p><code>debug</code></p> <p><code>set_debug_mode</code></p> <p><code>__validate</code></p> <p><code>__validate_property</code></p> <p><code>__validate_array</code></p> <p><code>set_response</code></p>"},{"location":"v1_reference/python/jellyfaas/class_client/#init","title":"init","text":"<pre><code>def __init__(self, config: ClientConfig) -&gt; None\n</code></pre> <p>Initializes and authenticates the Client with the provided config object.</p> <p>Args:</p> <p><code>config (ClientConfig)</code>: A JellyFAAS Client config object.</p> <p>Raises:</p> <p><code>AuthenticationFailedException</code>: If authentication fails.</p>"},{"location":"v1_reference/python/jellyfaas/class_client/#lookup_function","title":"lookup_function","text":"<pre><code>def lookup_function(self, function_id: str) -&gt; 'Client'\n</code></pre> <p>Lookup a function by its ID.</p> <p>Args:</p> <p><code>function_id (str)</code>: The ID of the function to look up.</p> <p>Returns:</p> <p><code>Client</code>: The current client instance.</p> <p>Raises:</p> <p><code>FunctionLookupException</code>: If the function lookup fails.</p>"},{"location":"v1_reference/python/jellyfaas/class_client/#invoke","title":"invoke","text":"<pre><code>def invoke(self)\n</code></pre> <p>Invoke the function with the set parameters and body.</p> <p>Returns:</p> <p><code>tuple</code>: A tuple of the client instance and the response JSON if successful, otherwise raises an exception.</p> <p>Raises:</p> <p><code>InvocationException</code>: If invoking the function fails.</p>"},{"location":"v1_reference/python/jellyfaas/class_client/#debug","title":"debug","text":"<pre><code>def debug(self, msg)\n</code></pre> <p>Log a debug message.</p> <p>Args:</p> <p><code>msg (str)</code>: The message to log.</p>"},{"location":"v1_reference/python/jellyfaas/class_client/#set_debug_mode","title":"set_debug_mode","text":"<pre><code>def set_debug_mode(self, do_debug: bool)\n</code></pre> <p>No Content</p>"},{"location":"v1_reference/python/jellyfaas/class_client/#__validate","title":"__validate","text":"<pre><code>def __validate(self, schema, data)\n</code></pre> <p>Validate the given data against the provided schema.</p> <p>Args:</p> <p><code>schema (dict)</code>: The schema to validate against.</p> <p><code>data (dict)</code>: The data to validate.</p> <p>Returns:</p> <p><code>tuple</code>: A tuple containing a boolean indicating success and a message.</p> <p>Raises:</p> <p><code>ValueError</code>: If validation fails.</p>"},{"location":"v1_reference/python/jellyfaas/class_client/#__validate_property","title":"__validate_property","text":"<pre><code>def __validate_property(prop_schema, value, path)\n</code></pre> <p>No Content</p>"},{"location":"v1_reference/python/jellyfaas/class_client/#__validate_array","title":"__validate_array","text":"<pre><code>def __validate_array(array_schema, data, path)\n</code></pre> <p>No Content</p>"},{"location":"v1_reference/python/jellyfaas/class_client/#set_response","title":"set_response","text":"<pre><code>def set_response(self, type: Any) -&gt; 'Client'\n</code></pre> <p>Set the response type for transforming the response JSON.</p> <p>Args:</p> <p><code>type (Any)</code>: The class type to transform the response into.</p> <p>Returns:</p> <p><code>Client</code>: The current client instance.</p>"},{"location":"v1_reference/python/jellyfaas/class_clientconfig/","title":"<code>class ClientConfig</code>","text":"<p>Warning</p> <p>This project is under active development</p> <p>Found a problem? Report it here.</p> <p>This is the documentation page for <code>class ClientConfig</code>.</p>"},{"location":"v1_reference/python/jellyfaas/class_clientconfig/#methods","title":"Methods","text":"<p><code>__init__</code></p> <p><code>__auth</code></p> <p><code>debug</code></p>"},{"location":"v1_reference/python/jellyfaas/class_clientconfig/#init","title":"init","text":"<pre><code>def __init__(self, api_key: str, debug=False) -&gt; None\n</code></pre> <p>No Content</p>"},{"location":"v1_reference/python/jellyfaas/class_clientconfig/#__auth","title":"__auth","text":"<pre><code>def __auth(self, api_key=None)\n</code></pre> <p>Authenticate with the JellyFAAS API using the provided API key.</p> <p>Args:</p> <p><code>api_key (str)</code>: The API key for JellyFAAS.</p> <p>Raises:</p> <p><code>AuthenticationFailedException</code>: If authentication fails.</p>"},{"location":"v1_reference/python/jellyfaas/class_clientconfig/#debug","title":"debug","text":"<pre><code>def debug(self, msg)\n</code></pre> <p>Log a debug message.</p> <p>Args:</p> <p><code>msg (str)</code>: The message to log.</p>"},{"location":"v1_reference/python/jellyfaas/class_functionlookupexception_jellyfaasexception/","title":"<code>class FunctionLookupException(JellyFaasException)</code>","text":"<p>Warning</p> <p>This project is under active development</p> <p>Found a problem? Report it here.</p> <p>This is the documentation page for <code>class FunctionLookupException(JellyFaasException)</code>.</p> <pre><code>Raised when there is an issue looking up a function.\n</code></pre>"},{"location":"v1_reference/python/jellyfaas/class_functionlookupexception_jellyfaasexception/#methods","title":"Methods","text":"<p>This Class has no methods.</p>"},{"location":"v1_reference/python/jellyfaas/class_jellyfaasexception_exception/","title":"<code>class JellyFaasException(Exception)</code>","text":"<p>Warning</p> <p>This project is under active development</p> <p>Found a problem? Report it here.</p> <p>This is the documentation page for <code>class JellyFaasException(Exception)</code>.</p> <pre><code>Base class for exceptions in the JellyFaas library.\n</code></pre>"},{"location":"v1_reference/python/jellyfaas/class_jellyfaasexception_exception/#methods","title":"Methods","text":"<p>This Class has no methods.</p>"},{"location":"v1_reference/python/jellyfaas/class_setrequestexception_jellyfaasexception/","title":"<code>class SetRequestException(JellyFaasException)</code>","text":"<p>Warning</p> <p>This project is under active development</p> <p>Found a problem? Report it here.</p> <p>This is the documentation page for <code>class SetRequestException(JellyFaasException)</code>.</p> <pre><code>Raised when there is an issue setting request parameters for a function.\n</code></pre>"},{"location":"v1_reference/python/jellyfaas/class_setrequestexception_jellyfaasexception/#methods","title":"Methods","text":"<p>This Class has no methods.</p>"}]}