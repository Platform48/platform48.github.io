{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the JellyFaaS Documentation","text":"<p>Welcome to the official documentation of JellyFaaS, an innovative platform offering AI-ready cloud functions, tools, and SDKs. It empowers developers to accelerate workflows, reduce time-to-market, minimize technical debt, and lower infrastructure costs.</p> <p>First Steps</p> <p>If you are new to this documentation, we recommend beginning with the Intro and Calling Your First Function guides.</p>"},{"location":"#introduction","title":"Introduction","text":"Intro to JellyFaaS <p>Cover the underlying concepts and background knowledge to maximmize your use of JellyFaaS.</p> Calling Your First Function <p>Get started using JellyFaaS immediately, without getting bogged down in the details.</p>"},{"location":"#tools","title":"Tools","text":"CLI <p>Install the JellyFaaS CLI tool for Windows, macOS, and Linux.</p> SDK <p>Setup the JellyFaaS SDKs for a variety of languages including NodeJS, Python, and Go.</p>"},{"location":"#guides","title":"Guides","text":"Deploy a Function <p>Learn how to develop and deploy your own JellyFaaS function from scratch.</p> Get Started with AI <p>Use JellyFaaS functions or your own data to augment LLMs with live, contextual awareness and actions.</p> SDK Overview <p>Learn the basics of the JellyFaaS SDK.</p>"},{"location":"calling_first_function/","title":"Calling Your First Function","text":"<p>For this tutorial we are going to use the function <code>Suggest Movie</code>, which takes a two query params <code>rating</code> and <code>score</code> and returns a random movie that will satifiy the critea.</p> <p>Note: this is mock service, used only for testing and tutorials, it also does not count towards credit usuage at all.</p> <p>The information on the function, via the function libray here.</p> <p>Information</p> <p>You can copy the complete url from the <code>Parameters</code> tab, all the required information for each</p> <p>For this example we are going request a 15 rated film, with a score over 5.3</p>"},{"location":"calling_first_function/#invoking-the-function","title":"Invoking the function","text":"<p>To call this function using curl (or import into tool like postman) as follows:</p> <pre><code>curl --location 'https://api.jellyfaas.com/suggestmovie-cn16g6rdervlrpsg3sr0-4-s?rating=PG&amp;score=5.5' \\\n--header 'jfwt: &lt;token&gt;'\n</code></pre> <p>Imported into Postman:</p> <p></p>"},{"location":"calling_first_function/#output","title":"Output","text":"<p>You should see (from curl) a film and the relevenat information, you may get a different film:</p> <pre><code>{\"Title\":\"Inception\",\"Rating\":\"12A\",\"ReviewScore\":8.8}\n</code></pre> <p>or from Postman:</p> <p></p> <p>Congratulations, you just called your first function! Now look at the next tutorials, or play around with other functions!</p>"},{"location":"calling_first_function/#help-it-didnt-work","title":"Help, it didn't work","text":"<ul> <li>First check the REST verb you are using is a <code>GET</code>, for this function it cannot be a <code>POST</code> <code>PUT</code> or <code>DELETE</code>.</li> <li>Check you have pasted or typed in the correct api endpoint from here.</li> <li>Is the jwt token correct, do you have any spaces in the header, and this should be a <code>header</code> not a <code>query param</code>.</li> </ul> <p>If you still cannot get it working, please reach out via discord, email or support in the links below!</p>"},{"location":"calling_first_function/#next-steps","title":"Next steps","text":"<p>Next try calling with the SDK here</p>"},{"location":"examples/","title":"Examples","text":"<p>The SDKs are a very powerful tool. As seen in the quick start guide, you can call functions that require file/json inputs and outputs.</p> <p>Info</p> <p>Naturally, you are able to combine these and use a JSON input and a FILE output if the function permits that behaviour.</p>"},{"location":"examples/#handling-files","title":"Handling Files","text":"PythonJavaGoC#Node <p>File input and output example.</p> File InputFile Output <p>Example</p> <p>Example</p> <p>File input and output example.</p> File InputFile Output <p>Example</p> <pre><code>File file = new File(\"path/to/file\");\nclient.lookUp(\"example\").setRequest(parameters, file).setResponse(null).invoke();\n</code></pre> <p>Create a file object and parse that file into <code>setRequest()</code> </p> <p>Example</p> <pre><code>ByteArrayOutputStream stream = (ByteArrayOutputStream) client.lookUp(\"example\").setRequest(params, null).setResponse(ByteArrayOutputStream.class).invoke();\n\ntry (OutputStream outputStream = new FileOutputStream(\"output\")) {\n    // Write the byte array to the file\n    outputStream.write(stream.toByteArray());\n\n    System.out.println(\"File written successfully.\");\n} catch (IOException e) {\n    e.printStackTrace();\n}\n</code></pre> <p>Set <code>setResponse()</code> to be a <code>byte[].class</code>, you can then use this to populate a file.</p> <p>File input and output example.</p> File InputFile Output <p>Example</p> <pre><code>\n</code></pre> <p>Example</p> <pre><code>\n</code></pre> <p>File input and output example.    </p> File InputFile Output <p>Example</p> <pre><code>\n</code></pre> <p>Example</p> <pre><code>\n</code></pre> <p>File input and output example.</p> File InputFile Output <p>Example</p> <pre><code>\n</code></pre> <p>Example</p> <pre><code>\n</code></pre>"},{"location":"examples/#handling-json","title":"Handling JSON","text":"PythonJavaGoC#Node <p>JSON input and output example.    </p> JSON InputJSON Output <p>Example</p> <p>Example</p> <p>JSON input and output example.</p> JSON InputJSON Output <p>Example</p> <pre><code>SomeInputClass requestBody = new SomeInputClass();\nrequestBody.setSomeAttribute(\"foobar\");\n\nclient.lookUp(\"example\").setRequest(parameters, requestBody).setResponse(null).invoke();\n</code></pre> <p>Example</p> <pre><code>SomeOutputClass myOutput = (SomeOutputClass) client.lookUp(\"example\").setRequest(parameters, null).setResponse(SomeOutputClass.class).invoke();\n</code></pre> <p>JSON input and output example.</p> JSON InputJSON Output <p>Example</p> <pre><code>\n</code></pre> <p>Example</p> <pre><code>\n</code></pre> <p>JSON input and output example.</p> JSON InputJSON Output <p>Example</p> <pre><code>\n</code></pre> <p>Example</p> <pre><code>\n</code></pre> <p>JSON input and output example.</p> JSON InputJSON Output <p>Example</p> <pre><code>\n</code></pre> <p>Example</p> <pre><code>\n</code></pre>"},{"location":"examples/#live-functions","title":"Live Functions","text":"<p>Quote</p> <p>This is nice and all handling input and output data, but why's this useful and what can I call?</p> <p>Good question! Here's a hand-picked list of live functions you can call out to. This is where the true potential of JellyFaaS is unlocked as you now have access to functionality that isn't always supported in your language. If you are working on a project that doesn't support a particular library, or needs to be lightweight. You now have access to anything that's possible in a different language, alongside the benefit of it being hosted in the cloud - making your projects lightweight and effective.</p> <p>API Credits</p> <p>The cloud functions used in the examples below will use your credits. Click here to get an api key.</p>"},{"location":"examples/#1","title":"1.","text":"<p>Example</p> PythonJavaGoC#Node Input SchemaOutput Schema Input SchemaOutput Schema Input SchemaOutput Schema Input SchemaOutput Schema Input SchemaOutput Schema"},{"location":"examples/#2","title":"2.","text":"<p>Example</p> PythonJavaGoC#Node Input SchemaOutput Schema Input SchemaOutput Schema Input SchemaOutput Schema Input SchemaOutput Schema Input SchemaOutput Schema"},{"location":"examples/#3","title":"3.","text":"<p>Example</p> PythonJavaGoC#Node Input SchemaOutput Schema Input SchemaOutput Schema Input SchemaOutput Schema Input SchemaOutput Schema Input SchemaOutput Schema"},{"location":"intro/","title":"What is JellyFaaS","text":"<p>JellyFaaS is an innovative platform offering AI-ready cloud functions, tools, and SDKs. It empowers developers to accelerate workflows, reduce time-to-market, minimize technical debt, and lower infrastructure costs.</p>"},{"location":"intro/#key-components-of-jellyfaas","title":"Key Components of JellyFaaS","text":"<p>JellyFaaS is built on three foundational pillars:</p> <ul> <li> <p> Cloud Functions</p> <p>Deploy and use community-driven cloud functions. Functions are hosted, scaled, and managed automatically by JellyFaaS.  </p> <p>Supported languages include Python, Node.js, Go, and more.</p> </li> <li> <p> AI Framework </p> <p>Integrate live, contextual capabilities into large language models (LLMs) like GPT. Use JellyFaaS to enhance LLMs with custom datasets or enable real-world actions.</p> </li> <li> <p> Tools and SDKs </p> <p>Streamline development with the JellyFaaS CLI and SDKs. Write, deploy, and integrate with ease across supported programming languages.</p> </li> </ul>"},{"location":"intro/#how-does-jellyfaas-work","title":"How does JellyFaaS work?","text":""},{"location":"intro/#functions","title":"Functions","text":"<p>At the heart of JellyFaaS is the concept of stateless functions, small web services designed to handle specific tasks. Functions are:</p> <ul> <li>Language-Agnostic: Write in Node.js, Python, Go, C#, Java, Ruby, PHP, or more.</li> <li>Auto-Scaling: Functions automatically scale based on demand.</li> <li>Easy to Deploy: Use the JellyFaaS CLI or REST API to deploy functions efficiently.</li> </ul>"},{"location":"intro/#deployment-workflow","title":"Deployment Workflow","text":"<p>Deploying a function involves:</p> <ul> <li>Writing the function code and its specification file.</li> <li>Deploying the function using the CLI or REST API, which validates and containerizes it.</li> <li>Accessing the function through the JellyFaaS SDK or REST API.</li> </ul> <p>Functions can be deployed via the JellyFaaS REST API, but it is recommended to use the CLI tool to streamline this process. A simple specification file defines the function's usage, both acting as documentation and enabling AI integration. Behind the scenes, deploying a funciton performs validation of your specification, containerizes the app, </p> <p>After deployment, functions can invoked via the JellyFaaS REST API or SDKs, regardless of the language the function was written in.  For example, a function written in Ruby could be invoked by a client via the NodeJS SDK.</p> <ul> <li>JellyFaaS Function Architecture <pre><code>graph LR\n    subgraph Inputs[\"Function Source\"]\n        direction LR\n        Code[\"Source Code\"]\n        SpecFile[\"Specification File\"]\n    end\n\n    subgraph JellyFaaS[\"JellyFaaS Function Library\"]\n        direction LR\n        Func[\"ExampleFunc1\"]\n        Func2[\"ExampleFunc2\"]\n        Func3[\"ExampleFunc3\"]\n    end\n\n    Inputs --&gt; | Deploy via CLI | JellyFaaS --&gt; | Invoke via SDK | Client[\"Client\"]\n</code></pre></li> </ul>"},{"location":"intro/#ai-function-calling","title":"AI Function Calling","text":"<p>JellyFaaS specification files define function signatures in a way that allows seamless integration with LLMs such as GPT and Gemini. These specifications serve as both documentation and an interface for AI to invoke functions dynamically.</p> <ul> <li> <p>AI Function Calling Flow</p> <p><ol> <li>The client sends a prompt to the AI via JellyFaaS.</li> <li>Based on the prompt, the AI decides to invoke a relevant function.</li> <li>The function processes the task and sends the result back to the AI.</li> <li>The AI integrates the function output into its final response.</li> </ol></p> <pre><code>graph LR\n    subgraph Request[\"Client Request\"]\n        direction LR\n        Prompt[\"`**Prompt**\n        *e.g. what's the weather in boston today?*`\"]\n        Function[\"`**Function ID**\n        *e.g. LiveWeatherFunc*`\"]\n    end\n    subgraph JellyFaaS[\"JellyFaaS Function Library\"]\n        direction LR\n        Func4[\"LiveWeatherFunc\"]\n    end\n    Request --&gt; | **1** - Request via SDK | JellyFaaSAI[\"JellyFaaS AI\"] --&gt; | **2** - Invoking function | Func4 --&gt; | **3** - Function response | JellyFaaSAI --&gt; | **4** - AI response | Request\n</code></pre> </li> </ul> <p>Learn More</p> <p>See Tutorial for a tutorial on using this feature.</p>"},{"location":"intro/#ai-document-embedding","title":"AI Document Embedding","text":"<p>JellyFaaS allows you to upload documents to provide additional context to AI prompts. This feature enables better, more relevant responses based on your specific data.</p> <ul> <li> <p>Step 1: Upload Documents</p> <p>Use the JellyFaaS SDK or REST API to upload documents and associate them with a specific database.</p> <pre><code>graph LR\n    subgraph Upload[\"Client Document Upload\"]\n        direction LR\n        Document[\"`**Documents**\n        *e.g. CompanyPolicies.pdf*`\"]\n        Function[\"`**DestDatabaseID**\n        *e.g. MyCompanyPolicies*`\"]\n    end\n\n    subgraph JFDB[\"JellyFaaS AI Storage\"]\n        db[(MyCompanyPolicies)]\n    end\n\n    Upload --&gt; | **1** - Upload via SDK or REST | JellyFaaSAI[\"JellyFaaS AI\"] --&gt; | **2** - Embeds and stores | db\n\n</code></pre> </li> </ul> <ul> <li> <p>Step 2: Query Using Documents</p> <p>Retrieve context from the stored database during AI queries.</p> <pre><code>graph LR\n    subgraph JFDB[\"JellyFaaS AI Storage\"]\n        db[(MyCompanyPolicies)]\n    end\n\n    subgraph Request[\"Client Request\"]\n        direction LR\n        Prompt[\"`**Prompt**\n        *e.g. List all policies relating to...*`\"]\n        DatabaseID[\"`**DatabaseID**\n        *e.g. MyCompanyPolicies*`\"]\n    end\n\n    Request --&gt; |**1** - Request via SDK|JellyFaaSAI --&gt; |**2** - Retrieve context| db --&gt; | **3** - DB response| JellyFaaSAI --&gt; | **4** - AI response | Request\n\n</code></pre> </li> </ul> <p>Learn More</p> <p>See Tutorial for a tutorial on using this feature.</p>"},{"location":"intro/#ai-sql-integration","title":"AI SQL Integration","text":"<p>JellyFaaS connects directly to your SQL databases, enabling LLMs to perform complex queries seamlessly.</p> <ul> <li>AI SQL Integration Flow <ol> <li>The client specifies a prompt and database connection details.</li> <li>The AI translates the natural language prompt into an SQL query, executes it, and retrieves results.</li> <li>Response Generation: Results are formatted into a comprehensive AI response.</li> </ol> <pre><code>graph LR\n    subgraph JFDB[\"Client's SQL DB\"]\n        db[(MySalesDataDB)]\n    end\n\n    subgraph Request[\"Client Request\"]\n        direction LR\n        Prompt[\"`**Prompt**\n        *e.g. Fetch 2024 top 5 products by total revenue...*`\"]\n        DatabaseID[\"`**SQL DB Connection**\n        *e.g. MySalesDataDB*`\"]\n    end\n\n    Request --&gt; |**1** - Request via SDK|JellyFaaSAI --&gt; |**2a** - Retrieve context| db --&gt; | **2b** - DB response| JellyFaaSAI --&gt; | **3** - AI response | Request    \n</code></pre></li> </ul> <p>Learn More</p> <p>See Tutorial for a tutorial on using this feature.</p>"},{"location":"intro/#why-choose-jellyfaas","title":"Why Choose JellyFaaS","text":"<p>JellyFaaS makes development easier by providing scalable cloud functions, AI-ready integrations, and productivity tools. Be it deploying ready-to-use functions, enhancing AI with your custom data, or reducing infrastructure overhead, JellyFaaS empowers you to build smarter, faster, and more efficiently.</p> <p>Next Steps</p> <ul> <li>Get started with the SDKs</li> <li>Create your first function</li> <li>Get started with our cli tool</li> <li>Get your API key</li> </ul>"},{"location":"license/","title":"Main here things","text":"<p>This is a test</p>"},{"location":"license/#section-one","title":"Section One","text":"<p>jdkfjdkfjdk</p>"},{"location":"license/#section-two","title":"Section Two","text":"<p>fdjkfdkfdj</p>"},{"location":"license/#section-three","title":"Section Three","text":"<p>dfd</p>"},{"location":"guides/cli/","title":"JellyFaaS CLI Tool","text":"<p>Intro about the CLI, what it does and why.</p>"},{"location":"guides/cli/#introduction-to-the-jellyfaas-cli-tool","title":"Introduction to the Jellyfaas CLI tool","text":""},{"location":"guides/cli/#downloading","title":"Downloading","text":"<p>Once you have downloaded the file, you will need to unzip and place into a location accessable:</p>"},{"location":"guides/cli/#installation-instructions-for-jellyfaas-cli","title":"Installation Instructions for Jellyfaas CLI","text":"<p>Once you have downloaded the <code>jellyfaas.zip</code> file, please follow the link below according to your operating system:</p> <ul> <li> <p>Windows</p> </li> <li> <p>Mac/Linux</p> </li> </ul>"},{"location":"guides/cli/#creating-the-jellyfaas-file","title":"Creating the .jellyfaas file","text":"<p>To make the CLI work, you will need to put you API key (from here) into a <code>.jellyfaas</code> file on mac, linux and windows. This file has the following format:</p> <pre><code>apikey: &lt;apikey&gt;\nenv: jellyfaas\n</code></pre> <p>To make it easier to setup, you can run the following command:</p> <pre><code>&gt; jellyfaas apikey\n</code></pre> <p>It will prompt you to enter your <code>apikey</code> and create the file in the correct location.</p> <p>Apikey Information</p> <p>If you don;t know where to get your key, you can get it from your profile page here</p> <p>For a list of the CLI commands go here : Cli Commands</p>"},{"location":"guides/cli_commands/","title":"CLI COMMAND LIST","text":""},{"location":"guides/cli_commands/#library","title":"Library","text":"<p>Description: Lists the library out, and gives detailed information about a function.</p> <p>Flags:</p> Flag Function <code>none</code> List the libray functions, if you have any broken deployments also lists them out <code>-d | details</code> Lists the specific details of one library, gives indepth information. <code>-r | readme</code> when used with <code>-d</code> shows the readme of the library item <p>Examples:</p> <pre><code>&gt; jellyfaas library list\n</code></pre> <pre><code>&gt; jellyfaas library -d &lt;function name&gt;\n</code></pre>"},{"location":"guides/cli_commands/#apikey","title":"Apikey","text":"<p>Description: Sets the apikey in the local <code>.jellyfaas</code> file.</p> <p>Example:</p> <pre><code>&gt; jellyfaas apikey\n</code></pre>"},{"location":"guides/cli_commands/#token","title":"Token","text":"<p>Description: Generates a token to use when calling out to functions.</p> <p>Example:</p> <pre><code>&gt; jellyfaas token\n</code></pre>"},{"location":"guides/cli_commands/#zip","title":"Zip","text":"<p>Description: Zips up a function directory ready for deployment, and optionally deploys.</p> <p>Flags:</p> Flag Function <code>-s | source</code> Specifies the name of the directory to zip up, this can be a fully qualified path <code>-o | overwrite</code> If set to true, will overwrite the exiting zip file if it already exits. <code>-d | deploy</code> If set to true, will deploy the function into JellyFaaS <code>-w | wait</code> If set to true will wait till deployment completes (success or fail). <p>Examples:</p> <pre><code>&gt; jellyfaas zip -s ./hello-world -o true -d true\n</code></pre> <pre><code>&gt; jellyfaas zip -s /user/name/src/functions/hello-world -d true -o true -w true\n</code></pre> <pre><code>&gt; jellyfaas zip -s ./hello-world\n</code></pre>"},{"location":"guides/cli_commands/#create","title":"Create","text":"<p>Description: Create the boiler plate code to create a function, Supports the following languages: <code>go,php,java,dotnet,python,ruby,node</code></p> <p>Flags:</p> Flag Function <code>-n | name</code> Name of the function <code>-l | language</code> Language of the function, one of <code>go|php|java|dotnet|python|ruby|node</code> <code>-d | destination</code> Destination of the function <code>-a | always</code> Always create function, even if directory exists <p>Examples:</p> <pre><code>&gt; jellyfaas create -d ./src/functions -l go -n hello_world\n</code></pre> <pre><code>&gt; jellyfaas create -d `pwd` -l go -n hello_world -a\n</code></pre> <pre><code>&gt; jellyfaas create -d C:\\src\\functions -l php -n helloworld\n</code></pre>"},{"location":"guides/cli_commands/#spec","title":"Spec","text":"<p>Description: Creates the required OpenApi Spec to place in the <code>jellyspec.json</code> file from json. This allows you to easily create the required data from json data that you have created/used during function development.</p> <p>Flags:</p> Flag Function <code>-j | json</code> Input is <code>json</code>, currently this is the only supported input. <code>-r | raw</code> Raw output, allowing you to pipe or pbcopy for example. <code>-f | flat</code> output is one long string, not 'pretty printed' <p>Examples:</p> <pre><code>&gt; jellyspec spec -j '{\"foo\":\"bar\",\"foo2\":\"bar2\",\"output\":\"data\"}'\n</code></pre> <pre><code>&gt; jellyspec -r spec -j '{\"foo\":\"bar\",\"foo2\":\"bar2\",\"output\":\"data\"}'\n</code></pre> <pre><code>&gt; jellyspec -r -f spec -j '{\"foo\":\"bar\",\"foo2\":\"bar2\",\"output\":\"data\"}'\n</code></pre>"},{"location":"guides/cli_commands/#bad-builds","title":"Bad builds","text":"<p>Description: List any bad builds you have attempted to deploy (and the reason why), if you have any you can list them with <code>list</code> or attempt to clean up and remove any unsucessful deployed builds, if this is not sucessful please contact support and we can help and explain what went wrong.</p>"},{"location":"guides/cli_commands/#list","title":"List","text":"<p>Flags:</p> Flag Function <code>-b | buildId</code> Display information on a specific build id. <p>Examples:</p> <pre><code>&gt; jellyspec badbuild list\n</code></pre> <pre><code>&gt; jellyspec badbuild list -b &lt;buildId&gt;\n</code></pre>"},{"location":"guides/cli_commands/#clean","title":"Clean","text":"Flag Function <code>-b | buildId</code> Display information on a specific build id. <pre><code>&gt; jellyspec badbuild clean -b &lt;buildId&gt;\n</code></pre>"},{"location":"guides/cli_commands/#exists","title":"Exists","text":"<p>Description: Checks if a function id 'shortname' exists.</p>"},{"location":"guides/cli_commands/#list_1","title":"List","text":"<p>Flags:</p> Flag Function <code>-n | name</code> shortname of the function from the <code>jellyspec.json</code> file. <p>Examples:</p> <pre><code>&gt; jellyspec exists -n &lt;shortname&gt;\n</code></pre>"},{"location":"guides/creating_a_function/","title":"Deploying to JellyFaaS","text":"<p>To do this, you will need to install the <code>JellyCLI</code>, you can follow the steps here to do so.</p>"},{"location":"guides/creating_a_function/#project-set-up","title":"Project set up","text":"<p>Firstly, you need to decided what language you want to develop your project in. At the moment, we support the following languages:</p> <ul> <li>Java</li> <li>Python</li> <li>Node</li> <li>C#</li> <li>GoLang</li> <li>Ruby</li> </ul> <p>Once you have decided, <code>cd</code> into the directory you wish to generate a template and run the following.</p> PythonJavaGoC#Node <pre><code>jellyfaas create -d . -l python -n PROJECT_NAME\n</code></pre> <pre><code>jellyfaas create -d . -l java -n PROJECT_NAME\n</code></pre> <pre><code>jellyfaas create -d . -l go -n PROJECT_NAME\n</code></pre> <pre><code>jellyfaas create -d . -l dotnet -n PROJECT_NAME\n</code></pre> Note <p><code>csharp</code>, <code>c#</code>, and <code>dn</code> are also valid</p> <pre><code>jellyfaas create -d . -l nodejs -n PROJECT_NAME\n</code></pre> Note <p><code>javascript</code>, <code>js</code>, <code>node.js</code> and <code>node</code> are also valid</p> <p>For reference, these are the required flags:</p> <ul> <li><code>-d, --destination</code></li> <li><code>-l, --language</code></li> <li><code>-n, --name</code></li> </ul> <p>Once it creates the project, open it in your favourite IDE of choice. When you first open it, you may experience some dependency issues and there are a few default names, such as the package name, which may need to be changed. The default in most cases is <code>Example</code>. The <code>go.mod</code> file may have some missing dependencies (for <code>go</code> users). We recommend deleting this and re-running the <code>go mod init</code> and <code>go mod tidy</code> commands.</p>"},{"location":"guides/creating_a_function/#project-structure","title":"Project Structure","text":"<p>Most of the project templates follow the same structure. The file that will house your function code is the file highlighted with <code>**___**</code>. The <code>README.md</code> file also has info on how to run your function locally.</p> PythonJavaGoC#Node <pre><code>.\n\u251c\u2500\u2500 .jellyfaasignore\n\u251c\u2500\u2500 CHANGELOG.md\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 **main.py**\n\u251c\u2500\u2500 jellyspec.json\n\u2514\u2500\u2500 requirements.txt\n</code></pre> <pre><code>.\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 main/\n\u2502       \u2514\u2500\u2500 java/\n\u2502           \u2514\u2500\u2500 jfv1/\n\u2502               \u2514\u2500\u2500 **Example.java**\n\u251c\u2500\u2500 .jellyfaasignore\n\u251c\u2500\u2500 CHANGELOG.md\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 jellyspec.json\n\u2514\u2500\u2500 pom.xml\n</code></pre> <pre><code>.\n\u251c\u2500\u2500 cmd/\n\u2502   \u2514\u2500\u2500 main.go\n\u251c\u2500\u2500 .jellyfaasignore\n\u251c\u2500\u2500 CHANGELOG.md\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 **function.go**\n\u251c\u2500\u2500 go.mod\n\u251c\u2500\u2500 go.sum\n\u2514\u2500\u2500 jellyspec.json\n</code></pre> <pre><code>.\n\u251c\u2500\u2500 .jellyfaasignore\n\u251c\u2500\u2500 CHANGELOG.md\n\u251c\u2500\u2500 Example.csproj\n\u251c\u2500\u2500 **Function.cs**\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 jellyspec.json\n</code></pre> <pre><code>.\n\u251c\u2500\u2500 .jellyfaasignore\n\u251c\u2500\u2500 CHANGELOG.md\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 **index.js**\n\u251c\u2500\u2500 jellyspec.json\n\u251c\u2500\u2500 package-lock.json\n\u2514\u2500\u2500 package.json\n</code></pre>"},{"location":"guides/creating_a_function/#jellyfaasignore","title":"<code>.jellyfaasignore</code>","text":"<p>This file works the same as the .gitignore file. It allows you to stop files from being deployed to the cloud function. This comes in handy if you have any extra large files, test files, etc... Per project, there are some default files that are excluded.</p>"},{"location":"guides/creating_a_function/#jellyspecjson","title":"<code>jellyspec.json</code>","text":"<p>This file is used to package up your project and send it off to be hosted. It is key that the information in this file is correct as it can lead to many unexpected errors. It houses things like input/output schemas for files and json input/output data. Additionally, it describes what query parameters the function takes. For more information please see the Configuration section.</p>"},{"location":"guides/creating_a_function/#writing-the-function","title":"Writing the Function","text":"PythonJavaGoC#Node <p><code>./main.py</code></p> <pre><code>import functions_framework\nfrom flask import jsonify\n\n@functions_framework.http\ndef Example(request):\n    \"\"\"HTTP Cloud Function that greets a given name.\n    Args:\n    request (flask.Request): The request object.\n    &lt;https://flask.palletsprojects.com/en/1.1.x/api/#incoming-request-data&gt;\n    Returns:\n    \"\"\"\n\n    # your function code goes here        \n\n    return None\n</code></pre> <p><code>./src/main/java/jfv1/Example.java</code></p> <pre><code>package jfv1;\n\nimport com.google.cloud.functions.HttpFunction;\nimport com.google.cloud.functions.HttpRequest;\nimport com.google.cloud.functions.HttpResponse;\nimport java.io.BufferedWriter;\nimport java.util.Optional;\n\npublic class Example implements HttpFunction {\n    @Override\n    public void service(final HttpRequest request, final HttpResponse response) throws Exception {\n        // your function code goes here\n    }\n}\n</code></pre> <p><code>./function.go</code></p> <pre><code>package example\n\nimport (\n    \"encoding/json\"\n    \"github.com/GoogleCloudPlatform/functions-framework-go/functions\"\n    \"net/http\"\n)\n\nfunc init() {\n    functions.HTTP(\"Example\", Example)\n}\n\nfunc Example(w http.ResponseWriter, r *http.Request) {\n    // your function code goes here\n}\n</code></pre> <p><code>./Function.cs</code></p> <pre><code>using Google.Cloud.Functions.Framework;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.Extensions.Logging;\nusing System;\nusing System.Text.Json;\nusing System.Threading.Tasks;\n\nnamespace ExampleProject\n{\npublic class Example : IHttpFunction\n{\nprivate readonly ILogger&lt;Example&gt; _logger;\n\n        public Example(ILogger&lt;Example&gt; logger)\n        {\n            _logger = logger;\n        }\n\n        public async Task HandleAsync(HttpContext context)\n        {\n            var request = context.Request;\n            var response = context.Response;\n\n            // your function code goes here\n\n        }\n    }\n}\n</code></pre> <p><code>./index.js</code></p> <pre><code>const functions = require('@google-cloud/functions-framework');\n\nfunctions.http('Example', (req, res) =&gt; {\n    // your function code goes here\n});\n</code></pre> <p>Info</p> <p>You can write what ever want with in each of the functions above (depending on the language you've chosen). This works exactly like a standard web server, expect you can only work with one endpoint. JellyFaaS functions (and cloud run functions in general) can only work with one end point. You can access what you'd expect when working with a web sever: you can get the request body, query parameters, headers etc... To find out more about Google's Functions Framework, click here.</p>"},{"location":"guides/creating_a_function/#configuration","title":"Configuration","text":"<p>Once you've written your function, and you are thinking you are ready to deploy it, you must first complete the <code>jellyspec.json</code> file.</p>"},{"location":"guides/creating_a_function/#jellyspecjson-file","title":"<code>jellyspec.json</code> file","text":"<p>Version: <code>v1.0.0</code></p> <p>Tip</p> <p>There are some default values that are populated when you create your project. These might need to be changed.</p> <ul> <li><code>runtime</code> is already filled out depending on the language you are using, you can change this to be a different run time environment.</li> <li><code>entrypoint</code> must be changed to match the name of the function you've written your code in the previous step.</li> <li><code>name</code> this isn't the identifier for your function, this is the user-friendly name for your function.</li> <li><code>shortname</code> this must be unique identifier for your function.</li> <li><code>inputJsonSchema</code> this follows the standard conversions for json schema. If you aren't sure what the conventions are, visit this official link.</li> <li><code>outputJsonSchema</code> this follows the standard conversions for json schema. If you aren't sure what the conventions are, visit this official link.</li> </ul> <p>You can omit object fields in the <code>jellyspec.json</code> file. For example, if your function doesn't require any query parameters, you can remove this field. However, you must include exactly ZERO or ONE of <code>inputJsonSchema</code> or <code>inputFile</code> and you must include exactly ZERO or ONE of <code>outputJsonSchema</code> or <code>outputFile</code>. Likewise, if your function doesn't require any explicit input or output, you can remove the field.</p> <pre><code>{\n  \"version\": \"1.0.0\",\n  \"name\": \"My Function Name\",\n  \"shortname\": \"my_unique_func\",\n  \"runtime\": \"python312\",\n  \"entrypoint\": \"MyEntrypoint\",\n  \"description\": \"A useful description of my function.\",\n  \"requirements\": {\n    \"requestType\": \"POST\",\n    \"queryParams\": [\n      {\n        \"name\": \"myKey\",\n        \"required\": true,                             // Optional (Defaults to false)\n        \"description\": \"A description of this param\", // Optional\n        \"exampleData\": \"myKey=42\"                     // Optional\n      },\n      {\n        \"name\": \"myKey2\",\n        \"required\": false,                            // Optional (Defaults to false)\n        \"description\": \"A description of this param\", // Optional\n        \"exampleData\": \"myKey2=some+value\"            // Optional\n      }\n    ],\n    // Must inlcude exactly ZERO or ONE of `inputJsonSchema` or `inputFile`\n    \"inputJsonSchema\": {\n      \"$Schema\": \"https://json-schema.org/draft/2020-12/schema\"\n      \"description\": \"A description of the input section\"\n    },\n    \"inputFile\": {\n      \"extensions\": [\"png\", \"jpg\", \"jpeg\"],           // Optional\n      \"required\": true                                // Optional\n      \"description\": \"A description of the input section\"\n    },\n    // Must inlcude exactly ZERO or ONE of `outputJsonSchema` or `outputFile`\n    \"outputJsonSchema\": {\n      \"$Schema\": \"https://json-schema.org/draft/2020-12/schema\"\n      \"description\": \"A description of the input section\"\n    },\n    \"outputFile\": {\n      \"extensions\": [\"png\", \"jpg\", \"jpeg\"]            // Optional\n      \"description\": \"A description of the input section\"\n    }\n  },\n  \"tags\": [                                           // Optional\n    \"weather\",\n    \"social\"\n  ]\n}\n</code></pre>"},{"location":"guides/creating_a_function/#deploying","title":"Deploying","text":"<p>Once you have ensured your function is ready to deploy. Deploying is made easy with the CLI, all it takes is one command:</p> <pre><code>jellyfaas zip -d true -o true -s /path/to/your/project\n</code></pre> <p>Tip</p> <p>Its best to <code>cd</code> out of your project's directory, so that the zip file doesn't get added to it.</p> <p>This will generate a <code>zip</code> file of your project and deploy it!</p>"},{"location":"guides/creating_a_function/#trouble-shooting","title":"Trouble Shooting","text":""},{"location":"guides/godot_guide/","title":"Godot Guide","text":"<p>The JellyFaas SDK is capable of working in every environment which has support for .Net Standard 2.0. This means that the Godot game engine and projects developed with it can also take advantage of the features provided by the JellyFaas SDK.</p> <p>Supported versions</p> <p>Only the versions of Godot with C# support are capable of making use of the SDK. This means that the 1.x and 2.x versions of Godot and versions with .Net/Mono support disable are not supported, and cannot make use of the JellyFaas SDK.</p> <p>Here is a walkthrough on using the <code>joesjokes</code> function in Godot 4.2.2:</p>"},{"location":"guides/godot_guide/#1-create-a-new-project-or-open-an-existing-project","title":"1. Create a new project or open an existing project","text":"<p>First we have to create or open up the project we want to add the SDK to with a C# enabled version of Godot.</p> <p>Known problem with C# support in Godot 3.x</p> <p>The C# support in the 3.x versions of the Godot engine suffer from a known issue which prevents some of the .Net packages from functioning properly. This problem has a known workaround, which is to change the C# target from .Net Standard to .Net Framework. This problem has been fixed in Godot 4.0 and later versions, however if you are using the 3.x versions of Godot it is recommended that you change this setting.</p> <p>If you open up a project which was created with a version of Godot which has C# support disabled, the Godot engine should automatically generate all the necessary files, however if it doesn't, you may have to create them manually by selecting the <code>Project &gt; Tools &gt; C# &gt; Create C# Solution</code> option. If your project has been created with a version of the engine which does have support for C# the needed files should be generated automatically.</p> <p>Let us start with the following ui elements:</p> <p></p> <p>First we have to create a C# script. Right-click on the button node, and press attach script.</p> <p></p> <p>Then we create a new C# script. Make sure the language dropdown menu has C# selected.</p> <p>Unfortunately you cannot access the SDK through GDScript, however you may be able to make a wrapper node around the SDK functions you need in C#, and call the functions defined on that node in GDScript.</p> <p></p> <p>Now lets open up this script in our C# IDE. It is possible to edit C# files in the Godot script editor, however I would recommend using an external IDE for this, as Godot doesn't have a graphical user interface for the NuGet package manager. You can change which editor Godot will use for C# files by going to <code>Editor &gt; Editor Settings</code>, then changing the <code>Dotnet &gt; External Editor</code> option.</p> <p>To open the file simply double click on the file in Godot's file explorer.</p>"},{"location":"guides/godot_guide/#2-add-the-jellyfaas-sdk-to-the-project","title":"2. Add the JellyFaas SDK to the project","text":"<p>Once the .Net solution has been added you have to add in the <code>JellyfaasSdk</code> NuGet package. Most popular C# IDEs provide you with a graphical user interface to do this, however if you decide to use the built-in Godot script editor, or you use an IDE which doesn't have a package manager, you may have to install the SDK manually through your system's command prompt/terminal.</p> <p>The following are short guides on how to install the SDK in some popular IDEs.</p> Visual StudioVisual Studio CodeJetBrains RiderCommand Prompt/Terminal <p>Installing the JellyFaas SDK is easy with Visual Studio, as it comes with its own built-in NuGet package manager.</p> <p>To open up the NuGet package manager in Visual Studio select the <code>Project &gt; Manage Nuget Packages</code> option in the toolbar. In the following window switch to the <code>Browse</code> tab. In the following window you should be able to search for and install the latest version of the JellyFaas SDK.</p> <p></p> <p></p> <p>Installing the JellyFaas SDK through Visual Studio Code IDE is easy with the C# Dev Kit extension, which is  popular extension for adding C# support to Visual Studio Code.</p> <p>In Visual Studio Code open up the Command Palette (by default the <code>Ctrl</code> + <code>Shift</code> + <code>P</code> will open it). In the following search box type in <code>NuGet</code> and select the <code>NuGet: Add NuGet Package</code> option. The following search box search for and install the JellyFaas SDK package.</p> <p></p> <p></p> <p>Installing the JellyFaas SDK in Rider is easy, as Rider comes with its own built-in NuGet package manager.</p> <p>In the JetBrains Rider IDE you can find the NuGet package manager by going to <code>Tools &gt; NuGet &gt; Manage NuGet Packages</code>.</p> <p></p> <p></p> <p>If your IDE does not have a package manager, or the other options provided on this site do not work, you can always fall back to using your command prompt/terminal to install the package. This can be achieved with the dotnet CLI tool which comes bundled in with the .Net SDK.</p> <ol> <li>Open a console window in the directory your project file (*.csproj) is in.</li> <li>Use the <code>dotnet add package JellyfaasSdk</code> command in the console window.</li> </ol> <p>These above steps should automatically install the latest version of the JellyFaas SDK in your Godot project. If you experience any problems make sure you have the dotnet CLI tool installed. You may also want to check out the following links:</p> <ul> <li>Install the .Net SDK</li> <li>Installing packages with the dotnet CLI tool</li> </ul>"},{"location":"guides/godot_guide/#3-using-the-sdk-in-your-godot-project","title":"3. Using the SDK in your Godot project","text":"<p>After you have successfully installed the JellyFaas SDK in your project you should be able to access the functions and classes provided by the SDK through the <code>Jellyfaas</code> namespace in your C# files. This means that now we can start using it.</p> <p>First we should import the SDK into this file. We can do this by adding the following line at the top of our script:</p> <pre><code>using Jellyfaas;\n</code></pre> <p>Now inside the class responsible for our node we should define some variables. First lets define the variable responsible for storing our JellyClient object which will access our JellyFaas functions.</p> <pre><code>private JellyClient client;\n</code></pre> <p>Lets also define a property which will store a reference to our label node we want to put the joke in.</p> <p><pre><code>[Export]\npublic Label TargetLabel { get; set; }\n</code></pre> The above code exports a property of type Label to the Godot editor. This c# code is similar to the following GDScript code: <pre><code>export var target_l_abel:Label\n</code></pre></p> <p>Now we should initialize our JellyFaas client in our <code>_Ready</code> function. If you used Godot's templates when creating the script this function should have been provided for you. We can do this with the following line of code:</p> <p><pre><code>client = new JellyClient(new JellyConfig(\"Insert your Api Key here\"));\n</code></pre> The above line initializes our <code>JellyClient</code> with a <code>JellyConfig</code> object. This <code>JellyConfig</code> object will store our JellyFaas Api key which we have to provide when constructing it. We may also provide additional flags to our client through this object.</p> <p>In this guide we will be using the <code>joesjokes</code> function. You can learn more about it Here. This page will also generate you the class which will match the output of the <code>joesjokes</code> function. This is important, as it allows us to simply copy and paste the code from the website into our script instead of writing the class ourselves. We should copy and paste the C# code from the website to somewhere in our script. The code will look something like this:</p> <pre><code>public class JoesJoke\n{\n    public string joke { get; set; }\n\n    public string punchline { get; set; }\n}\n</code></pre> <p>Finally we can call our JellyFaas function. We can easily do this by overriding the <code>_Pressed()</code> function which is defined in every button node: <pre><code>public override void _Pressed()\n{\n    // Your code goes here\n}\n</code></pre> Inside this function we should first look up the <code>joesjokes</code> function with our <code>JellyClient</code>, and then call it. We should then store the resulting joke in a variable like the following code does: <pre><code>    client.Lookup(\"joesjokes\");\n\n    var joke = client.Invoke&lt;JoesJoke&gt;();\n</code></pre></p> <p>We can also rewrite this code to fit inside a single line like this:</p> <pre><code>    var joke_response = client.Lookup(\"joesjokes\").Invoke&lt;JoesJoke&gt;();\n</code></pre> <p>The invoke call in above takes in a type as a generic argument. In C# generic arguments have to be put inside angle brackets. The invoke function will create a new object of this type, and put the response from the JellyFaas function inside it. Any fields and properties which do not match the values needed by the function will be discarded, which is why we should use the class we generated earlier here.</p> <p>The last part of code we need to write inside the <code>_Pressed()</code> function will display the joke inside our label. The <code>joesjokes</code> function returns the joke and the punchline separately, meaning that we will have to combine them for the joke to make sense. This can be done with the following code:</p> <pre><code>TargetLabel.Text = joke_response.joke + \"\\n\\n\" + joke_info.Punchline;\n</code></pre> <p>This code will put the punchline of the joke two lines below the joke, making it easy to read.</p> <p>The last step we have to do before running our program is assigning a reference to our text label inside our button node. In our Godot editor click on the button node, and press the assign button next to the Target Label property. If this property doesn't show up for you, you may have to build the project through the build button which is located next to the run button in Godot.</p> <p></p> <p>Finally we should select our Label node in the window which shows up, and press the Ok.</p> <p></p> <p>Now we can run the project! Press the run button in the editor to run and see the results of our work.</p> <p></p> <p>After pressing the button we can see that the function has been called, and has provided us with a randomly generated joke. Pressing the button multiple times should give us a new joke after every press.</p> <p></p>"},{"location":"guides/godot_guide/#related-links","title":"Related Links","text":"<ul> <li>Install the .Net SDK</li> <li>Installing packages with the dotnet CLI tool</li> <li>Github repository with the example project from this guide</li> <li> <p>C# JellyFaas SDK Reference</p> </li> <li> <p>Godot C# documentation</p> </li> </ul>"},{"location":"guides/godot_guide/#the-code-we-wrote","title":"The code we wrote","text":"<pre><code>using TMPro;\nusing UnityEngine;\n\nusing Jellyfaas;\nusing System.Text.Json.Serialization;\n\npublic class JokeButton : MonoBehaviour\n{\n    //  Export this property so we can set the text label we want to put the joke in from the editor\n    public TMP_Text OutputLabel;\n\n    //  Store the JellyFaas client so we don't have to remake it every time we call a function\n    private JellyClient client;\n\n    // Start is called before the first frame update\n    void Start()\n    {\n        client = new JellyClient(new JellyConfig(\"Insert your Api Key here\"));  //  &lt; -- Insert your API key here\n    }\n\n    public void OnClick() {\n        var joke_info = client.Lookup(\"joesjokes\").Invoke&lt;JoesJoke&gt;();  //  The joesjokes function does not take any parameters, and returns information on a randomly generated joke\n\n        OutputLabel.text = joke_info.joke + \"\\n\\n\" + joke_info.Punchline;\n    }\n\n\n    //  The class which matches the definition of the Json object returned by the joesjokes function\n    //  The joesjokes function returns a json object with two strings called \"joke\" and \"punchline\".\n    public class JoesJoke\n    {\n        //  As long as the property name matches the Json property the SDK will read the data into the matching properties\n        public string joke { get; set; }\n\n        //  Json property names are case sensitive, meaning that this property does not match\n        //  Fortunately, the JellyFaas SDK uses the System.Text.Json library when deserializing Json objects, meaning that you can use any attributes provided by it\n        //  The following attribute tells the SDK to assume this property is called \"punchline\" when translating to and from Json.\n        [JsonPropertyName(\"punchline\")]\n        public string Punchline { get; set; }\n    }\n}\n</code></pre>"},{"location":"guides/jellyfaas_json/","title":"The jellyfaas.json File","text":""},{"location":"guides/jellyfaas_json/#the-jellyfaasjson-file-a-deep-dive","title":"The jellyfaas.json file, a deep dive","text":""},{"location":"guides/sdk_guide/","title":"SDK Guide","text":"<p>The JellyFaaS SDK simplifies working with the JellyFaaS API. It provides a <code>Client</code> class which handles authentication and functions to simplify creating HTTP requests to the API. It also provides additional validation and checks of your requests, to prevent making invalid function calls, which would otherwise consume API credits.</p> <p>API Credits</p> <p>The cloud functions used in the examples below will not use your credits. Click here to get an api key.</p> <p>Here is a walk through using the <code>Hello World</code> function.</p>"},{"location":"guides/sdk_guide/#1-creating-a-config-object","title":"1. Creating a Config object","text":"<p>The first step is to create your config object and parse your JellyFaaS api key into it. The config handles keys and authorization.</p> PythonJavaGoC#Node <pre><code>import os\nfrom jellyfaas import ClientConfig\n\napi_key = os.getenv(\"JELLYFAAS_API_KEY\")\n\nif api_key is None:\nraise ValueError(\"API key is not set in environment variables\")\n\nconfig = ClientConfig(api_key=api_key, debug=True)\n</code></pre> <pre><code>Config config = new Config();\nconfig.setApiKey(\"JELLYFAAS_API_KEY\");\n</code></pre> <pre><code>config := JellyConfig{ApiKey: \"JELLYFAAS_API_KEY\"}\n</code></pre> <pre><code>JellyConfig config = new JellyConfig(\"JELLYFAAS_API_KEY\");\n</code></pre> <pre><code>\n</code></pre>"},{"location":"guides/sdk_guide/#2-creating-the-client","title":"2. Creating the Client","text":"<p>After that, you can create the client, and parse the newly created 'config' object into it:</p> PythonJavaGoC#Node <pre><code>from jellyfaas import Client\n\n# initialize config object here \n\nclient = Client(config)\n</code></pre> <pre><code>Client client = new Client(config);\n</code></pre> <pre><code>client := NewClient(config)    \n</code></pre> <pre><code>JellyClient client = new JellyClient(config);\n</code></pre> <pre><code>\n</code></pre>"},{"location":"guides/sdk_guide/#3-looking-up-a-function","title":"3. Looking up a function","text":"<p>To look up a function, you must use the function's short name to find it.  Provided all the previous steps are complete, add the following:</p> PythonJavaGoC#Node <pre><code>client.lookup_function(\"helloworld\")\n</code></pre> <pre><code>client.lookUp(\"helloworld\");\n</code></pre> <pre><code>client.LookupFunction(\"helloworld\")\n</code></pre> <pre><code>client.Lookup(\"helloworld\");\n</code></pre> <pre><code>\n</code></pre>"},{"location":"guides/sdk_guide/#4-setting-the-request","title":"4. Setting the request","text":"<p>Once you've called 'lookup' on your client object, you can now set your request. If a function takes no query parameters and/or no input body, the setRequest parameters can be 'nil' respectively. This dependent on the function, so check the functions requirements if you aren't sure.</p> PythonJavaGoC#Node <pre><code>client.set_request(queryParams, requestBody)\n</code></pre> <pre><code>client.setRequest(queryParams, requestBody);\n</code></pre> <pre><code>client.SetRequest(params, requestBody, &amp;responseOutput, fileInput, &amp;fileOutput)\n</code></pre> <pre><code>client.SetRequest(queryParams, requestBody)\n</code></pre> <pre><code>\n</code></pre> <p>Note</p> <p><code>queryParams</code>, <code>requestBody</code>, <code>responseOutput</code>, <code>fileInput</code>, and <code>fileOutput</code> are placeholders for the following steps below</p>"},{"location":"guides/sdk_guide/#41-setting-query-parameters","title":"4.1 Setting query parameters","text":"<p>The <code>helloworld</code> function requires two query parameters: <code>firstname</code> and <code>lastname</code>. You can set them as follows:</p> PythonJavaGoC#Node <pre><code>query_params={\n    \"firstname\": \"foo\",\n    \"lastname\": \"bar\"\n}\n</code></pre> <pre><code>Map&lt;String, String&gt; queryParams = new HashMap&lt;&gt;();\nqueryParams.put(\"firstname\", \"foo\");\nqueryParams.put(\"lastname\", \"bar\");\n</code></pre> <pre><code>params := map[string]string{\n    \"firstname\": \"foo\",\n    \"lastname\":\"bar\",\n}\n</code></pre> <pre><code>var parameters = new Dictionary&lt;string, string&gt;() {\n    {\"firstname\", \"foo\"},\n    {\"lastname\", \"bar\"}\n};\n</code></pre> <pre><code>\n</code></pre>"},{"location":"guides/sdk_guide/#42-setting-the-body","title":"4.2 Setting the body","text":"<p>The website page for a function will contain an autogenerated input object (depending on the language this could be a class, a struct, dict, etc) for you to copy/paste into your project. For this example, we are using the <code>HellWorld</code> input and output objects. Populate this struct and parse it in with the following under the Json tab:</p> <p>Some functions may take json data, or file data. Here's how you can implement both of them. If you are following the guide for the <code>HelloWorld</code> function, look under the json heading:</p> Warning <p>For <code>C</code> based languages - particularly <code>Java</code>, the package might be incorrect for the auto-generated classes. The default package for all generated classes is <code>main</code> but you may need to change this.</p> PythonJavaGoC#Node <p>a. Sending JSON data</p> DictionaryClass Instance <pre><code>request_body = {\n    \"message\": \"JellyFaaS is cool\",\n    \"rating\": 5.0\n}\n</code></pre> <pre><code>class Review:\n    def __init__(message, rating):\n        self.message = message\n        self.rating = rating\n\nrequest_body = Review(\"JellyFaaS is cool\", 5.0)\n</code></pre> <p>b. Sending file data</p> <p>how to foobar</p> <p>a. Sending JSON data</p> <pre><code>SomeInputClass requestBody = new SomeInputClass();\nrequestBody.setSomeAttribute(\"foobar\");\n</code></pre> <p>b. Sending file data</p> <p>how to foobar</p> <p>a. Sending JSON data</p> <pre><code>input := RequestStruct{Foo: \"foobar\", Bar: 1234}\n</code></pre> <p>b. Sending file data</p> <pre><code>fileInput, err := os.Open(\"/path/to/file\")\nif err != nil {\n    log.Fatal(err)\n}\n</code></pre> <p>a. Sending JSON data</p> <pre><code>SomeInputClass requestBody = new SomeInputClass();\nrequestBody.SetSomeAttribute(\"foobar\");\n</code></pre> <p>b. Sending file data</p> <p>a. Sending JSON data <pre><code>\n</code></pre></p> <p>b. Sending file data</p>"},{"location":"guides/sdk_guide/#5-setting-the-response","title":"5. Setting the response","text":"<p>The SDK allows you to automatically map the response JSON to a specified class.  This is useful for managing complex responses. The website will contain an autogenerated output <code>object</code> that you can copy/paste into your project. Again this is language dependent so these objects will be different.</p> <p>Some functions may return json data, or file data. Here's how you can implement both of them. If you are following the guide for the <code>HelloWorld</code> function, look under the json heading:</p> PythonJavaGoC#Node <p>a. JSON response</p> <pre><code>class MyResponse:\n    def __init__(self):\n        self.message = None\n        self.status = None\n\nclient.set_response(MyResponse)\n</code></pre> <p>b. File response how to foobar</p> <p>a. JSON response</p> <pre><code>client.setResponse(someOutput.class);\n</code></pre> <p>b. File response</p> <p>how to foobar</p> <p>Warning</p> <p><code>setResponse()</code> is not defined in <code>go</code> SDK. Instead, <code>SetRequest()</code> uses a reference to an output struct or output file to be populated. See section 6. Invoke for an example</p> <p>Warning</p> <p><code>setResponse()</code> is not defined in <code>C#</code> SDK.  Instead, <code>Invoke()</code> takes a generic type for the auto-generated class. See section 6. Invoke for an example</p> <p>a. JSON response</p> <p><pre><code>\n</code></pre> b. File response</p> <p>how to foobar</p>"},{"location":"guides/sdk_guide/#6-invoking-the-function","title":"6. Invoking the function","text":"<p>You are ready to call your function! Simply call <code>invoke()</code> and your function will be called.</p> PythonJavaGoC#Node <pre><code>client, result = (\n    jellyfaas.Client(config)\n        .lookup_function(\"helloworld\")\n        .set_request(query_params=query_params, request_body_instance=request_body)\n        .invoke()\n)\n</code></pre> <p>Info</p> <p>Python's <code>invoke</code> will either return a new dictionary if <code>set_response</code> was not called, or if <code>set_response</code> was called, invoke will return an object of the class give in <code>set_response</code>.</p> <pre><code>OutputClass myOutput = (OutputClass) client.lookUp(\"helloworld\").setRequest(params, body).setResponse(someOutput.class).invoke();\n</code></pre> <pre><code>_, err := NewClient(JellyConfig{ApiKey: \"JELLYFAAS_API_KEY\"})\n            .LookupFunction(\"helloworld\")\n            .SetRequest(params, input, &amp;output, nil, nil)\n            .Invoke()\n\nif err != nil {\n    log.Fatal(err)\n}\n</code></pre> Note <p><code>SetRequest()</code> takes a reference <code>&amp;output</code>, which is a struct that gets populated once invoke is called.  Alternatively, if you are using a file as the output, &amp;output should be set to nil, and then a reference to the output file should be parsed.</p> <pre><code>_, err := NewClient(JellyConfig{ApiKey: \"JELLYFAAS_API_KEY\"})\n            .LookupFunction(\"helloworld\")\n            .SetRequest(params, input, nil, nil, &amp;fileOutput)\n            .Invoke()\n\nif err != nil {\n    log.Fatal(err)\n}\n</code></pre> <pre><code>SomeOutput output = client.Lookup(\"helloworld\").SetRequest(params, body).Invoke&lt;SomeOutput&gt;();\n</code></pre> Note <p><code>Invoke</code> takes a <code>&lt;generic&gt;</code> type, therefore, it's return type is inferred from this. This is why the <code>C#</code> SDK doesn't have the <code>setResponse()</code> method.</p> <pre><code>\n</code></pre>"},{"location":"guides/sdk_guide/#error-handling","title":"Error Handling","text":"<p>The JellyFaaS SDK provides custom exceptions for different error scenarios. Below is a description of each error type and where to expect it to be thrown for each SDK:</p> PythonJavaGoC#Node <ol> <li> <p><code>jellyfaas.AuthenticationFailedException</code></p> <p>Thrown when your credentials cannot be verified during config object creation.</p> </li> <li> <p><code>jellyfaas.FunctionLookupException</code> </p> <p>Occurs during the function look up stage.  This could be due to the function not existing.</p> </li> <li> <p><code>jellyfaas.SetRequestException</code></p> <p>This can be down to the query parameters being incorrect and therefore not lining up with the function's query parameter schema. Or, this can be due to the input body not matching the functions input schema.</p> </li> <li> <p><code>jellyfaas.InvocationException</code></p> </li> </ol> <ol> <li> <p><code>v1.jellyfaas.exceptions.JellyFaasException</code></p> <p>This is a general error that can be thrown during the process of calling out to a function.</p> </li> <li> <p><code>v1.jellyfaas.exceptions.JellyFaasFormatException</code> </p> <p>This error is thrown when there are issues with your request body and request parameters. This is usually due to errors with the schema not matching these inputs. </p> </li> <li> <p><code>v1.jellyfaas.exceptions.JellyFaasHttpException</code></p> <p>Occurs during any failures with calling out to the function or setting your authorization JWT.</p> </li> </ol> <p>The Go SDK doesn't use custom error types.</p> <ol> <li> <p><code>Jellyfaas.UnauthorizedException</code></p> <p>This error is thrown when a user attempts to perform an action without the necessary permissions.</p> </li> <li> <p><code>Jellyfaas.FunctionNotFoundException</code></p> <p>This error occurs when the specified function does not exist or cannot be found. It may also include a custom message indicating the function name.</p> </li> <li> <p><code>Jellyfaas.FunctionNotSelectedException</code></p> <p>This error is raised when no function has been selected for the SDK to use. The SDK requires a function to be specified in order to proceed.</p> </li> <li> <p><code>Jellyfaas.EmptyBodyException</code></p> <p>This error is triggered when a function requires a non-empty body, but an empty or missing body is provided in the request.</p> </li> <li> <p><code>Jellyfaas.NonSchemaCompliantException</code></p> <p>This error is thrown when an object does not match the required schema, indicating that the input does not conform to the expected format or structure.</p> </li> <li> <p><code>Jellyfaas.InvalidSchemaException</code></p> <p>This error occurs when the schema associated with a function is invalid or not correctly defined, preventing the function from executing as expected.</p> </li> </ol>"},{"location":"guides/sdk_guide/#debug-mode","title":"Debug mode","text":"<p>If you want a more verbose output from the SDK, you set the SDK to be in debug mode with the following:</p> PythonJavaGoC#Node <p>Both <code>ClientConfig</code> and <code>Client</code> classes utilize Python's built-in logging module. Ensure that your application is configured to capture these logs:</p> <pre><code>import logging\n\nlogging.basicConfig(level=logging.DEBUG)\n</code></pre> <p>This is toggled by calling <code>debug</code> on the client and setting a boolean:</p> <pre><code>// debugging enabled\nclient.debug(true);\n\n// debugging disabled\nclient.debug(false);\n</code></pre> <pre><code>client.SetDebug(true);\n</code></pre> <p>Note</p> <p>Alternatively, debug mode can be set through the config object via: <pre><code>config := JellyConfig{ApiKey: \"JELLYFAAS_API_KEY\", Debug:true}\n</code></pre></p> <pre><code>var loggerFactory = LoggerFactory.Create((builder) =&gt; builder.AddConsole());\nvar logger = loggerFactory.CreateLogger(\"Jellyfaas\");\n\nJellyClient client = new JellyClient(new JellyConfig(\"JELLYFAAS_API_KEY\", logger, true));\n</code></pre> <p>Note</p> <p>Other logging libraries can be used and parsed into the config object.</p> <pre><code>\n</code></pre>"},{"location":"guides/sdk_guide/#complete-code","title":"Complete Code","text":"PythonJavaGoC#Node <p>Example</p> <pre><code>import os\nimport logging\nimport jellyfaas\n\nlogging.basicConfig(level=logging.DEBUG) # When enabled, JellyFaaS logs at the DEBUG level\n\napi_key = os.getenv(\"JELLYFAAS_API_KEY\")\n\nquery_params = {\n\"firstname\": \"John\",\n\"lastname\": \"Doe\"\n}\n\nrequest_body = {\n\"message\": \"JellyFaaS is cool\",\n\"rating\": 5.0\n}\n\ntry:\nconfig = jellyfaas.ClientConfig(api_key=api_key, debug=True)\nclient, result = (\njellyfaas.Client(config)\n.lookup_function(\"helloworld\")\n.set_request(query_params, request_body)\n.invoke()\n)\nprint(result)\n\nexcept jellyfaas.AuthenticationFailedException as e:\nprint(f\"Authentication failed: {e}\")\nexcept jellyfaas.FunctionLookupException as e:\nprint(f\"Function lookup failed: {e}\")\nexcept jellyfaas.SetRequestException as e:\nprint(f\"Setting request failed: {e}\")\nexcept jellyfaas.InvocationException as e:\nprint(f\"Function invocation failed: {e}\")\n</code></pre> <p>Example</p> <pre><code>// creating a config object\nConfig config = new Config();\nconfig.setApiKey(\"JELLYFAAS_API_KEY\");\n\n// setting the client\nClient client = new Client(config);\n\n// setting the query parameters\nMap&lt;String, String&gt; parameters = new HashMap&lt;&gt;();\nqueryParams.put(\"queryParam\", \"foobar\");\n\n// setting an input object\nSomeInputClass requestBody = new SomeInputClass();\nrequestBody.setSomeAttribute(\"foobar\");\n\n// invoking\nSomeOutputClass myOutput = (SomeOutputClass) client.lookUp(\"helloworld\").setRequest(parameters, requestBody).setResponse(SomeOutputClass.class).invoke();\n</code></pre> <p>Example</p> <pre><code>_, err := NewClient(JellyConfig{ApiKey: \"JELLYFAAS_API_KEY\"})\n            .LookupFunction(\"helloworld\")\n            .SetRequest(params, input, &amp;output, nil, nil)\n            .Invoke()\n\nif err != nil {\n    log.Fatal(err)\n}\n</code></pre> <p>Example</p> <pre><code>// Creating a config object\nJellyConfig config = new JellyConfig(\"JELLYFAAS_API_KEY\")\n\n//  Creating a client\nJellyClient client = new JellyClient(config);\n\n// setting an input object\nSomeInputClass requestBody = new SomeInputClass();\nrequestBody.setSomeAttribute(\"foobar\");\n\nvar parameters = new Dictionary&lt;string, string&gt;() { { \"foo\", \"bar\" } };  //  Dictionary of query parameters\n\n// Invoking the function and getting the response\nSomeOutputClass output = client.Lookup(\"joesjokes\").SetRequest(parameters, requestBody).Invoke&lt;SomeOutputClass&gt;();\n</code></pre> <p>Example</p> <pre><code>\n</code></pre> <p>Next Steps</p> <ul> <li>Create your first function</li> <li>Get started with our cli tool</li> <li>Get your API key</li> </ul>"},{"location":"guides/unity_guide/","title":"Unity Guide","text":"<p>The JellyFaas SDK is capable of working in every environment which has support for .Net Standard 2.0. This means that the Unity game engine and projects developed with it can also take advantage of the features provided by the JellyFaas SDK.</p> <p>Supported versions</p> <p>Only the versions of Unity which have support for .Net Standard 2.0 are capable of making use of the SDK. This means that versions of Unity prior to Unity 2018.1 cannot be used with the SDK.</p> <p>Here is a walkthrough using the <code>joesjokes</code> function and Unity 2021.3.38f1:</p>"},{"location":"guides/unity_guide/#1-create-a-new-project-or-open-an-existing-project","title":"1. Create a new project or open an existing project","text":"<p>First we have to create or open up the project we want to add the SDK to with a modern version of Unity.</p> <p>.Net compilation targets</p> <p>The Unity game engine can compile C# code with several versions of .Net, and can also pre-compile your C# code into C++ code. All of these targets have been confirmed to work, and the JellyFaas SDK does work with pre-compiled projects.</p> <p>In this guide we will use a simple Unity project with only a button and a text label which looks like this:</p> <p></p>"},{"location":"guides/unity_guide/#2-add-the-jellyfaas-sdk-to-the-project","title":"2. Add the JellyFaas SDK to the project","text":"<p>Now that you have created your project we should add the JellyFaas SDK to it. As Unity does not have support for the NuGet package manager we will have to manually download and install the SDK as a managed plugin.</p> <p>Go to This Link and download the zip file with the SDK. Once you have the zip file with the plugin you should create a new folder called <code>Plugins</code> in your project's main folder if it doesn't exist already.</p> <p></p> <p>The zip file with the plugin should contain a single folder with multiple .dll files. Extract this folder into the <code>Plugins</code> folder we just created in your Unity project. Now when you go back to Unity it should detect that a new plugin has been added, and it should begin to re-build your project.</p> <p></p>"},{"location":"guides/unity_guide/#3-using-the-jellyfaas-sdk","title":"3. Using the JellyFaas SDK","text":"<p>After you have successfully installed the JellyFaas SDK in your project you should be able to access the functions and classes provided by the SDK through the <code>Jellyfaas</code> namespace in your C# files. This means that now we can start using it.</p> <p>First we should create a new script, and attach it to the button. You should then open the file in the C# IDE of your choice.</p> <p></p> <p>Now that we have our script file we should import the SDK into it. We can do this by adding the following line at the top of our script:</p> <pre><code>using Jellyfaas;\n</code></pre> <p>Now inside the class responsible for our button we should define some variables. First lets define the variable responsible for storing our JellyClient object which will access our JellyFaas functions.</p> <pre><code>private JellyClient client;\n</code></pre> <p>Lets also define a property which will store a reference to our label node we want to put the joke in.</p> <pre><code>public TMP_Text OutputLabel;\n</code></pre> <p>Now we should initialize our JellyFaas client in our <code>Start</code> function. If you used Unity's templates when creating the script this function should have been provided for you. We can do this with the following line of code:</p> <pre><code>client = new JellyClient(new JellyConfig(\"Insert your Api Key here\"));\n</code></pre> <p>The above line initializes our <code>JellyClient</code> with a <code>JellyConfig</code> object. This <code>JellyConfig</code> object will store our JellyFaas Api key which we have to provide when constructing it. We may also provide additional flags to our client through this object.</p> <p>In this guide we will be using the <code>joesjokes</code> function. You can learn more about it Here. This page will also generate you the class which will match the output of the <code>joesjokes</code> function. This is important, as it allows us to simply copy and paste the code from the website into our script instead of writing the class ourselves. We should copy and paste the C# code from the website to somewhere in our script. The code will look something like this:</p> <pre><code>public class JoesJoke\n{\n    public string joke { get; set; }\n\n    public string punchline { get; set; }\n}\n</code></pre> <p>Finally we can call our JellyFaas function. We can easily do this by creating a new function which we can later attach to our button:</p> <pre><code>public  void OnClick()\n{\n    // Your code goes here\n}\n</code></pre> <p>Inside this function we should first look up the <code>joesjokes</code> function with our <code>JellyClient</code>, and then call it. We should then store the resulting joke in a variable like the following code does: <pre><code>client.Lookup(\"joesjokes\");\n\nvar joke = client.Invoke&lt;JoesJoke&gt;();\n</code></pre></p> <p>We can also rewrite this code to fit inside a single line like this:</p> <pre><code>var joke_response = client.Lookup(\"joesjokes\").Invoke&lt;JoesJoke&gt;();\n</code></pre> <p>The invoke call in above takes in a type as a generic argument. In C# generic arguments have to be put inside angle brackets. The invoke function will create a new object of this type, and put the response from the JellyFaas function inside it. Any fields and properties which do not match the values needed by the function will be discarded, which is why we should use the class we generated earlier here.</p> <p>The last part of code we need to write inside the <code>OnClick</code> function will display the joke inside our label. The <code>joesjokes</code> function returns the joke and the punchline separately, meaning that we will have to combine them for the joke to make sense. This can be done with the following code:</p> <pre><code>OutputLabel.text = joke_info.joke + \"\\n\\n\" + joke_info.Punchline;\n</code></pre> <p>This code will put the punchline of the joke two lines below the joke, making it easy to read.</p>"},{"location":"guides/unity_guide/#4-final-steps","title":"4. Final steps","text":"<p>Now that we have our script, we can go back to the Unity Editor. In the editor we should go to our button's properties, and find the <code>On Click ()</code> section. In this section we should click on the <code>+</code> button at the bottom.</p> <p>Pressing this button should add a new event listener to the <code>On Click ()</code> section. In this event listener we should drag and drop our button into the object selection box, and in the dropdown menu next to it we should select our <code>OnClick</code> function we created earlier. This should make it so whenever we press the button the <code>OnClick</code> function will run.</p> <p></p> <p>Finally we should drag and drop the label we want to display our joke on into the <code>Output Label</code> property in our script component section in the button.</p> <p></p> <p>Now we can run the project! Press the run button in the editor to run and see the results of our work.</p> <p></p> <p>After pressing the button we can see that the function has been called, and has provided us with a randomly generated joke. Pressing the button multiple times should give us a new joke after every press.</p> <p></p>"},{"location":"guides/unity_guide/#related-links","title":"Related Links","text":"<ul> <li>JellyFaas SDK Unity plugin download link</li> <li>Github repository with the example project from this guide</li> <li>C# JellyFaas SDK Reference</li> </ul>"},{"location":"guides/unity_guide/#the-code-we-have-wrote","title":"The code we have wrote","text":"<pre><code>using System.Collections;\nusing System.Collections.Generic;\nusing TMPro;\nusing UnityEngine;\n\nusing Jellyfaas;\nusing System.Text.Json.Serialization;\n\npublic class JokeButton : MonoBehaviour\n{\n    //  Export this property so we can set the text label we want to put the joke in from the editor\n    public TMP_Text OutputLabel;\n\n    //  Store the JellyFaas client so we don't have to remake it every time we call a function\n    private JellyClient client;\n\n    // Start is called before the first frame update\n    void Start()\n    {\n        client = new JellyClient(new JellyConfig(\"Insert your Api Key here\"));  //  &lt; -- Insert your API key here\n    }\n\n    public void OnClick() {\n        var joke_info = client.Lookup(\"joesjokes\").Invoke&lt;JoesJoke&gt;();  //  The joesjokes function does not take any parameters, and returns information on a randomly generated joke\n\n        OutputLabel.text = joke_info.joke + \"\\n\\n\" + joke_info.Punchline;\n    }\n\n\n    //  The class which matches the definition of the Json object returned by the joesjokes function\n    //  The joesjokes function returns a json object with two strings called \"joke\" and \"punchline\".\n    public class JoesJoke\n    {\n        //  As long as the property name matches the Json property the SDK will read the data into the matching properties\n        public string joke { get; set; }\n\n        //  Json property names are case sensitive, meaning that this property does not match\n        //  Fortunately, the JellyFaas SDK uses the System.Text.Json library when deserializing Json objects, meaning that you can use any attributes provided by it\n        //  The following attribute tells the SDK to assume this property is called \"punchline\" when translating to and from Json.\n        [JsonPropertyName(\"punchline\")]\n        public string Punchline { get; set; }\n    }\n}\n</code></pre>"},{"location":"guides/install/maclinux/","title":"Maclinux","text":""},{"location":"guides/install/maclinux/#mac-linux-installation","title":"Mac / Linux installation","text":"<ol> <li>Unzip the file    Open Terminal, navigate to the directory containing <code>jellyfaas.zip</code>, and run the following, this will move:</li> </ol> <pre><code>    unzip jellyfaas.zip\n    chmod +x jellyfaas\n    sudo mv jellyfaas /usr/local/bin/\n</code></pre> <p>To run Jellyfaas You can now run:</p> <pre><code>jellyfaas\n</code></pre> <p>If jellyfaas was successfully moved, it should be available system-wide.</p>"},{"location":"guides/install/windows/","title":"Windows","text":""},{"location":"guides/install/windows/#windows-install-guide","title":"Windows install guide","text":"<pre><code>1. **Unzip the file**\n\n- Right-click the `jellyfaas.zip` file and select **Extract All...**.\n- Choose a location to extract the files. After extraction, you should see a `jellyfaas.exe` file.\n\n2. **Move the executable to a location in your PATH**\n</code></pre> <p>To run <code>jellyfaas</code> from any directory, place it in a folder included in your system's PATH. Common locations include <code>C:\\Windows\\System32</code> or create a custom directory and add it to your PATH variable.</p> <p>For example:</p> <pre><code>    - Open File Explorer and navigate to the folder where you extracted `jellyfaas.exe`.\n    - Copy `jellyfaas.exe`.\n    - Paste it into `C:\\Windows\\System32`.\n\nAlternatively, you can add a new directory to the PATH:\n\n- Create a folder, e.g., `C:\\tools`.\n- Move `jellyfaas.exe` into `C:\\tools`.\n\n- Update your PATH:\n    1. Press **Start**, type \"Environment Variables\", and open **Edit the system environment variables**.\n    2. Click **Environment Variables...**.\n    3. Under **System variables**, select **Path**, and then click **Edit**.\n    4. Click **New** and type `C:\\tools`.\n    5. Click **OK** to save.\n</code></pre>"},{"location":"other/data_privacy/","title":"Info around data privacy and AI","text":""},{"location":"quickstart/cli_install/","title":"Install the JellFaaS CLI Tool","text":"<p>This is the quick start guide to installing the cli tool, for more details see: Cli Tool</p> <p>The CLI tool is used to deploy and do various other commands with the JellyFaaS system.</p> <p>quick start here</p>"},{"location":"quickstart/first_steps/","title":"First steps","text":"<p>Lets go over the core components of JellyFaaS.</p> <p>JellyFaaS is a collection of functions, hosted, scaled and managed. It has a number of functions that are JF createded and a supports function created by the comminuity.</p> <p>More details, and configuration options are covered in the tutorials and the indepth guides.</p> <p>The core drivers behind JellyFaaS is to speed up development, reduce time to delivery, technicaly debt and infrasttruce costs.</p> <p>These functions can be viewed in the library here, and provides all the information you need to quickly get the function working, including code sample, supporting structures and data types.</p> <p>These functions can then easily be called via a REST command or via our SDK's</p> <p>To call out to any function (via REST or the SDK), you will need a jfwt (JellyFaaS web token), this token normaly is valid for 24 hours meaning you can do a call out to get a token once, and use it for 24 hours. To get a token you call out to an endpoint (the SDK will manage this) using your private API key.</p> <p>From here you can use the JFWT to hit any function you have access too, and any number of time within your monthly limit.</p> <p>Currently Supported AI engines: Gemini (Google, public and private) + OpenAI private keys.</p> <p>For more information on security of data and use of AI Engines go here : AI ENGINE PRIBCAY AND JELLYFAAS</p>"},{"location":"quickstart/first_steps/#basic-flow-diagram-for-calling","title":"Basic flow Diagram for calling","text":"<pre><code>graph LR\n    A[\"Start\"] --&gt;|request token| B[\"Auth Service\"]\n    B[\"Auth Service\"] --&gt; |jfwt| A[\"Start\"]\n    A[\"Start\"] --&gt; |request| C[\"Hosted Function\"]\n\n    %% Define a class with a thicker border\n    classDef thickStroke stroke-width:4px;\n\n    %% Apply the class to the last node (C)\n    class C thickStroke;\n\n    linkStyle 0 stroke-width:4px;\n    linkStyle 1 stroke-width:4px;\n    linkStyle 2 stroke-width:4px;\n</code></pre> <p>JellyFaas AI Concepts</p> <p>Jelly Faas supports three core patterns, and enables develeopers to regaain control and programatically (via the SDK) using complex patterns in a single line of code.</p> <p>RAG / VectorDB</p> <p>A RAG model uses a special database of information (a vector database) to find helpful facts before it answers your question. A vector database stores ideas as numbers so the computer can quickly find what it needs, kind of like looking up clues in a big treasure map.</p> <p>More details:</p> <p>A Retrieval Augmented Generation (RAG) model is an approach in natural language processing that combines large language models with external knowledge sources, often stored in vector databases. A vector database (VectorDB) stores and indexes documents or data as numerical vectors, enabling efficient similarity searches for relevant information. Together, RAG models and vector databases facilitate context-aware responses by retrieving and integrating external knowledge into the generation process.</p> <p>Flows:</p> <p>Document upload, a simple request to an API endpoint on the AIService will automatically take the document (in the following formats) and upload it, parse it and process it into our secure vector database that only your account can access. The number of documents you can upload is based on the account level you have.</p> <p>Document query.</p> <p>This allows you to ask an AI Engine questions with access to you document(s) for context. The most simplest of this process is to just the service with a query, using yout document as a source. This will use JellyFaaS AI (Gemini) to query the document, and then ask the AI with the context.</p> <p>Using REST, you can do as follows:</p> <p>Your function calls do a lot behind the scenes that you don't see!</p> <pre><code>sequenceDiagram\nClient-&gt;&gt;+JellyFaas Api: Authourise Api key\nJellyFaas Api-&gt;&gt;-Client: JWT\n\nClient-&gt;&gt;+JellyFaas Api: Lookup function\nJellyFaas Api-&gt;&gt;+JellyFaas Functions Library: Lookup function \nJellyFaas Functions Library-&gt;&gt;-JellyFaas Api: Function requirments and dns \nJellyFaas Api-&gt;&gt;-Client: Function requirments and dns \n\nClient-&gt;&gt;+JellyFaas Api: Invoke\nJellyFaas Api-&gt;&gt;+JellyFaas Cloud Instance: Invoke\n    critical Connect to function instance\n        JellyFaas Cloud Instance--&gt;Google Cloud Function: connect\n        JellyFaas Cloud Instance--&gt;Google Cloud Function: run\n        JellyFaas Cloud Instance--&gt;Google Cloud Function: process response \n    end\nJellyFaas Cloud Instance-&gt;&gt;-JellyFaas Api: Function response\nJellyFaas Api-&gt;&gt;-Client: Function response\n\n</code></pre> <pre><code>graph LR\n    Start --&gt; Request_JFWT[\"Request JFWT using API Key\"]\n    Request_JFWT --&gt; Validate_JFWT[\"Validate JFWT\"]\n    Validate_JFWT --&gt; Hosted_Functions[\"Call Hosted Functions\"]\n</code></pre>"},{"location":"quickstart/pre_requisites/","title":"Pre Requisits","text":"<p>There are no pre-requeistits, however using a tool like postman or Insomnia is really useful and gives a visual guide when calling the platform.</p> <p>Links to postman etc here</p> <p>A Basic understanding of REST, for more detail see here.. (video)</p> <p>Quick overview of rest.</p> <p>Verbs and how it works.</p>"},{"location":"quickstart/sdk_install/","title":"Installing the SDK","text":"<p>We've stream lined everything, so you don't have too.</p>"},{"location":"quickstart/sdk_install/#installation","title":"Installation","text":"<p>We support a wide range of languages - find your language to get started with our SDK.</p> PythonNode <p>The JellyFaaS SDK Python package is available on PyPI: <pre><code>pip install jellyfaas\n</code></pre></p> <p>The JellyFaaS SDK Node package is available on NPM: <pre><code>npm install jellyfaas\n</code></pre></p> <p>Note: Java, Go, .Dotnet (including GODOT/Unity support) SDK's are coming soon</p>"},{"location":"quickstart/sdk_install/#quick-start","title":"Quick Start","text":"<p>The JellyFaaS SDK simplifies working with the JellyFaaS API. It primarily provides a <code>Client</code> class which handles authentication and functions to simplify creating HTTP requests to the API.</p> <p>API Credits</p> <p>The cloud functions used in the examples below will not use your credits. Click here to get an api key.</p> <p>TODO: Make this TODO: API key link</p> <p>Below are some plug-and-play examples.</p> PythonNode <p>Get started with this easy <code>python</code> file.</p> <p>main.py</p> <pre><code>from jellyfaas import Client, ClientConfig\n\n# Initialize the client config\nconfig = ClientConfig(\"&lt;JELLYFAAS_API_KEY&gt;\")\n\n# 1. Create Client, 2. lookup JellyFaaS function, 3. pass in query params and body, 4. invoke!\nclient, response = Client(config).lookup_function(\"helloworld\")\n                                 .set_request({\"name\": \"tim\"}, {\"order\": [\"ham\", \"jam\", \"spam\"]})\n                                 .invoke()\n\nprint(response)\n# Output: \"Hello, Tim. You ordered 'ham', 'jam', and 'spam'.\"\n</code></pre> More Info - Verbose Example <p>The above code example demonstrates how the entire JellyFaaS function calling workflow can be condensed down into a succinct one-liner. Of course, you may prefer a more a clear and verbose approach. The following code example demonstrates how you can improve code-clarity by expanding out this process. <pre><code>import os\nimport logging\nimport jellyfaas\n\nlogging.basicConfig(level=logging.DEBUG) # When enabled, JellyFaaS logs at the DEBUG level\n\n# It is usually recommended to set up your API key as an environment variable.\napi_key = os.getenv(\"JELLYFAAS_API_KEY\")\n\n# Initialize the client config with debug logs enabled\nconfig = jellyfaas.ClientConfig(api_key=api_key, debug=True)\n\n# Initialize the client. \n# Once you have an authenticated Client, you can reuse it for multiple lookups/invocations.\nclient = jellyfaas.Client(config)\n\n# Lookup a function\nclient.lookup_function(\"helloworld\")\n\n# Set the request query params and JSON body (via a python dictionary)\n# Once you've done this once, you can call `invoke()` on the client as many times as you want.\nclient.set_request(\n    {\"name\": \"tim\"},                # Set query parameters\n    {\"order\": [\"ham\", \"jam\", \"spam\"]}) # Set request body\n\n# Finally, call the cloud function\n_, response = client.invoke()\n\nprint(response)\n# Output: \"Hello, Tim. You ordered 'ham', 'jam', and 'spam'.\"\n</code></pre></p> <p>main.js</p> <p>Next Steps</p> <ul> <li>Get started with the SDKs</li> <li>Create your first function</li> <li>Get started with our cli tool</li> <li>Get your API key</li> </ul>"},{"location":"reference/java_home/","title":"Java v1 reference","text":"<p>Last updated: Sep 06, 2024 at 16:28</p> <p>This is the Java v1 reference guide.  If you want more information about how to get started with SDKs, click here.</p> Warning <p>This project is under active development!</p> <p>Found a problem? Report it here.</p>"},{"location":"reference/java_home/#contents","title":"Contents","text":"<ul> <li> <p><code>public class Client</code></p> <p>Browse the constructor and methods for this class. This class has 12 methods.</p> <p> See Reference</p> </li> <li> <p><code>public class JellyFaasException extends Exception</code></p> <p>Browse the constructor and methods for this class. This class has 1 methods.</p> <p> See Reference</p> </li> <li> <p><code>public class JellyFaasFormatException extends Exception</code></p> <p>Browse the constructor and methods for this class. This class has 1 methods.</p> <p> See Reference</p> </li> <li> <p><code>public class JellyFaasHttpException extends Exception</code></p> <p>Browse the constructor and methods for this class. This class has 1 methods.</p> <p> See Reference</p> </li> <li> <p><code>public class JellyFormData</code></p> <p>Browse the constructor and methods for this class. This class has 6 methods.</p> <p> See Reference</p> </li> <li> <p><code>public class Config</code></p> <p>Browse the constructor and methods for this class. This class has 6 methods.</p> <p> See Reference</p> </li> <li> <p><code>public abstract class JellyFaasOutputBuilder</code></p> <p>Browse the constructor and methods for this class. This class has 2 methods.</p> <p> See Reference</p> </li> </ul>"},{"location":"reference/java_home/#jellyfaas-java-sdk","title":"JellyFaaS Java SDK","text":"<p>The JellyFaaS Java SDK. Here's a quick guide on how to get started with the SDK.</p>"},{"location":"reference/java_home/#setting-the-config-object","title":"Setting the config object","text":"<p>This object handles any keys and tokens that are required throughout the life cycle of the client. The config will generate any jwt tokens and authorisation required at run time. <pre><code>Config config = new Config();\nconfig.setApiKey(\"API-KEY\");\n...\n</code></pre></p>"},{"location":"reference/java_home/#creating-a-client","title":"Creating a client","text":"<p>Start by creating a <code>Client</code>, this takes a config object (created above).</p> <pre><code>Client client = new Client(config);\n</code></pre>"},{"location":"reference/java_home/#function-lookup","title":"Function Lookup","text":"<p>Each function has its own unique shortname - these are used to look up functions.  This is done by calling <code>.lookUp(\"shortname\")</code>. <pre><code>client.lookUp(\"shortname\");\n</code></pre></p>"},{"location":"reference/java_home/#setting-the-request-parameters","title":"Setting the request parameters","text":"<p>This is the most error-prone function as this validates an input body against the functions schema ,which is fetched when <code>.lookUp(\"shortname\")</code> is called.  To set the request, you must call <code>.setRequest(Map&lt;String, String&gt;, Object)</code>on the client object.</p>"},{"location":"reference/java_home/#query-parameters","title":"Query Parameters","text":"<p>These are set using a <code>Map&lt;String, String&gt;</code> for the key value pairs for the query params the function takes. These are validated before the call is made to the function.</p>"},{"location":"reference/java_home/#request-body","title":"Request Body","text":"<p>Each request and response class is unique to each function.  A populated request object must be parsed into this function.</p>"},{"location":"reference/java_home/#setting-the-response-body","title":"Setting the Response Body","text":"<p>This is done with <code>.setResponse(Class&lt;?&gt;)</code> A response object must be provided, which lets the response be accessible via a Java object.  The <code>Class&lt; ? &gt;</code> of the output class must be parsed which is provided on the functions' webpage. The <code>invoke()</code> function will return an instance of that class.</p>"},{"location":"reference/java_home/#invoking","title":"Invoking","text":"<p>This is the last method to make a request out to the function provided the previous methods have been called. The <code>invoke()</code> function will return a new instance of the <code>Class&lt; ? &gt;</code> provided in <code>.setResponse();</code>. If an instance is provided, the data will be marshalled into this instance provided the schema is correct.</p>"},{"location":"reference/java_home/#example","title":"Example","text":"<p>Example with parsing the <code>OutputClass</code> class. <pre><code>// creating a config object\nConfig config = new Config();\nconfig.setApiKey(\"API-KEY\");\n\n// setting the client\nClient client = new Client(config);\n\n// creating an input object\nInputClass input = new InputClass();\ninputClass.setSomeAttribute(\"foobar\");\n\n// invoking the function with the OutputClass.class as the response object\nOutputClass output = (OutputClass) client.lookUp(\"shortname\").setRequest(params, input).setResponse(OutputClass.class).invoke();\n</code></pre></p>"},{"location":"reference/jellyspec/","title":"JellySpec overview","text":""},{"location":"reference/node/","title":"Node SDK Class Reference","text":""},{"location":"reference/node/#contents","title":"Contents","text":"<p>Client Config</p>"},{"location":"reference/python/","title":"Python SDK Class Reference","text":""},{"location":"reference/python/#contents","title":"Contents","text":"<p>Client</p> <p>Config</p>"},{"location":"reference/template_projects/","title":"Templates","text":""},{"location":"reference/template_projects/#template-projects","title":"Template Projects","text":"<p>This contains info on languages and how to run/test/debug them locally</p>"},{"location":"reference/troubleshooting/","title":"Troubleshooting","text":""},{"location":"reference/troubleshooting/#ny-function-doesnt-deploy","title":"Ny function doesn't deploy","text":""},{"location":"reference/troubleshooting/#i-cannot-call-out-to-jellyfaas","title":"I cannot call out to Jellyfaas","text":""},{"location":"reference/troubleshooting/#the-ai-is-not-working-as-expected","title":"The AI is not working as expected","text":""},{"location":"reference/java/Client/public_class_client/","title":"<code>public class Client</code>","text":"Warning <p>This project is under active development!</p> <p>Found a problem? Report it here.</p> <p>Client required to make calls out to JellyFaaS functions.  Supports method chaining for easy callouts.</p>"},{"location":"reference/java/Client/public_class_client/#browse-constructor-and-methods","title":"Browse constructor and methods","text":""},{"location":"reference/java/Client/public_class_client/#public-clientconfig-config-throws-jellyfaasexception","title":"public Client(Config config) throws JellyFaasException","text":"<p> <pre><code>public Client(Config config) throws JellyFaasException \n</code></pre> </p> <p>Client object is used to make calls to the functions hosted in JellyFaas.</p> <p>param</p> <ul> <li><code>config</code> JellyFaas Config object</li> </ul> <p>throws</p> <ul> <li><code>JellyFaasException</code> if the config object is null</li> </ul>"},{"location":"reference/java/Client/public_class_client/#public-client-setresponseclass-output-throws-jellyfaasexception","title":"public Client setResponse(Class&lt;?&gt; output) throws JellyFaasException","text":"<p> <pre><code>public Client setResponse(Class&lt;?&gt; output) throws JellyFaasException \n</code></pre> </p> <p>Sets the object the response will be marshalled into. This can be a <code>Class&lt;?&gt;</code> or an instance of an object</p> <p>param</p> <ul> <li><code>output</code> the class for the output object to be</li> </ul> <p>return</p> <ul> <li>Current Client</li> </ul> <p>throws</p> <ul> <li><code>JellyFaasException</code> if the function doesn't have an output schema. Please set this parameter to be null, or don't call this method when invoking</li> </ul>"},{"location":"reference/java/Client/public_class_client/#public-client-setrequestmap-queryparams-object-requestbody-throws-jellyfaasexception-ioexception-jellyfaasformatexception","title":"public Client setRequest(Map queryParams, Object requestBody) throws JellyFaasException, IOException, JellyFaasFormatException   <p> <pre><code>public Client setRequest(Map&lt;String, String&gt; queryParams, Object requestBody) throws JellyFaasException, IOException, JellyFaasFormatException \n</code></pre> </p> <p>Sets the body and query parameters for a request. This method will validate the body against the function's  schema.</p> <p>param</p> <ul> <li> <p><code>queryParams</code> a string to string mapping of the query parameters</p> </li> <li> <p><code>requestBody</code> an object for the input body</p> </li> </ul> <p>return</p> <ul> <li>Current Client</li> </ul> <p>throws</p> <ul> <li> <p><code>JellyFaasException</code> if the <code>queryParams</code> are invalid or the <code>requestBody</code> is invalid</p> </li> <li> <p><code>JsonProcessingException</code> when the input schema cannot be validated</p> </li> <li> <p><code>JellyFaasFormatException</code> when the provided input class has missing types or the incorrect types against the json schema</p> </li> </ul>","text":""},{"location":"reference/java/Client/public_class_client/#public-client-lookupstring-shortname-throws-jellyfaasexception-jellyfaashttpexception","title":"public Client lookUp(String shortName) throws JellyFaasException, JellyFaasHttpException   <p> <pre><code>public Client lookUp(String shortName) throws JellyFaasException, JellyFaasHttpException \n</code></pre> </p> <p>Determines which function to call to via the given short name.</p> <p>param</p> <ul> <li><code>shortName</code> the shortname assigned to a function. E.g., 'examplefunc'</li> </ul> <p>return</p> <ul> <li>Current Client</li> </ul> <p>throws</p> <ul> <li> <p><code>JellyFaasException</code> when there as issue sending the http request to the JellyFaas auth service</p> </li> <li> <p><code>JellyFaasHttpException</code> when the user supplies invalid credentials, or there is an issue with the auth service</p> </li> </ul>","text":""},{"location":"reference/java/Client/public_class_client/#public-object-invoke-throws-jellyfaashttpexception-jellyfaasexception-ioexception","title":"public Object invoke() throws JellyFaasHttpException, JellyFaasException, IOException   <p> <pre><code>public Object invoke() throws JellyFaasHttpException, JellyFaasException, IOException \n</code></pre> </p> <p>Method calls a JellyFaas function with the given parameters.</p> <p>return</p> <ul> <li>a new object that is the same type as the Class set in <code>setResponse();</code>.</li> </ul> <p>throws</p> <ul> <li> <p><code>JellyFaasHttpException</code> when a HTTP error occurs calling out to the service</p> </li> <li> <p><code>JellyFaasException</code> if the response object is null or if the config object is null</p> </li> </ul>","text":""},{"location":"reference/java/Client/public_class_client/#protected-byte-getresponse","title":"protected byte[] getResponse()   <p> <pre><code>protected byte[] getResponse() \n</code></pre> </p> <p>Returns the response from the called from #invoke().</p> <p>return</p> <ul> <li>HttpResponse object.","text":""},{"location":"reference/java/Client/public_class_client/#public-string-tostring-throws-nullpointerexception","title":"public String toString() throws NullPointerException  <p> <pre><code>public String toString() throws NullPointerException\n</code></pre> </p> <p>this is useful for parsing the response as JSON</p> <p>return</p> <ul> <li>the response body as a string</li> </ul>","text":""},{"location":"reference/java/Client/public_class_client/#public-client-debugboolean-flag","title":"public Client debug(boolean flag)  <p> <pre><code>public Client debug(boolean flag)\n</code></pre> </p> <p>Will print out debug lines if set to true.</p> <p>param</p> <ul> <li><code>flag</code> determines if debug mode will be used.</li> </ul> <p>return</p> <ul> <li>Current Client</li> </ul>","text":""},{"location":"reference/java/Client/public_class_client/#public-int-getstatuscode","title":"public int getStatusCode()  <p> <pre><code>public int getStatusCode()\n</code></pre> </p> <p>Returns the status code of the function call</p> <p>return</p> <ul> <li>the status code of response</li> </ul>","text":""},{"location":"reference/java/Client/public_class_client/#private-void-validatequeryparamsmap-params-throws-jellyfaasexception","title":"private void validateQueryParams(Map params) throws JellyFaasException   <p> <pre><code>private void validateQueryParams(Map&lt;String, String&gt; params) throws JellyFaasException \n</code></pre> </p> <p>Validates the query params against the functions' schema.</p> <p>param</p> <ul> <li><code>params</code> mapping of key value pairs for the query params</li> </ul> <p>throws</p> <ul> <li><code>JellyFaasException</code> when there's a required parameter</li> </ul>","text":""},{"location":"reference/java/Client/public_class_client/#private-void-validateschemabyte-body-jsonobject-schema-throws-jellyfaasformatexception-ioexception","title":"private void validateSchema(byte[] body, JSONObject schema) throws JellyFaasFormatException, IOException   <p> <pre><code>private void validateSchema(byte[] body, JSONObject schema) throws JellyFaasFormatException, IOException \n</code></pre> </p> <p>Validates the request body against the json schema.</p> <p>param</p> <ul> <li> <p><code>body</code> the input body as a byte array</p> </li> <li> <p><code>schema</code> the schema to validate against</p> </li> </ul> <p>throws</p> <ul> <li><code>JellyFaasFormatException</code> when the provided input class has missing types or the incorrect types against the json schema doesn't match the schema</li> </ul> <p>apiNote</p> <ul> <li>this only works for json body data.</li> </ul>","text":""},{"location":"reference/java/Client/public_class_client/#private-httpresponse-docallstring-url-string-method-map-headers-httprequestbodypublisher-requestbody-throws-jellyfaasexception-jellyfaashttpexception","title":"private HttpResponse doCall(String url, String method, Map headers, HttpRequest.BodyPublisher requestBody) throws JellyFaasException, JellyFaasHttpException   <p> <pre><code>private HttpResponse&lt;byte[]&gt; doCall(String url, String method, Map&lt;String, String&gt; headers, HttpRequest.BodyPublisher requestBody) throws JellyFaasException, JellyFaasHttpException \n</code></pre> </p> <p>Handles calling out to the auth service with a given url, using the api-key.</p> <p>param</p> <ul> <li><code>url</code> the url to call out to</li> </ul> <p>return</p> <ul> <li>a byte array of the response object</li> </ul> <p>throws</p> <ul> <li> <p><code>JellyFaasException</code> when there as issue sending the http request to the JellyFaas auth service</p> </li> <li> <p><code>JellyFaasHttpException</code> when the user supplies invalid credentials, or there is an issue with the auth service</p> </li> </ul>","text":""},{"location":"reference/java/Config/public_class_config/","title":"<code>public class Config</code>","text":"Warning <p>This project is under active development!</p> <p>Found a problem? Report it here.</p> <p>The config object handles the authentication for a user wanting to use JellyFaaS.  Config object uses a JellyFaaS api key to generate a valid JWT when making a call.</p>"},{"location":"reference/java/Config/public_class_config/#browse-constructor-and-methods","title":"Browse constructor and methods","text":""},{"location":"reference/java/Config/public_class_config/#public-config","title":"public Config()","text":"<p> <pre><code>public Config()\n</code></pre> </p> <p>Creates a config object that handles any tokens/jwts/authorization during the life cycle of the client</p>"},{"location":"reference/java/Config/public_class_config/#public-void-setapikeystring-apikey-throws-jellyfaashttpexception-jellyfaasexception","title":"public void setApiKey(String apiKey) throws JellyFaasHttpException, JellyFaasException","text":"<p> <pre><code>public void setApiKey(String apiKey) throws JellyFaasHttpException, JellyFaasException \n</code></pre> </p> <p>Sets the JellyFaaS api key and generates a jwt</p> <p>param</p> <ul> <li><code>apiKey</code> your API key</li> </ul> <p>throws</p> <ul> <li> <p><code>JellyFaasHttpException</code> when the request couldn't be sent to the JellyFaas servers to get the jwt</p> </li> <li> <p><code>JellyFaasException</code> when there's an issue with the api key</p> </li> </ul>"},{"location":"reference/java/Config/public_class_config/#public-string-getapikey","title":"public String getApiKey()","text":"<p> <pre><code>public String getApiKey()\n</code></pre> </p> <p>Gets the api key</p> <p>return</p> <ul> <li>api key</li> </ul>"},{"location":"reference/java/Config/public_class_config/#public-void-setjwt-throws-jellyfaasexception-jellyfaashttpexception","title":"public void setJwt() throws JellyFaasException, JellyFaasHttpException","text":"<p> <pre><code>public void setJwt() throws JellyFaasException, JellyFaasHttpException \n</code></pre> </p> <p>Makes a call to the JellyFaas servers and sets a jwt token</p> <p>throws</p> <ul> <li> <p><code>JellyFaasException</code> when an error occurs during the http request</p> </li> <li> <p><code>JellyFaasHttpException</code> when an issue occurs when retrieving the jwt token, this can include invalid credentials</p> </li> </ul>"},{"location":"reference/java/Config/public_class_config/#protected-string-getjwt","title":"protected String getJwt()","text":"<p> <pre><code>protected String getJwt()\n</code></pre> </p> <p>Gets the jwt set from #setApiKey(String)</p> <p>return</p> <ul> <li>jwt token</li> </ul>"},{"location":"reference/java/Config/public_class_config/#private-httpresponse-docallstring-url-string-method-map-headers-httprequestbodypublisher-requestbody-throws-jellyfaasexception-jellyfaashttpexception","title":"private HttpResponse doCall(String url, String method, Map headers, HttpRequest.BodyPublisher requestBody) throws JellyFaasException, JellyFaasHttpException   <p> <pre><code>private HttpResponse&lt;byte[]&gt; doCall(String url, String method, Map&lt;String, String&gt; headers, HttpRequest.BodyPublisher requestBody) throws JellyFaasException, JellyFaasHttpException \n</code></pre> </p> <p>Handles calling out to the auth service with a given url, using the api-key.</p> <p>param</p> <ul> <li><code>url</code> the url to call out to</li> </ul> <p>return</p> <ul> <li>a byte array of the response object</li> </ul> <p>throws</p> <ul> <li> <p><code>JellyFaasException</code> when there as issue sending the http request to the JellyFaas auth service</p> </li> <li> <p><code>JellyFaasHttpException</code> when the user supplies invalid credentials, or there is an issue with the auth service</p> </li> </ul>","text":""},{"location":"reference/java/JellyFaasException/public_class_jellyfaasexception_extends_exception/","title":"<code>public class JellyFaasException extends Exception</code>","text":"Warning <p>This project is under active development!</p> <p>Found a problem? Report it here.</p>"},{"location":"reference/java/JellyFaasException/public_class_jellyfaasexception_extends_exception/#browse-constructor-and-methods","title":"Browse constructor and methods","text":"<p>This Class has no viewable methods.</p>"},{"location":"reference/java/JellyFaasFormatException/public_class_jellyfaasformatexception_extends_exception/","title":"<code>public class JellyFaasFormatException extends Exception</code>","text":"Warning <p>This project is under active development!</p> <p>Found a problem? Report it here.</p>"},{"location":"reference/java/JellyFaasFormatException/public_class_jellyfaasformatexception_extends_exception/#browse-constructor-and-methods","title":"Browse constructor and methods","text":"<p>This Class has no viewable methods.</p>"},{"location":"reference/java/JellyFaasHttpException/public_class_jellyfaashttpexception_extends_exception/","title":"<code>public class JellyFaasHttpException extends Exception</code>","text":"Warning <p>This project is under active development!</p> <p>Found a problem? Report it here.</p>"},{"location":"reference/java/JellyFaasHttpException/public_class_jellyfaashttpexception_extends_exception/#browse-constructor-and-methods","title":"Browse constructor and methods","text":"<p>This Class has no viewable methods.</p>"},{"location":"reference/java/JellyFaasOutputBuilder/public_abstract_class_jellyfaasoutputbuilder/","title":"<code>public abstract class JellyFaasOutputBuilder</code>","text":"Warning <p>This project is under active development!</p> <p>Found a problem? Report it here.</p>"},{"location":"reference/java/JellyFaasOutputBuilder/public_abstract_class_jellyfaasoutputbuilder/#browse-constructor-and-methods","title":"Browse constructor and methods","text":""},{"location":"reference/java/JellyFaasOutputBuilder/public_abstract_class_jellyfaasoutputbuilder/#public-static-t-buildjsonclient-client-class-outputclass-throws-jellyfaasexception","title":"public static  T buildJSON(Client client, Class outputClass) throws JellyFaasException   <p> <pre><code>public static &lt;T&gt; T buildJSON(Client client, Class&lt;T&gt; outputClass) throws JellyFaasException \n</code></pre> </p> <p>This builds a response into an object</p> <p>param</p> <ul> <li> <p><code>client</code> contains the response after Client#invoke() has been called.</p> </li> <li> <p><code>outputClass</code> the output class type to be populated</p> </li> </ul>","text":""},{"location":"reference/java/JellyFaasOutputBuilder/public_abstract_class_jellyfaasoutputbuilder/#public-static-byte-buildrawclient-client","title":"public static byte[] buildRaw(Client client)   <p> <pre><code>public static byte[] buildRaw(Client client) \n</code></pre> </p> <p>This gets the raw response from the function.</p> <p>param</p> <ul> <li><code>client</code> contains the response after Client#invoke() has been called.</li> </ul> <p>return</p> <ul> <li>byte array of the response.</li> </ul>","text":""},{"location":"reference/java/JellyFormData/public_class_jellyformdata/","title":"<code>public class JellyFormData</code>","text":"Warning <p>This project is under active development!</p> <p>Found a problem? Report it here.</p>"},{"location":"reference/java/JellyFormData/public_class_jellyformdata/#browse-constructor-and-methods","title":"Browse constructor and methods","text":""},{"location":"reference/java/JellyFormData/public_class_jellyformdata/#public-jellyformdataclient-client","title":"public JellyFormData(Client client)","text":"<p> <pre><code>public JellyFormData(Client client)\n</code></pre> </p> <p>Form data handler</p>"},{"location":"reference/java/JellyFormData/public_class_jellyformdata/#public-void-addstring-key-string-value","title":"public void add(String key, String value)","text":"<p> <pre><code>public void add(String key, String value) \n</code></pre> </p> <p>Add a form data key-value pair (String-&gt;String)</p> <p>param</p> <ul> <li> <p><code>key</code> Identifier</p> </li> <li> <p><code>value</code> A string</p> </li> </ul>"},{"location":"reference/java/JellyFormData/public_class_jellyformdata/#public-void-addstring-key-file-value-throws-ioexception","title":"public void add(String key, File value) throws IOException","text":"<p> <pre><code>public void add(String key, File value) throws IOException \n</code></pre> </p> <p>Add a form data key-value pair (String-&gt;InputStream)</p> <p>param</p> <ul> <li> <p><code>key</code> Identifier</p> </li> <li> <p><code>value</code> An input stream value for file info</p> </li> </ul>"},{"location":"reference/java/JellyFormData/public_class_jellyformdata/#public-void-removestring-key","title":"public void remove(String key)","text":"<p> <pre><code>public void remove(String key) \n</code></pre> </p> <p>Removes a key value pair given the key</p> <p>param</p> <ul> <li><code>key</code> Identifier</li> </ul>"},{"location":"reference/java/JellyFormData/public_class_jellyformdata/#protected-string-buildformdata-throws-ioexception","title":"protected String buildFormData() throws IOException","text":"<p> <pre><code>protected String buildFormData() throws IOException \n</code></pre> </p> <p>Builds the form data into a formatted structure string</p> <p>return</p> <ul> <li>formatted form data structure</li> </ul>"},{"location":"reference/python/client/","title":"Client","text":""},{"location":"reference/python/client/#description","title":"Description","text":"<p>The <code>Client</code> enables usage of the JellyFaaS function library. </p> <p>Most methods are dependant on the <code>Client</code> instance's internal state and must only be called in increasing order of \"call sequence\" (see below). Additionally, some methods are marked as \"required\". These methods must be called to invoke a minimal JellyFaaS function.</p> <p>For example, neither <code>set_function_body()</code> nor <code>set_function_query_params()</code> may be called before:</p> <ol> <li><code>Client()</code></li> <li><code>set_version()</code> (optionally)</li> <li><code>lookup_function()</code></li> </ol>"},{"location":"reference/python/client/#methods","title":"Methods","text":"Return Method Call Sequence Client Client(config: Config) 1(Required) Client set_version(version: int) 2 Client lookup_function(function_id: str) 3(Required) Client set_function_body(query_params: Dict[str, str]) 4 Client set_function_query_params(query_params: dict) 4 Client invoke(query_params: dict) 5(Required) Client get_status_code(query_params: dict) 6"},{"location":"reference/python/client/#method-descriptions","title":"Method Descriptions","text":""},{"location":"reference/python/client/#client","title":"Client(config: Config) -&gt; Client","text":""},{"location":"reference/python/client/#raises-jellyfaasexception","title":"Raises <code>JellyFaasException</code>","text":"<p><code>Client</code> constructor. The client saves a reference to <code>config</code>, which contains your API key, handles authentication, and miscellaneous configuration. If <code>config</code> is invalid, raises <code>JellyFaasException</code></p>"},{"location":"reference/python/client/#set_version","title":"set_version(version: int) -&gt; Client","text":""},{"location":"reference/python/client/#raises-jellyfaasexception_1","title":"Raises <code>JellyFaasException</code>","text":"<p>Sets the version to be used by any following calls to <code>lookup_function()</code>. This state is cleared upon any call to <code>clear()</code>. <code>version</code> must be a positive (non-zero) integer. If <code>version</code> is invalid, raises <code>JellyFaasException</code>.</p> <p>Note</p> <p>If <code>set_version()</code> is not called, <code>lookup_function()</code> will default to the newest version. This means your code may break on future releases of any used functions. It is highly recommended to explicity <code>set_verion()</code> first, to avoid this.</p>"},{"location":"reference/python/client/#lookup_function","title":"lookup_function(function_id: str) -&gt; Client","text":""},{"location":"reference/python/client/#raises-jellyfaasexception_2","title":"Raises <code>JellyFaasException</code>","text":"<p>Requests the details of the JellyFaaS function with ID specified by <code>function_id</code> and optionally version specified by <code>set_version()</code>. If version is not specified, defaults to the newest version.</p> <p>If successful, sets the function as the <code>Client</code>'s active function. This will also clear any data set by <code>set_function_body()</code> or <code>set_function_query_params()</code>.</p> <p>If unsuccessful, raises <code>JellyFaasException</code>. This may be due to an invalid <code>function_id</code> or version.</p>"},{"location":"reference/python/client/#set_function_body","title":"set_function_body(body, do_validation: bool = True) -&gt; Client","text":""},{"location":"reference/python/client/#raises-jellyfaasexception_3","title":"Raises <code>JellyFaasException</code>","text":"<p>set_function_body is used to pass data to a JellyFaaS function. Specifically, it is used to set the invocation's underlying HTTP request body.</p> <p>Depending on the function's defined input, set_function_body will expect and validate against different types of data:</p> <p>a. JSON</p> <p>set_function_body expects <code>body</code> to be a dict or JSON-serialiazable class instance (extending from Pydantic BaseModel) </p> <p>b. FILE</p> <p>set_function_body expects <code>body</code> to be a <code>bytes</code> object. </p> <p>By default, set_function_body will validate your input matches the function schema, ensuring your request is expected to succeed before actually invoking the function. The behaviour can be disabled by setting <code>do_validation</code> = False</p>"},{"location":"reference/python/client/#set_function_query_params","title":"set_function_query_params(query_params: Dict[str, str], do_validation = True) -&gt; Client","text":""},{"location":"reference/python/client/#raises-jellyfaasexception_4","title":"Raises <code>JellyFaasException</code>","text":"<p>set_function_query_params is used to pass data to a JellyFaaS function. Specifically, it is used to set the invocation's underlying HTTP request query parameters. set_function_query_params expects <code>body</code> to be a flat dict of <code>str</code> keys and values.</p> <p>By default, set_function_query_params will validate your input matches the function schema, ensuring your request is expected to succeed before actually invoking the function. The behaviour can be disabled by setting <code>do_validation</code> = False</p>"},{"location":"reference/python/client/#invoke","title":"invoke(outputClass: Type = None) -&gt; (Client, response)","text":""},{"location":"reference/python/client/#raises-jellyfaasexception_5","title":"Raises <code>JellyFaasException</code>","text":"<p>Calls the JellyFaaS function, with any inputs set by set_function_body and set_function_query_params.  If an outputType is passed, <code>invoke</code> will attempt to cast the response to a new instance of the specified class.</p>"},{"location":"reference/python/client/#get_status_code","title":"get_status_code() -&gt; Client","text":""},{"location":"reference/python/client/#raises-jellyfaasexception_6","title":"Raises <code>JellyFaasException</code>","text":"<p>Returns the HTTP status code returned with the last call of <code>invoke()</code></p>"},{"location":"reference/python/config/","title":"Config","text":""},{"location":"reference/python/config/#description","title":"Description","text":"<p>The <code>Config</code> provides authentication and configuration settings for <code>Client</code> instances to use the JellyFaaS function library. </p>"},{"location":"reference/python/config/#methods","title":"Methods","text":"Return Method Config Config(api_key: str)"},{"location":"reference/python/config/#method-descriptions","title":"Method Descriptions","text":""},{"location":"reference/python/config/#client","title":"Client(config: Config) -&gt; Client","text":""},{"location":"reference/python/config/#raises-jellyfaasexception","title":"Raises <code>JellyFaasException</code>","text":"<p><code>Config</code> constructor. </p>"},{"location":"tutorials/ai_quickstart/","title":"AI Quick Start","text":"<p>Ai QuickStart</p> <p>What do you want to do? What</p>"},{"location":"tutorials/calling_function_via_rest/","title":"Function calling via Rest","text":"<p>For this tutorial we are going to use the function <code>Suggest Movie</code>, which takes a two query params <code>rating</code> and <code>score</code> and returns a random movie that will satifiy the critea.</p> <p>Note: this is mock service, used only for testing and tutorials, it also does not count towards credit usuage at all.</p> <p>The information on the function, via the function libray here.</p> <p>Information</p> <p>You can copy the complete url from the <code>Parameters</code> tab, all the required information for each</p> <p>For this example we are going request a 15 rated film, with a score over 5.3</p>"},{"location":"tutorials/calling_function_via_rest/#invoking-the-function","title":"Invoking the function","text":"<p>To call this function using curl (or import into tool like postman) as follows:</p> <pre><code>curl --location 'https://api.jellyfaas.com/suggestmovie-cn16g6rdervlrpsg3sr0-4-s?rating=PG&amp;score=5.5' \\\n--header 'jfwt: &lt;token&gt;'\n</code></pre> <p>Imported into Postman:</p> <p></p>"},{"location":"tutorials/calling_function_via_rest/#output","title":"Output","text":"<p>You should see (from curl) a film and the relevenat information, you may get a different film:</p> <pre><code>{\"Title\":\"Inception\",\"Rating\":\"12A\",\"ReviewScore\":8.8}\n</code></pre> <p>or from Postman:</p> <p></p> <p>Congratulations, you just called your first function! Now look at the next tutorials, or play around with other functions!</p>"},{"location":"tutorials/calling_function_via_rest/#help-it-didnt-work","title":"Help, it didn't work","text":"<ul> <li>First check the REST verb you are using is a <code>GET</code>, for this function it cannot be a <code>POST</code> <code>PUT</code> or <code>DELETE</code>.</li> <li>Check you have pasted or typed in the correct api endpoint from here.</li> <li>Is the jwt token correct, do you have any spaces in the header, and this should be a <code>header</code> not a <code>query param</code>.</li> </ul> <p>If you still cannot get it working, please reach out via discord, email or support in the links below!</p>"},{"location":"tutorials/calling_function_via_rest/#next-steps","title":"Next steps","text":"<p>Next try calling with the SDK here</p>"},{"location":"tutorials/calling_function_via_sdk/","title":"Function calling via the SDK","text":"<p>For this tutorial we are going to use the function <code>Suggest Movie</code>, which takes a two query params <code>rating</code> and <code>score</code> and returns a random movie that will satifiy the critea.</p> <p>We are going to use the SDK (Software Development Kit) which is a key feature of JellyFaaS, the SDK allows you to rapidly interact and call functions from a number of supported languages.</p> <p>The SDK includes a number of error handling and validation checks, ensuring you do not call out to the function unless it stands a chance of success. For example <code>Suggest Movie</code> required two query params, if you do not supply them the SDK will not even attempt to envoke the function and fail (fast). The same happens on a <code>POST</code> if the required parameters are not in the body passed in, then the SDK will not attempt to call out to the JellyFaaS servers,</p> <p>Information</p> <p>All information on the required parameters, <code>POST</code> bodies, code samples and copy and paste structures/classes can be found on the function library webpage.</p> <p>Later on you will see how the SDK help speed up complex AI functionality and how you can easily use the SDK to use these functions as part of an AI query.</p>"},{"location":"tutorials/calling_function_via_sdk/#prerequisites","title":"Prerequisites","text":"<p>You will need to install the SDK for the languague(s) you are using, for instructions see here</p>"},{"location":"tutorials/calling_function_via_sdk/#create-the-code-to-call-the-server","title":"Create the code to call the server","text":"<p>Copy the following code into your IDE:</p> Note this code is in the simplest form for clarity, it doesn't handle exceptions for example. PythonNode <pre><code>import os\nfrom  jellyfaas import Config, Client\n\nquery_params = {\n    \"rating\": \"PG\",\n    \"score\": \"5.8\"\n}\n\nconfig = Config(api_key=\"&lt;apikey&gt;\")\nclient, result = Client(config).lookup_function(\"suggestmovie\").set_function_query_params(query_params).invoke()\n\nprint(result.json())\n</code></pre> <pre><code>Code for NODEY\n</code></pre>"},{"location":"tutorials/calling_function_via_sdk/#output","title":"Output","text":"<p>Once ran, you will see the following output:</p> PythonNode <pre><code>{'Title': 'Spirited Away', 'Rating': 'PG', 'ReviewScore': 8.9}\n</code></pre> <pre><code>{'Title': 'Spirited Away', 'Rating': 'PG', 'ReviewScore': 8.9}\n</code></pre> <p>Congratulations, you just called your first function via the SDK! Now look at the next tutorials, or play around with other functions!</p>"},{"location":"tutorials/calling_function_via_sdk/#help-it-didnt-work","title":"Help, it didn't work","text":"<ul> <li>First you have correctly imported the library, do you have any errors, can you not 'inspect' the library to see the SDK's actual code?</li> <li>Check you have pasted or typed in the correct endpoint from here.</li> <li>Is the api token correct, this is not the token, but your api key from your profile page.</li> </ul> <p>If you still cannot get it working, please reach out via discord, email or support in the links below!</p>"},{"location":"tutorials/calling_function_via_sdk/#next-steps","title":"Next steps","text":"<p>Next try creating your own function here</p>"},{"location":"tutorials/creating_functions_deep_dive/","title":"Creating functions, deep dive and best practices","text":"<p>In this page we will take a deeper look at function creation, do's and don't and a deep dive into the <code>jellyspec</code> file. Functions are designed to do solve a problem, such as one of the following:</p> <ul> <li>Process some data</li> <li>Modify or genererate something</li> <li>Wrap a set of more complex calls to another external service</li> <li>Analysise something and return a set of results.</li> <li>Or whatever you can think of that can help others.</li> </ul> <p>Currently functions are based on the Google Functions Framework, in the future we will support Azure Functions, AWS Lambda's and others.</p>"},{"location":"tutorials/creating_functions_deep_dive/#cors","title":"CORS","text":"<p>CORS (Cross-Origin Resource Sharing) is a security mechanism that restricts browsers from making requests from one domain to another. This prevents malicious websites from accessing data from other websites without explicit permission. These examples show how to implement CORS to each supported languages, these should be taken and adjusted as needed.</p> Ruby <pre><code>headers = {\n'Access-Control-Allow-Origin' =&gt; '*',\n'Access-Control-Allow-Methods' =&gt; 'GET, POST, PUT, DELETE, OPTIONS'\n}\n</code></pre> Php <pre><code>header('Access-Control-Allow-Origin: *');\nheader('Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS');\n</code></pre> Python <pre><code>from flask import Flask, jsonify\napp = Flask(**name**)\n\n@app.route('/')\ndef index():\n    return jsonify({'message': 'Hello, World!'})\n\n@app.after_request\ndef after_request(response):\nresponse.headers.add('Access-Control-Allow-Origin', '*')\nresponse.headers.add('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS')\nreturn response\n\nif __name__ == '__main__':\napp.run(debug=True)\n</code></pre> Go <pre><code>package main\n\nimport (\n        \"fmt\"\n        \"net/http\"\n)\n\nfunc main() {\n        http.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n                w.Header().Set(\"Access-Control-Allow-Origin\", \"*\")\n                w.Header().Set(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, DELETE, OPTIONS\")\n                fmt.Fprintf(w, \"Hello, world!\")\n        })\n\n        http.ListenAndServe(\":8080\", nil)\n}\n</code></pre> Node <pre><code>const express = require('express');\nconst app = express();\n\napp.get('/', (req, res) =&gt; {\nres.header('Access-Control-Allow-Origin', '*');\nres.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\nres.send('Hello, World!');\n});\n\napp.listen(3000, () =&gt; {\nconsole.log('Server listening on port 3000');\n});\n</code></pre> Dotnet <pre><code>public void ConfigureServices(IServiceCollection services)\n{\n    services.AddCors(options =&gt;\n    {\n        options.AddDefaultPolicy(\n            builder =&gt;\n            {\n                builder.WithOrigins(\"*\").AllowAnyMethod().AllowAnyHeader();\n            });\n    });\n}\n\npublic void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n{\n    app.UseCors(); \n    // ... rest of your application configuration\n}\n</code></pre>"},{"location":"tutorials/creating_functions_deep_dive/#function-creation-overview","title":"Function creation overview","text":"<p>Creating a function should be a staightforward process, functions by design are designed to do one thing and one thing well, and tend to me single threaded. You can use threads, however ensure you are cleaning up and do not end up with an infinite block waiting for a non returning, or long running process.</p> <p>A good example would be to process 10 chunks of text at the same time, and wait for the thread group to complete before carriying on. However just iterating over a loop also works.</p> <p>On the entry point to a function, it is usually a good idea to check for the correct <code>REST</code> verb, normally <code>GET</code>, <code>POST</code>, <code>PUT</code> and <code>DELETE</code> are used, Here are the four basic <code>HTTP</code> verbs used in <code>REST</code> commands:</p> <ul> <li><code>GET</code>: Retrieves a specific resource or a collection of resources</li> <li><code>POST</code>: Creates a new resource</li> <li><code>PUT</code>: Updates a specific resource</li> <li><code>DELETE</code>: Removes a specific resource</li> </ul> <p>A function can (optionally) take an input(s) and return an output.</p>"},{"location":"tutorials/creating_functions_deep_dive/#passing-in-data-query-params-body-and-file","title":"Passing in Data, Query Params, Body and File","text":"<p>Currently JellyFaas supports handling of three types of input to functions, you specify the requirements in the <code>jellyspec.json</code> file. This is so the JellyFaaS SDK can validate the required parameters, generate the input class structures in all supported languages along with supplying AI (such as Gemini/ChatGPT) with the information on the function definition so it knows how to use it.</p>"},{"location":"tutorials/creating_functions_deep_dive/#query-params","title":"<code>Query Params</code>","text":"<p>In a URL, for example : <code>https://example.com/doSomething?foo=bar&amp;age=10</code>. In this case we have a <code>query param</code> <code>foo</code> which equals <code>bar</code> and <code>age</code> which is equal to <code>10</code>. These can be used in <code>GET</code>, <code>POST</code>, <code>PUT</code> and <code>DELETE</code></p> <p>Note: these are all strings internally so you will need to cast it where needed. For example, if you have <code>lenght=10.3</code> then <code>10.3</code> will be a string, and you will need to cast it to a float if you wanted to use it a one.</p>"},{"location":"tutorials/creating_functions_deep_dive/#body","title":"<code>Body</code>","text":"<p>A block of JSON</p> <p>Warning</p> <p>You cannot use a body in a <code>GET</code> command, it must be used in a <code>POST</code>, <code>PUT</code> or <code>DELETE</code></p> <p>If you want to pass in an object (for strict typing) or you do not want to pass via query params you can use a <code>JSON</code> body, and example would be:</p> Example json for creating a person with a POST<pre><code>{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"age\": 30,\n  \"email\": \"&lt;john.doe@example.com&gt;\",\n  \"address\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"Anytown\"\n  }\n}\n</code></pre> <p>Using a <code>JSON</code> block you convert in code to a object, normally the object conversion process is a built in library which handles errors. This then allows you to work with the object with the correct types.</p>"},{"location":"tutorials/creating_functions_deep_dive/#file","title":"<code>File</code>","text":"<p>A Single File, such as a <code>png, txt, csv</code> etc.</p> <p>Information</p> <p>Currently JellyFaaS only supports a single file, multi file (and form-data) will be released soon.</p> <p>If you want to process a file. You can still send query params too, for example resizing a photo you send the file, along with resize information in the query params <code>width=200&amp;height=100</code>.</p>"},{"location":"tutorials/creating_functions_deep_dive/#output-of-data-body-and-file","title":"Output of Data, Body and File","text":"<p>You can return data from a function, again this is described in the <code>jellyspec.json</code> file, this allows JellyFaaS to generate output class examples in all supported languages.</p>"},{"location":"tutorials/creating_functions_deep_dive/#body_1","title":"<code>Body</code>","text":"<p>A block of JSON</p> <p>Returning data from any REST request, <code>GET</code>, <code>POST</code>, <code>PUT</code> and <code>DELETE</code>, This is optional along with a success result, however common practices are to return the created item long with a <code>200</code>.</p> Example json for creating a person with a `POST`<pre><code>{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"age\": 30,\n  \"email\": \"&lt;john.doe@example.com&gt;\",\n  \"address\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"Anytown\"\n  }\n}\n</code></pre> <p>If no item is returned along with a <code>200</code>,<code>404</code> etc:</p> sample when no item returned, but 200<pre><code>{\n    \"worked\":true,\n    \"message\":\"created\"\n}\n</code></pre> <p>or</p> sample when no item returned, but 404<pre><code>{\n    \"worked\":false,\n    \"message\":\"Cannot find user 12345\"\n}\n</code></pre> <p>Using a <code>JSON</code> block you convert in code to a object, normally the object conversion process is a built in library which handles errors. This then allows you to work with the object with the correct types.</p>"},{"location":"tutorials/creating_functions_deep_dive/#file_1","title":"<code>File</code>","text":"<p>A Single File, such as a <code>png, txt, csv</code> etc.</p> <p>Information</p> <p>Currently JellyFaaS only supports a single file, multi file (and form-data) will be released soon.</p> <p>If you want to return a file.</p>"},{"location":"tutorials/creating_functions_deep_dive/#function-creation","title":"Function Creation","text":"<p>JellyFaas supports the following languages for function creation, The following sections contain information on:</p> <ul> <li>Runtime Version Support</li> <li>CLI command to create a working template</li> <li>A simple HTTP request code snippet</li> <li>Command(s) to test locally</li> </ul> Java <p>Prerequisites: Installation of Java, currently supported Java versions are:</p> Version jellyspec runtime Java 11 <code>java11</code> Java 17 <code>java17</code> Java 21 <code>java21</code> <p>Template creation:</p> <pre><code>jellyfaas create -d &lt;dir location&gt; -l java -n &lt;function name&gt;\n</code></pre> <p>Basic HTTP Request:</p> <p>This sample basic request that returns 'hello world', it also included validation that a <code>GET</code> verb is being used.</p> Java Code Sample <pre><code>package functions;\n\nimport com.google.cloud.functions.HttpFunction;\nimport com.google.cloud.functions.HttpRequest;\nimport com.google.cloud.functions.HttpResponse;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\npublic class HelloWorld implements HttpFunction {\n\n    private static final String METHOD_NOT_ALLOWED_MESSAGE = \"Method Not Allowed. Only GET requests are supported.\";\n\n    @Override\n    public void service(HttpRequest request, HttpResponse response) throws IOException {\n        if (!request.getMethod().equals(\"GET\")) {\n        response.setStatusCode(405); // Method Not Allowed\n        response.setContentType(\"text/plain\");\n        BufferedWriter writer = response.getWriter();\n        writer.write(METHOD_NOT_ALLOWED_MESSAGE);\n        return;\n        }\n\n        // logic for handling GET requests\n        BufferedWriter writer = response.getWriter();\n        writer.write(\"Hello World!\");\n    }\n}\n</code></pre> <p>Testing locally:</p> <p>To test locally run the following commands:</p> <p><code>mvn install</code>, if needed, then :</p> <pre><code>mvn clean package\nmvn function:run\n</code></pre> <p>Your function is now running on <code>http://localhost:8000</code>. Note, its http, not http(S) locally</p> Php <p>Prerequisites: Installation of Php, currently supported Php versions are:</p> Version jellyspec runtime Php 8.2 <code>php82</code> Php 8.1 <code>php81</code> Php 7.4 <code>php74</code> <p>Template creation:</p> <pre><code>jellyfaas create -d &lt;dir location&gt; -l php -n &lt;function name&gt;\n</code></pre> <p>Basic HTTP Request:</p> <p>This sample basic request that returns 'hello world', it also included validation that a <code>GET</code> verb is being used.</p> Php Code Sample <pre><code>&lt;?php\n\nuse Google\\CloudFunctions\\FunctionsFramework;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Message\\ResponseInterface;\n\n// Register the function with Functions Framework.\nFunctionsFramework::http('Example', 'example');\n\nfunction example(ServerRequestInterface $request, ResponseInterface $response): ResponseInterface\n{\n    $method = $request-&gt;getMethod();\n\n    if ($method !== 'GET') {\n        $response-&gt;getBody()-&gt;write('Method Not Allowed. Only GET requests are supported.');\n        return $response-&gt;withStatus(405)-&gt;withHeader('Content-Type', 'text/plain');\n    }\n\n    $greeting = \"Hello, World!\";\n\n    // Return the response as plain text\n    $response-&gt;getBody()-&gt;write($greeting);\n    return $response-&gt;withHeader('Content-Type', 'text/plain');\n}\n</code></pre> <p>Testing locally:</p> <p>To test locally run the following commands:</p> For Windows<pre><code>composer require google/cloud-functions-framework \nor\nset \"FUNCTION_TARGET=example\" &amp;&amp; php -S localhost:8080 vendor/google/cloud-functions-framework/router.php\n</code></pre> mac/*nix run<pre><code>export FUNCTION_TARGET=example\nphp -S localhost:8080 vendor/google/cloud-functions-framework/router.php\n</code></pre> Python <p>Prerequisites: Installation of Php, currently supported Php versions are:</p> Version jellyspec runtime Python 3.12 <code>python312</code> Python 3.11 <code>python311</code> Python 3.10 <code>python310</code> Python 3.9 <code>python39</code> Python 3.8 <code>python38</code> Python 3.7 <code>python37</code> <p>Template creation:</p> <pre><code>jellyfaas create -d &lt;dir location&gt; -l python -n &lt;function name&gt;\n</code></pre> <p>Basic HTTP Request:</p> <p>This sample basic request that returns 'hello world', it also included validation that a <code>GET</code> verb is being used.</p> Python Code Sample <pre><code>import functions_framework\nfrom flask import jsonify, request\n\n@functions_framework.http\ndef hello_world(request):\n    if request.method == 'GET':\n        return jsonify({'message': 'Hello, World!'})\n    else:\n        return jsonify({'error': 'Method Not Allowed'}), 405\n</code></pre> <p>Testing locally:</p> <p>To test locally run the following commands:</p> Testing<pre><code>pip install functions-framework \nfunctions-framework --target Example --debug\n</code></pre> Go <p>Prerequisites: Installation of Php, currently supported Php versions are:</p> Version jellyspec runtime Go 1.22 <code>go122</code> Go 1.21 <code>go121</code> Go 1.20 <code>go120</code> Go 1.19 <code>go119</code> Go 1.18 <code>go118</code> Go 1.16 <code>go116</code> Go 1.13 <code>go113</code> Go 1.12 <code>go112</code> Go 1.11 <code>go111</code> <p>Template creation:</p> <pre><code>jellyfaas create -d &lt;dir location&gt; -l go -n &lt;function name&gt;\n</code></pre> <p>Basic HTTP Request:</p> <p>This sample basic request that returns 'hello world', it also included validation that a <code>GET</code> verb is being used.</p> Go Code Sample <pre><code>package example\n\nimport (\n    \"encoding/json\"\n    \"github.com/GoogleCloudPlatform/functions-framework-go/functions\"\n    \"net/http\"\n)\n\nfunc init() {\n    functions.HTTP(\"hello_world\", helloWorld)\n}\n\nfunc helloWorld(w http.ResponseWriter, r *http.Request) {\n    if r.Method != http.MethodGet {\n        w.WriteHeader(http.StatusMethodNotAllowed)\n        return\n    }\n    message := \"Hello, World!\"\n    w.Header().Set(\"Content-Type\", \"application/json\")\n    json.NewEncoder(w).Encode(map[string]string{\"message\": message})\n}\n</code></pre> <p>Testing locally:</p> <p>To test locally run the following commands:</p> For Windows<pre><code>set \"FUNCTION_TARGET=Example\" &amp;&amp; set \"LOCAL_ONLY=true\" &amp;&amp; go run cmd/main.go\nor\nset \"FUNCTION_TARGET=example\" &amp;&amp; php -S localhost:8080 vendor/google/cloud-functions-framework/router.php\n</code></pre> mac/*nix run<pre><code>FUNCTION_TARGET=Example LOCAL_ONLY=true go run cmd/main.go\n</code></pre> Ruby <p>Prerequisites: Installation of Php, currently supported Php versions are:</p> Version jellyspec runtime Ruby 3.2 <code>ruby32</code> Ruby 3.0 <code>ruby30</code> Ruby 2.7 <code>ruby27</code> Ruby 2.6 <code>ruby26</code> <p>Template creation:</p> <pre><code>jellyfaas create -d &lt;dir location&gt; -l php -n &lt;function name&gt;\n</code></pre> <p>Basic HTTP Request:</p> <p>This sample basic request that returns 'hello world', it also included validation that a <code>GET</code> verb is being used.</p> Ruby Code Sample <pre><code>    require 'functions_framework'\n    require 'json'\n\n    FunctionsFramework.http 'hello_world' do |request|\n    if request.method != 'GET'\n        [405, { \"Content-Type\" =&gt; \"application/json\" }, [{ 'error' =&gt; 'Method Not Allowed' }.to_json]]\n    else\n        [200, { \"Content-Type\" =&gt; \"application/json\" }, [{ 'message' =&gt; 'Hello, World!' }.to_json]]\n    end\n    end\n</code></pre> <p>Testing locally:</p> <p>To test locally run the following commands:</p> Testing<pre><code>bundle install\nbundle exec functions-framework-ruby --target example\n</code></pre> Dotnet <p>Prerequisites: Installation of Php, currently supported Php versions are:</p> Version jellyspec runtime .NET 8 <code>dotnet8</code> .NET 6 <code>dotnet6</code> <p>Template creation:</p> <pre><code>jellyfaas create -d &lt;dir location&gt; -l dotnet -n &lt;function name&gt;\n</code></pre> <p>Basic HTTP Request:</p> <p>This sample basic request that returns 'hello world', it also included validation that a <code>GET</code> verb is being used.</p> Dotnet Code Sample <p>``` dotnet using Google.Cloud.Functions.Framework; using Microsoft.AspNetCore.Http; using Microsoft.Extensions.Logging; using System; using System.Text.Json; using System.Threading.Tasks;</p> <p>namespace ExampleProject { public class HelloWorld : IHttpFunction {     private readonly ILogger _logger; <pre><code>public HelloWorld(ILogger&lt;HelloWorld&gt; logger)\n{\n_logger = logger;\n}\n\npublic async Task HandleAsync(HttpContext context)\n{\nif (context.Request.Method != HttpMethods.Get)\n{\n    context.Response.StatusCode = StatusCodes.Status405MethodNotAllowed;\n    await context.Response.WriteAsync(\"Only GET requests allowed.\");\n    return;\n}\n\nvar message = \"Hello, World!\";\ncontext.Response.ContentType = \"application/json\";\nawait context.Response.WriteAsync(JsonSerializer.Serialize(message));\n}\n</code></pre> <p>} }</p> <p>```</p> <p>Testing locally:</p> <p>To test locally run the following commands:</p> Testing Command<pre><code>dotnet run\n</code></pre> Node <p>Prerequisites: Installation of Php, currently supported Php versions are:</p> Version jellyspec runtime Node.js 20 <code>nodejs20</code> Node.js 18 <code>nodejs18</code> Node.js 16 <code>nodejs16</code> Node.js 14 <code>nodejs14</code> Node.js 12 <code>nodejs12</code> Node.js 10 <code>nodejs10</code> Node.js 8 <code>nodejs8</code> Node.js 6 <code>nodejs6</code> <p>Template creation:</p> <pre><code>jellyfaas create -d &lt;dir location&gt; -l node -n &lt;function name&gt;\n</code></pre> <p>Basic HTTP Request:</p> <p>This sample basic request that returns 'hello world', it also included validation that a <code>GET</code> verb is being used.</p> Node Code Sample <pre><code>    const functions = require('@google-cloud/functions-framework');\n\n    functions.http('hello_world', (req, res) =&gt; {\n    if (req.method !== 'GET') {\n        res.status(405).send('Method Not Allowed');\n        return;\n    }\n\n    const message = 'Hello, World!';\n    res.setHeader('Content-Type', 'application/json');\n    res.send(message);\n    });\n</code></pre> <p>Testing locally:</p> <p>To test locally run the following commands:</p> For Windows, Mac/*nix<pre><code>npm install @google-cloud/functions-framework\nnpm start\n</code></pre>"},{"location":"tutorials/creating_functions_deep_dive/#help-things-are-not-working","title":"Help, things are not working","text":"Issue Solution Getting a 409 error Check you have the correct REST verb, for example using a <code>GET</code> not a <code>POST</code>, and if you are using a <code>GET</code> you do not have body. I cannot use Tesseract Tesseract is installed on the OS Level (not as in import), and we currently do not support this, however it is on the roadmap. CORS Suuport If you get issues connecting with access from UI's this is normally down to CORS', it is good practice to add cors to each function."},{"location":"tutorials/first_function_creation/","title":"First Function creation","text":"<p>In this tutorial we are going to have a high level look at creating your own function and deploy it into the JellyFaaS eco system, ready for yourself and others to use. This is a quick overview guide, you can find a more indepth guide here.</p> <p>In this guide we are going to complete the following list:</p> <ol> <li>Create a template project in the languge you want to use.</li> <li>Modify the code to return a response.</li> <li>Update the <code>jellyspec.json</code> file</li> <li>Test the function.</li> <li>Deploy the function.</li> </ol> <p>For this to work you will need to ensure you have installed the JellyFaaS CLI (Command Line Interface), instructions can be found here.</p>"},{"location":"tutorials/first_function_creation/#create-a-new-project","title":"Create a new project","text":"<p>We support the following languages for function creation : Go, Java, Ruby, Java, .DotNet, php and Python.</p> <p>To create a number project use the following command, in this case we are using Golang, but feel free to replace with a languge you prefer, or just follow along using Go.</p> <p>You will need to ensure you have the required software installed for using Go, for installing Golang see here, it is also useful to have an IDE such as VSCode. Download and install VSCode from here</p> <p>Run the following command in a terminal:</p> <pre><code>jellyfaas create -d ~/src/functions/booksuggester -l go -n booksuggester\n</code></pre> <p>you should see output simular to this:</p> <pre><code>JellyFaaS CLI v1.2.2 - http://app.jellyfaas.com\n\nEnumerating objects: 311, done.\nCounting objects: 100% (311/311), done.\nCompressing objects: 100% (168/168), done.\nTotal 311 (delta 197), reused 232 (delta 125), pack-reused 0 (from 0)\n\nProject created successfully!\nPlease read the README.md for getting started.\n</code></pre> <p>You are now ready to edit the project, if you see any issues please see the section on help at the bottom of the page.</p>"},{"location":"tutorials/first_function_creation/#editing-the-code","title":"Editing the code","text":"<p>In this section we are going to edit the code to return a random book when supplied with a query param of a genre. Open the project in VSCode (or you editor of choice) and then open <code>function.go</code>:</p> <p></p> <p>What you can see here is a very simple function, wiht the <code>init()</code> function that describes the entry point, the actual function (in this case <code>Example</code>) and a response object <code>Response struct</code> along with a few imports at the top to make it work.</p>"},{"location":"tutorials/first_function_creation/#add-data","title":"Add Data","text":"<p>First add a collection of books, this goes bewteen the <code>import</code> section and the <code>init</code> section.If you get stuck the complete code is listed below.</p> <p>Add this code into the <code>function.go</code>:</p> Book Structure and Data<pre><code>// Book represents a single book with a title, author, and genre.\ntype Book struct {\n Title  string `json:\"Title\"`\n Author string `json:\"Author\"`\n Genre  string `json:\"Genre\"`\n}\n\n// books is a slice of Book with 20 entries of various genres.\nvar books = []Book{\n {Title: \"Dune\", Author: \"Frank Herbert\", Genre: \"Science Fiction\"},\n {Title: \"Foundation\", Author: \"Isaac Asimov\", Genre: \"Science Fiction\"},\n {Title: \"Neuromancer\", Author: \"William Gibson\", Genre: \"Science Fiction\"},\n {Title: \"Pride and Prejudice\", Author: \"Jane Austen\", Genre: \"Romance\"},\n {Title: \"Jane Eyre\", Author: \"Charlotte Bront\u00eb\", Genre: \"Romance\"},\n {Title: \"The Notebook\", Author: \"Nicholas Sparks\", Genre: \"Romance\"},\n {Title: \"The Hobbit\", Author: \"J.R.R. Tolkien\", Genre: \"Fantasy\"},\n {Title: \"The Fellowship of the Ring\", Author: \"J.R.R. Tolkien\", Genre: \"Fantasy\"},\n {Title: \"Harry Potter and the Sorcerer's Stone\", Author: \"J.K. Rowling\", Genre: \"Fantasy\"},\n {Title: \"Harry Potter and the Chamber of Secrets\", Author: \"J.K. Rowling\", Genre: \"Fantasy\"},\n {Title: \"To Kill a Mockingbird\", Author: \"Harper Lee\", Genre: \"Classic\"},\n {Title: \"1984\", Author: \"George Orwell\", Genre: \"Classic\"},\n {Title: \"The Great Gatsby\", Author: \"F. Scott Fitzgerald\", Genre: \"Classic\"},\n {Title: \"Moby Dick\", Author: \"Herman Melville\", Genre: \"Classic\"},\n {Title: \"It\", Author: \"Stephen King\", Genre: \"Horror\"},\n {Title: \"Dracula\", Author: \"Bram Stoker\", Genre: \"Horror\"},\n {Title: \"Frankenstein\", Author: \"Mary Shelley\", Genre: \"Horror\"},\n {Title: \"Carrie\", Author: \"Stephen King\", Genre: \"Horror\"},\n {Title: \"Thinking, Fast and Slow\", Author: \"Daniel Kahneman\", Genre: \"Non-Fiction\"},\n {Title: \"Sapiens: A Brief History of Humankind\", Author: \"Yuval Noah Harari\", Genre: \"Non-Fiction\"},\n}\n</code></pre>"},{"location":"tutorials/first_function_creation/#add-the-search-functionality","title":"Add the search functionality","text":"<p>At the bottom of the file add the following function, this code takes a <code>genre</code> as a <code>string</code> and returns a <code>book</code> or an <code>error</code></p> <p>Copy this into the code at the end of the file:</p> Code for book searching<pre><code>// getRandomBookByGenre takes a genre string and returns a \n// random Book matching that genre or an error if no \n// books are found for that genre.\nfunc getRandomBookByGenre(genre string) (Book, error) {\n // Filter the books by the specified genre\n var filtered []Book\n for _, b := range books {\n  if strings.ToLower(b.Genre) == genre {\n   filtered = append(filtered, b)\n  }\n }\n\n if len(filtered) == 0 {\n  return Book{}, errors.New(\"no books found for the given genre\")\n }\n\n return filtered[rand.Intn(len(filtered))], nil\n}\n</code></pre> <p>you will also need to update the imports section if it doesn't automatically update to add <code>math/rand</code> <code>time</code> and <code>errors</code>:</p> updated imports<pre><code>import (\n \"encoding/json\"\n \"errors\"\n \"math/rand\"\n \"net/http\"\n \"strings\"\n\n \"github.com/GoogleCloudPlatform/functions-framework-go/functions\"\n)\n</code></pre>"},{"location":"tutorials/first_function_creation/#remove-the-response-object","title":"Remove the response object","text":"<p>You will need to remove the reponse object, as we will be using the existing book object in this case: Typically, you use a seperate reponse object to return, as this would be considered an antipattern or security issue</p> Delete response object<pre><code>type Response struct {\n Greeting string `json:\"greeting\"`\n}\n</code></pre>"},{"location":"tutorials/first_function_creation/#editing-the-entry-point-for-the-function","title":"Editing the entry point for the function","text":"<p>We now need to edit the actual code that JellyFaaS calls, this is the entry point of the function. In this getting started example, we will leave the function name as is, in further tutorials we will update and change this. This is just an internal reference or entry point, so changing to a unique name is not required.</p> <p>Chance the code to the following:</p> Updated Example function<pre><code>func Example(w http.ResponseWriter, r *http.Request) {\n genre := r.URL.Query().Get(\"genre\")\n\n book, err := getRandomBookByGenre(strings.ToLower(genre))\n if err != nil {\n  http.Error(w, err.Error(), http.StatusNotFound)\n  return\n }\n\n w.Header().Set(\"Content-Type\", \"application/json\")\n w.WriteHeader(http.StatusOK)\n json.NewEncoder(w).Encode(book)\n}\n</code></pre>"},{"location":"tutorials/first_function_creation/#changes-made-feel-free-to-skip-to-the-next-section","title":"Changes made, feel free to skip to the next section","text":"<pre><code>genre := r.URL.Query().Get(\"genre\")`\n</code></pre> <p>Get the query param passed in called <code>genre</code> and set it to the variable <code>genre</code></p> <pre><code>book, err := getRandomBookByGenre(genre)\n if err != nil {\n  http.Error(w, err.Error(), http.StatusNotFound)\n  return\n }\n</code></pre> <p>Call out to the function <code>getRandomBookByGenre</code> with the param <code>genre</code>, this functionr retuns a valid book choice, or an error. If an error returns set a <code>HTTP</code> error with the status of <code>http.StatusNotFound</code> or <code>404</code> internally.</p> <pre><code> w.Header().Set(\"Content-Type\", \"application/json\")\n w.WriteHeader(http.StatusOK)\n json.NewEncoder(w).Encode(book)\n</code></pre> <p>If all is ok, then set the correct response type to <code>JSON</code> and set <code>http.StatusOk</code> (200) and encode the book into json and then return.</p>"},{"location":"tutorials/first_function_creation/#updating-the-jellyspecjson-file","title":"Updating the <code>jellyspec.json</code> file","text":"<p>Before we can deploy or test we need to update the <code>jellyspec.json</code> file. For a deepdive on the <code>jellyfaas.json</code> file see here. The <code>jellyfaas.json</code> file contains information and specifications about the function. Like most json specification files, it may look complex, but the data is quite simple, and further most of the 'complex' looking data is autogenerated from the cli.</p> <p>At a top level view the <code>jellyspec.json</code> contains information such as the name of the function, the entry points and specification about the requirements of calling the function. This allows jellyfaas to validated requirements, and also allows the functions to work with AI (AI, need to know how the API 'looks' so it knows how to call it correctly.)</p> The Template `jellyspec.json` file<pre><code>{\n  \"name\": \"Example Project\",\n  \"$jellyspecversion\": \"v1.0.0\",\n  \"shortname\": \"example\",\n  \"runtime\": \"go122\",\n  \"entrypoint\": \"Example\",\n  \"description\": \"Takes a name as query and greets you!\",\n  \"requirements\": {\n    \"requestType\": \"GET\",\n    \"inputType\": null,\n    \"outputType\": null,\n    \"queryParams\": [\n      {\n        \"name\": \"name\",\n        \"required\": true,\n        \"description\": \"Name of person\",\n        \"exampleData\": \"name=foo\"\n      }\n    ],\n    \"output\n    \"outputSchema\": {\n      \"$schema\": \"&lt;https://json-schema.org/draft/2020-12/schema&gt;\",\n      \"properties\": {\n        \"greeting\": {\n          \"type\": \"string\"\n        }\n      },\n      \"type\": \"object\",\n      \"title\": \"Generated schema from jellyfaas\"\n    },\n    \"outputJsonExample\": \"{\\\"greeting\\\":\\\"hello, foo!\\\"}\"\n  },\n  \"tags\": [\n    \"template\"\n  ]\n}\n</code></pre> <p>We need to change it to this:</p> The Template `jellyspec.json` file<pre><code>{\n  \"name\": \"Book Suggester\",\n  \"$jellyspecversion\": \"v1.0.0\",\n  \"shortname\": \"booksuggester\",\n  \"runtime\": \"go122\",\n  \"entrypoint\": \"Example\",\n  \"description\": \"Takes a genre and returns a suggested book\",\n  \"requirements\": {\n    \"requestType\": \"GET\",\n    \"queryParams\": [\n      {\n        \"name\": \"genre\",\n        \"required\": true,\n        \"description\": \"Book genre, for example 'fantasy' or 'horror'\",\n        \"exampleData\": \"genre=romance\"\n      }\n    ],\n    \"outputSchema\": {\n      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n      \"properties\": {\n        \"title\": {\n          \"type\": \"string\"\n        },\n        \"author\": {\n          \"type\": \"string\"\n        },\n        \"genre\": {\n          \"type\": \"string\"\n        }\n      },\n      \"type\": \"object\",\n      \"title\": \"Generated schema from jellyfaas\"\n    },\n    \"outputJsonExample\": \"{\\\"title\\\":\\\"The Fellowship of the Ring\\\",\\\"author\\\":\\\"J.R.R. Tolkien\\\",\\\"genre\\\":\\\"Fantasy\\\"}\"\n  },\n  \"tags\": [\n    \"tutorial\"\n  ]\n}\n</code></pre> <p>Warning</p> <p>You will need to provide a unique shortname, you can check if using the following CLI command <code>jellyfaas exists -n &lt;shortname&gt;</code> to see if the name is already taken, or search via the app.</p> <p>A quick overview shows the function required query params, and the file also defines the outputschema as <code>JSON</code>, theses are optional, however allow AI to use these functions more accuratly, and allow the JellyFaaS function pages to produce sample code and structures.</p>"},{"location":"tutorials/first_function_creation/#testing-the-function-locally","title":"Testing the function locally","text":"<p>Before we deploy testing locally is advised, this way you can test, debug and run your function. All languages support local testing. For more details on how to test on each language see here</p> <p>To run locally just run the following command in a terminal in VSCode (for example):</p> <pre><code>FUNCTION_TARGET=Example LOCAL_ONLY=true go run cmd/main.go\n</code></pre> <p>If using VSCode it may look like this:</p> <p></p> <p>Once the command is running you can hit the endpoint with the following:</p> <pre><code>curl --location 'localhost:8080?genre=fantasy'\n</code></pre> <p>You will get the following (simular) result:</p> <pre><code>{\n    \"title\": \"The Fellowship of the Ring\",\n    \"author\": \"J.R.R. Tolkien\",\n    \"genre\": \"Fantasy\"\n}\n</code></pre> <p>You can then press <code>CTRL-C</code> in the terminal to end the test.</p>"},{"location":"tutorials/first_function_creation/#deploying-the-function","title":"Deploying the function","text":"<p>To deploy the function into JellyFaas you just need to run the following command. Note, you need to be one level up from code, so you can see the directory.</p> <pre><code>jellyfaas zip -s booksuggester -o true -d true\n</code></pre> <p>In short this zips up the <code>-s</code> source directory <code>booksuggester</code>, <code>-o</code> overwrites the zip if it already exists and then <code>-d</code> deploys <code>true</code>.</p> <p>You can optionally wait for deployment with the <code>-w true</code> flag</p> <p>You should then see the following output:</p> Output from deploy<pre><code>JellyFaaS CLI v1.2.2 - http://app.jellyfaas.com \n\nDirectory zipped successfully!\nZip file: booksuggester.zip\nReady for deploy\n\n        Deploying function booksuggester.zip\n        Function URL: https://app.jellyfaas.com/function/booksuggester\n        API Endpoint: https://api.jellyfaas.com/booksuggester-cn16g6rdervlrpsg3sr0-1-s\n        Function is a new function, and is currently deploying.\nDone...\n</code></pre> <p>Deploying can take up to five minutes.</p> <p>To check if your application has deployed, you can use the CLI commands:</p> <pre><code>jellyfaas library list\n</code></pre> <p>or</p> <pre><code>jellyfaas libray list |grep &lt;shortname&gt;\n</code></pre> <p>or</p> <pre><code>jellyfaas libray list -d &lt;shortname&gt;\n</code></pre> <p>If you list with <code>-d</code> for details you will see something simular to this output:</p> Details output for booksuggester<pre><code>JellyFaaS CLI v1.2.2 - http://app.jellyfaas.com\n\nFunction Name: Book Suggester\nFunction ID: booksuggester\nOwner: admin\nOwner Description:\nVersion Count: 1\nCreated At: Fri, 10 Jan 2025 13:57:18 UTC\nUpdated At: Fri, 10 Jan 2025 13:57:18 UTC\nVersions:\nDescription: Takes a genre and returns a suggested book\nEntry Point: Example\n  Version: 1\n  Latest: true\n    FunctionId: booksuggester-cn16g6rdervlrpsg3sr0-1-s\n    Function URL: https://app.jellyfaas.com/function/booksuggester\n    URL: https://api.jellyfaas.com/booksuggester-cn16g6rdervlrpsg3sr0-1-s/booksuggester\n  Release Date: Fri, 10 Jan 2025 13:57:18 UTC\n  Runtime: go122\n  Readme File: Found\n  ChangeLog File: found\n\n  Requirements:\n    Request Type: GET\n     Query Param: genre, Required: true\n    Output Schema: {\"$schema\":\"https://json-schema.org/draft/2020-12/schema\",\"properties\":{\"title\":{\"type\":\"string\"},\"author\":{\"type\":\"string\"},\"genre\":{\"type\":\"string\"}},\"type\":\"object\",\"title\":\"Generated schema from jellyfaas\"}\n    Output JSON Example: {\"title\":\"The Fellowship of the Ring\",\"author\":\"J.R.R. Tolkien\",\"genre\":\"Fantasy\"}\n</code></pre> <p>You can also vist the web app (via the WebUI link) to see the function details.</p>"},{"location":"tutorials/first_function_creation/#testing-the-function","title":"Testing the function","text":"<p>If you completed the quick start guides you will remember you need a <code>JFWT</code> (JellyFaaS Web Token), much like a <code>JWT</code> (Json Web Token) to call any function that is running in the platform, for more details on this see here</p> <p>Getting a token, via REST:</p> Curl Command to get a token<pre><code>curl --location 'https://api.jellyfaas.com/auth-service/v1/validate' --header 'x-jf-apikey: &lt;my api key&gt;'\n</code></pre> <p>Use the token to call out to your new function on JellyFaas</p> <pre><code>curl --location 'https://api.jellyfaas.com/booksuggester-cn16g6rdervlrpsg3sr0-1-s/booksuggester?genre=horror' \\\n--header 'jfwt: &lt;jfwt token&gt;'\n</code></pre> <p>You will then get a response back like:</p> <pre><code>{\n    \"title\": \"Carrie\",\n    \"author\": \"Stephen King\",\n    \"genre\": \"Horror\"\n}\n</code></pre>"},{"location":"tutorials/first_function_creation/#help-its-not-working","title":"Help, its not working","text":"<p>The code will not compile run:</p> <ul> <li>Check the code is correct, run a diff on the complete code output below and see what happens.</li> <li>See if a basic <code>hello world</code> program compiles.</li> </ul> <p>It fails to Deploy:</p> <ul> <li>Check the jellyspec file is correct.</li> <li>Check the error message returned from the CLI deploy command</li> <li>Check the name is unique, two users cannot deploy the app with the same name.</li> </ul> <p>If you get 404's or another error code these are the top things to check when calling out:</p> <ul> <li>You are doing a <code>GET</code> request</li> <li>If using Postman or anothe UI, you don't have any exta headers, or have anything in the <code>BODY</code> set (this changes it to a <code>POST</code>)</li> <li>Check the curl command works.</li> <li>Ensure you have correctly copied the api location from the webui or the CLI.</li> <li>Ensure you have <code>https</code> not <code>http</code> set</li> <li>Check your token is used NOT the apikey (that is used to get a token)</li> <li>Check you have just copied the Token into the header as the <code>value</code>, with the <code>key</code> as <code>jfwt</code> in lower case</li> </ul>"},{"location":"tutorials/first_function_creation/#complete-code","title":"Complete Code","text":"Complete working code<pre><code>package example\n\nimport (\n \"encoding/json\"\n \"errors\"\n \"math/rand\"\n \"net/http\"\n \"strings\"\n\n \"github.com/GoogleCloudPlatform/functions-framework-go/functions\"\n)\n\n// Book represents a single book with a title, author, and genre.\ntype Book struct {\n Title  string `json:\"title\"`\n Author string `json:\"author\"`\n Genre  string `json:\"genre\"`\n}\n\n// books is a slice of Book with 20 entries of various genres.\nvar books = []Book{\n {Title: \"Dune\", Author: \"Frank Herbert\", Genre: \"Science Fiction\"},\n {Title: \"Foundation\", Author: \"Isaac Asimov\", Genre: \"Science Fiction\"},\n {Title: \"Neuromancer\", Author: \"William Gibson\", Genre: \"Science Fiction\"},\n {Title: \"Pride and Prejudice\", Author: \"Jane Austen\", Genre: \"Romance\"},\n {Title: \"Jane Eyre\", Author: \"Charlotte Bront\u00eb\", Genre: \"Romance\"},\n {Title: \"The Notebook\", Author: \"Nicholas Sparks\", Genre: \"Romance\"},\n {Title: \"The Hobbit\", Author: \"J.R.R. Tolkien\", Genre: \"Fantasy\"},\n {Title: \"The Fellowship of the Ring\", Author: \"J.R.R. Tolkien\", Genre: \"Fantasy\"},\n {Title: \"Harry Potter and the Sorcerer's Stone\", Author: \"J.K. Rowling\", Genre: \"Fantasy\"},\n {Title: \"Harry Potter and the Chamber of Secrets\", Author: \"J.K. Rowling\", Genre: \"Fantasy\"},\n {Title: \"To Kill a Mockingbird\", Author: \"Harper Lee\", Genre: \"Classic\"},\n {Title: \"1984\", Author: \"George Orwell\", Genre: \"Classic\"},\n {Title: \"The Great Gatsby\", Author: \"F. Scott Fitzgerald\", Genre: \"Classic\"},\n {Title: \"Moby Dick\", Author: \"Herman Melville\", Genre: \"Classic\"},\n {Title: \"It\", Author: \"Stephen King\", Genre: \"Horror\"},\n {Title: \"Dracula\", Author: \"Bram Stoker\", Genre: \"Horror\"},\n {Title: \"Frankenstein\", Author: \"Mary Shelley\", Genre: \"Horror\"},\n {Title: \"Carrie\", Author: \"Stephen King\", Genre: \"Horror\"},\n {Title: \"Thinking, Fast and Slow\", Author: \"Daniel Kahneman\", Genre: \"Non-Fiction\"},\n {Title: \"Sapiens: A Brief History of Humankind\", Author: \"Yuval Noah Harari\", Genre: \"Non-Fiction\"},\n}\n\nfunc init() {\n functions.HTTP(\"Example\", Example)\n}\n\nfunc Example(w http.ResponseWriter, r *http.Request) {\n genre := r.URL.Query().Get(\"genre\")\n\n book, err := getRandomBookByGenre(strings.ToLower(genre))\n if err != nil {\n  http.Error(w, err.Error(), http.StatusNotFound)\n  return\n }\n\n w.Header().Set(\"Content-Type\", \"application/json\")\n w.WriteHeader(http.StatusOK)\n json.NewEncoder(w).Encode(book)\n}\n\n// getRandomBookByGenre takes a genre string and returns a random Book matching that genre\n// or an error if no books are found for that genre.\nfunc getRandomBookByGenre(genre string) (Book, error) {\n // Filter the books by the specified genre\n var filtered []Book\n for _, b := range books {\n  if strings.ToLower(b.Genre) == genre {\n   filtered = append(filtered, b)\n  }\n }\n\n if len(filtered) == 0 {\n  return Book{}, errors.New(\"no books found for the given genre\")\n }\n\n return filtered[rand.Intn(len(filtered))], nil\n}\n</code></pre> <p>jellyspec file:</p> jellyspec.json<pre><code>{\n  \"name\": \"Book Suggester\",\n  \"$jellyspecversion\": \"v1.0.0\",\n  \"shortname\": \"booksuggester\",\n  \"runtime\": \"go122\",\n  \"entrypoint\": \"Example\",\n  \"description\": \"Takes a genre and returns a suggested book\",\n  \"requirements\": {\n    \"requestType\": \"GET\",\n    \"queryParams\": [\n      {\n        \"name\": \"genre\",\n        \"required\": true,\n        \"description\": \"Book genre, for example 'fantasy' or 'horror'\",\n        \"exampleData\": \"genre=romance\"\n      }\n    ],\n    \"outputType\": \"JSON\",\n    \"outputSchema\": {\n      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n      \"properties\": {\n        \"title\": {\n          \"type\": \"string\"\n        },\n        \"author\": {\n          \"type\": \"string\"\n        },\n        \"genre\": {\n          \"type\": \"string\"\n        }\n      },\n      \"type\": \"object\",\n      \"title\": \"Generated schema from jellyfaas\"\n    },\n    \"outputJsonExample\": \"{\\\"title\\\":\\\"The Fellowship of the Ring\\\",\\\"author\\\":\\\"J.R.R. Tolkien\\\",\\\"genre\\\":\\\"Fantasy\\\"}\"\n  },\n  \"tags\": [\n    \"tutorial\"\n  ]\n}\n</code></pre>"},{"location":"tutorials/function_with_dependencies/","title":"Creating functions with dependecies","text":""},{"location":"tutorials/getting_token_via_rest/","title":"Getting a token via the API","text":"<p>Before you can call out to a function you need a WebToken, in this case (like a JWT) a JellyFaaS webtoken.</p> <p>These, like JWT's have an expiry time on then, usually around 24 hours.</p> <p>To generate a JFWT (JellyFaaS Web Token) you need to call out to the following auth endpoint:</p> <pre><code>https://api.jellyfaas.com/auth-service/v1/validate\n</code></pre> <p>This needs an header set with your API Key (from you profile page HERE) called <code>x-jf-apikey</code> set.</p>"},{"location":"tutorials/getting_token_via_rest/#request","title":"Request","text":"<p>For example (using curl):</p> <pre><code>curl --location 'https://api.jellyfaas.com/auth-service/v1/validate' --header 'x-jf-apikey: &lt;my api key&gt;'\n</code></pre> <p>This will return the following json object :</p> <pre><code>{\n    \"token\": \"&lt;token ommited&gt;\",\n    \"expiry\": \"2025-01-09T11:26:07Z\"\n}\n</code></pre> <p>The token is used in the next steps to call out to a function.</p> <p>Copying the token into the copy buffer:</p> <p><code>curl -sS --location '&lt;https://api.jellyfaas.com/auth-service/v1/validate&gt;' --header 'x-jf-apikey: &lt;my api key&gt;' | jq -r '.token' |pbcopy</code></p>"},{"location":"tutorials/using_functioncalling/","title":"Intro to function calling","text":""},{"location":"tutorials/using_rdbms/","title":"Introduction into using a SQL Database","text":""},{"location":"tutorials/using_structured_output/","title":"Using Structured output","text":""},{"location":"tutorials/using_vectordb/","title":"Introduction into using a Vector Databases (RAG)","text":""},{"location":"tutorials/using_vectordb/#what-is-rag-and-document-storage","title":"What is RAG and Document storage?","text":"<p>RAG (Retrieval Augmented Generation) is an AI architecture where a language model retrieves relevant information from an external knowledge base (like a VectorDB) before generating a response, improving the accuracy, informativeness, and factual correctness of the AI's output.</p> <p>AI Models are based on out of date information, and do not have access to your private data. If you want them to have contextual access to your personal data or documents you can use a VectorDB.</p> <p>Note: There are more option than just Vector databases for storing data, see other options that best suit your usecase here.</p>"},{"location":"tutorials/using_vectordb/#what-are-the-usecases-for-a-vector-database","title":"What are the usecases for a Vector Database?","text":"<ul> <li>Enhanced Conversational AI: Powering chatbots and virtual assistants with access to a vast knowledge base, enabling them to provide more accurate, informative, and contextually relevant responses.</li> <li>Personalized Recommendations: Delivering highly customized product or service recommendations by understanding user preferences and past behavior stored in a VectorDB.</li> <li>Improved Search Functionality: Enabling semantic search capabilities, where users can find relevant information using natural language queries, going beyond traditional keyword matching.</li> <li>Document Summarization and Question Answering: Quickly summarizing large volumes of text and accurately answering complex questions by retrieving and analyzing the most pertinent information from a VectorDB.</li> <li>Anomaly Detection: Identifying unusual patterns and outliers in data by comparing real-time observations with historical data stored and analyzed within a VectorDB.</li> </ul>"},{"location":"tutorials/using_vectordb/#privacy-and-your-data","title":"Privacy and your data","text":"<p>JellyFaaS offer the abilty to store documents as part of your subsciption. These are all stored and only accessable by your account, they are NOT accessable via anyone elses account. Alteravtivly you can use your own datasource and pass what in. All information in the REST Body is encypted during transfer, and we do NOT store any data. The only data we store is around metrics (use, time running etc). Note: storing secrets within the platform is on the roadmap, so they will not need to be passed in as a request</p>"},{"location":"tutorials/using_vectordb/#supported-database-technology","title":"Supported Database technology","text":"<p>We currently support MongoDB (more database support  coming soon), if you want to use your own database this is easy to setup, and has a free tier for complete control of your data. If you want to setup a MongoDB please go here.</p>"},{"location":"tutorials/using_vectordb/#how-vectordb-work","title":"How VectorDB work","text":"<p>Vector Databases store data as a set of vectors, for example with a two dimensional <code>X,Y</code> vector you can have a coordinates of <code>(5, 3)</code>, and with a three dimentioal system <code>X,Y,Z</code> you can have <code>(220, 32.4, 23)</code>. In AI's case, this can be several hundres to thousands of coordinates per single vector!. JellyFaaS uses a standard of <code>768</code>. What does this mean? Each word, sentance, paragraph is split into a <code>vector</code> and stored in the database. When you query using a Vector Database, it converts the query into a vector, compares and searchs the Vector Database and then uses the results when queriying the LLM (for example, ChatGPT or Gemini). It uses the data from the Vector DB to add context to your query from your data source.</p> <p>For example, you have a company document with a policies and procedures in, you can store that document, and as queries against it. You can then add a simple chatbot interface and use it internally within your company or product.</p>"},{"location":"tutorials/using_vectordb/#tutorial","title":"Tutorial","text":"<p>In this example we are going to first query an existing free document, hosted in JellyFaaS, and then deploy a sample document, and query it.</p> <p>The current document we are using is a dungeons and dragons campain called the 'Frog Idol', just for context the Frog Idol is not a boss to be killed, but you need to 'appease the Frog Idol' to continue onwards with your journey.</p> <p>Note: The Frog Idol is source from here, and was created is owned by Dyson Logo, please check out his work!</p>"},{"location":"tutorials/using_vectordb/#a-simple-request","title":"A Simple request","text":"<p>We have a Query, \"What do I need to do, to appease the Frog Idol\", posting this in ChatGPT or Gemini will produce something like this:</p> Gemini output<pre><code>The concept of a \"Frog Idol\" and the rituals required to appease it are not part of any widely-recognized religion or mythology. It's possible that you might be referring to a fictional deity or a specific character from a book, movie, or game.\n\nIf you can provide more context about where you encountered the \"Frog Idol,\" I might be able to give you a more specific answer.\n</code></pre> <p>Clearly, it doesn't know the correct answer, as that document was not part of the models training.</p> <p>Using the following request to JellyFaaS:</p> <pre><code>curl --location 'https://ai.jellyfaas.com/query-service/v1/vectordb' --header 'jfwt: &lt;token&gt;' --header 'Content-Type: application/json' --data '{\n    \"query\": \"Tell me what to do to passify the Frog Idol.\", \n    \"vector_mongo_collection\": \"frogidol\"\n}'\n</code></pre> <p>and this time you get back something far more useful and accurate:</p> <pre><code>{\n    \"answer\": \"The Frog Idol desires the return of his lost treasures: an iron rose and a basket of amber. To appease him and obtain the amulet that will help you defeat the giants, you must find these objects and return them to him. \\n\\nHere's what you need to do:\\n\\n1. **Locate the Objects:**\\n   * **Iron Rose:** The zombie master possesses the iron rose. You'll need to find his lair and defeat him to retrieve it. \\n   * **Basket of Amber:** The nixies use the basket as a boat. Find their pool and try to bargain or fight to get the basket back. \\n   * **Amber:** You'll need to find the amber within a swampy labyrinth dedicated to the Idol, which is located within the Black Mire.  Be careful, disturbing the amber will provoke the throgrin guarding it.\\n\\n2. **Consult the Oracle:** The Alabaster Oracle, the Frog God's wife, can provide information about the location of the lost treasures. You can find her in the Alabaster Cave.\\n\\n3. **Return the Treasures:** Once you have retrieved the iron rose, the basket of amber, and the amber from the labyrinth, return them to the Frog Idol in his location within the Black Mire. \\n\\n4. **Receive the Amulet:** After placing all three treasures in front of the idol, the Frog God will grant you a stone amulet in his shape, which will help you defeat the giants.\\n\\n**Important Considerations:**\\n\\n* **The Black Mire:** The Black Mire is a dangerous and hostile swamp. Be prepared for swamp encounters and challenging terrain.\\n* **The Fruum:**  The Fruum, another god residing in the Black Mire, might interfere with your quest. Be prepared for a confrontation if necessary.\\n\\n**Remember:** This is just a general outline. You can adapt the quest to your own campaign and add your own twists and turns! \\n\",\n    \"query\": \"Tell me what to do to passify the Frog Idol.\",\n    \"spanId\": \"1urV4UDNR\",\n    \"messages\": [\n        \"completed\"\n    ]\n}\n</code></pre>"},{"location":"tutorials/using_vectordb/#uploading-my-own-document","title":"Uploading my own document","text":"<p>You can upload documents direct to your account (The exact number depends on your account level) using the following REST command:</p> Uploading a document into your environment<pre><code>curl --location 'https://ai.jellyfaas.com/embedder-service/v1/upload?collection_name=test1' --header 'jfwt: &lt;token&gt;' --form 'file=@\"&lt;path to document&gt;\"'\n</code></pre> <p>This can take a while, you can check progress with:</p> <p>Once that has been uploaded, you can query the document with the previous command.</p>"},{"location":"tutorials/using_vectordb/#using-the-sdks","title":"Using the SDK's","text":"<p>To do the same using the SDK's use the following code:</p>"},{"location":"tutorials/using_vectordb/#other-query-options","title":"Other query options","text":"<p>REST Options, you can optionally set these when using the SDK too (see the ):</p> Key Required Description query Y The query to ask rag_query N Optional, you can ask the vector database a different query to the LLM, this may be useful if you are not seeing the correct results vector_mongo_connection_string N Optional mongo db connection string (if you want to connect to your own mongo, ensure the IPS for google GCP are whitelisted!) vector_mongo_database N Optional, the database name to use. vector_mongo_collection Y The collection to use, that stores the embedded data ai_platform N Optional of Gemini (default, part of the product, or you can use your own) or OpenAI ChatGPT. api+key N If you want to bring your own API key (for Gemini, or ChatGTP [required])"}]}